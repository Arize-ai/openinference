"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ai";
exports.ids = ["vendor-chunks/ai"];
exports.modules = {

/***/ "(ssr)/./node_modules/ai/react/dist/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/ai/react/dist/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   experimental_useAssistant: () => (/* binding */ experimental_useAssistant),\n/* harmony export */   useChat: () => (/* binding */ useChat),\n/* harmony export */   useCompletion: () => (/* binding */ useCompletion)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var swr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! swr */ \"(ssr)/./node_modules/swr/core/dist/index.mjs\");\n/* harmony import */ var nanoid_non_secure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! nanoid/non-secure */ \"(ssr)/./node_modules/nanoid/non-secure/index.js\");\n/* __next_internal_client_entry_do_not_use__ experimental_useAssistant,useChat,useCompletion auto */ // react/use-chat.ts\n\n\n// shared/stream-parts.ts\nvar textStreamPart = {\n    code: \"0\",\n    name: \"text\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"text\" parts expect a string value.');\n        }\n        return {\n            type: \"text\",\n            value\n        };\n    }\n};\nvar functionCallStreamPart = {\n    code: \"1\",\n    name: \"function_call\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"function_call\" in value) || typeof value.function_call !== \"object\" || value.function_call == null || !(\"name\" in value.function_call) || !(\"arguments\" in value.function_call) || typeof value.function_call.name !== \"string\" || typeof value.function_call.arguments !== \"string\") {\n            throw new Error('\"function_call\" parts expect an object with a \"function_call\" property.');\n        }\n        return {\n            type: \"function_call\",\n            value\n        };\n    }\n};\nvar dataStreamPart = {\n    code: \"2\",\n    name: \"data\",\n    parse: (value)=>{\n        if (!Array.isArray(value)) {\n            throw new Error('\"data\" parts expect an array value.');\n        }\n        return {\n            type: \"data\",\n            value\n        };\n    }\n};\nvar errorStreamPart = {\n    code: \"3\",\n    name: \"error\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"error\" parts expect a string value.');\n        }\n        return {\n            type: \"error\",\n            value\n        };\n    }\n};\nvar assistantMessageStreamPart = {\n    code: \"4\",\n    name: \"assistant_message\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"id\" in value) || !(\"role\" in value) || !(\"content\" in value) || typeof value.id !== \"string\" || typeof value.role !== \"string\" || value.role !== \"assistant\" || !Array.isArray(value.content) || !value.content.every((item)=>item != null && typeof item === \"object\" && \"type\" in item && item.type === \"text\" && \"text\" in item && item.text != null && typeof item.text === \"object\" && \"value\" in item.text && typeof item.text.value === \"string\")) {\n            throw new Error('\"assistant_message\" parts expect an object with an \"id\", \"role\", and \"content\" property.');\n        }\n        return {\n            type: \"assistant_message\",\n            value\n        };\n    }\n};\nvar assistantControlDataStreamPart = {\n    code: \"5\",\n    name: \"assistant_control_data\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"threadId\" in value) || !(\"messageId\" in value) || typeof value.threadId !== \"string\" || typeof value.messageId !== \"string\") {\n            throw new Error('\"assistant_control_data\" parts expect an object with a \"threadId\" and \"messageId\" property.');\n        }\n        return {\n            type: \"assistant_control_data\",\n            value: {\n                threadId: value.threadId,\n                messageId: value.messageId\n            }\n        };\n    }\n};\nvar dataMessageStreamPart = {\n    code: \"6\",\n    name: \"data_message\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"role\" in value) || !(\"data\" in value) || typeof value.role !== \"string\" || value.role !== \"data\") {\n            throw new Error('\"data_message\" parts expect an object with a \"role\" and \"data\" property.');\n        }\n        return {\n            type: \"data_message\",\n            value\n        };\n    }\n};\nvar toolCallStreamPart = {\n    code: \"7\",\n    name: \"tool_calls\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"tool_calls\" in value) || typeof value.tool_calls !== \"object\" || value.tool_calls == null || !Array.isArray(value.tool_calls) || value.tool_calls.some((tc)=>{\n            tc == null || typeof tc !== \"object\" || !(\"id\" in tc) || typeof tc.id !== \"string\" || !(\"type\" in tc) || typeof tc.type !== \"string\" || !(\"function\" in tc) || tc.function == null || typeof tc.function !== \"object\" || !(\"arguments\" in tc.function) || typeof tc.function.name !== \"string\" || typeof tc.function.arguments !== \"string\";\n        })) {\n            throw new Error('\"tool_calls\" parts expect an object with a ToolCallPayload.');\n        }\n        return {\n            type: \"tool_calls\",\n            value\n        };\n    }\n};\nvar streamParts = [\n    textStreamPart,\n    functionCallStreamPart,\n    dataStreamPart,\n    errorStreamPart,\n    assistantMessageStreamPart,\n    assistantControlDataStreamPart,\n    dataMessageStreamPart,\n    toolCallStreamPart\n];\nvar streamPartsByCode = {\n    [textStreamPart.code]: textStreamPart,\n    [functionCallStreamPart.code]: functionCallStreamPart,\n    [dataStreamPart.code]: dataStreamPart,\n    [errorStreamPart.code]: errorStreamPart,\n    [assistantMessageStreamPart.code]: assistantMessageStreamPart,\n    [assistantControlDataStreamPart.code]: assistantControlDataStreamPart,\n    [dataMessageStreamPart.code]: dataMessageStreamPart,\n    [toolCallStreamPart.code]: toolCallStreamPart\n};\nvar StreamStringPrefixes = {\n    [textStreamPart.name]: textStreamPart.code,\n    [functionCallStreamPart.name]: functionCallStreamPart.code,\n    [dataStreamPart.name]: dataStreamPart.code,\n    [errorStreamPart.name]: errorStreamPart.code,\n    [assistantMessageStreamPart.name]: assistantMessageStreamPart.code,\n    [assistantControlDataStreamPart.name]: assistantControlDataStreamPart.code,\n    [dataMessageStreamPart.name]: dataMessageStreamPart.code,\n    [toolCallStreamPart.name]: toolCallStreamPart.code\n};\nvar validCodes = streamParts.map((part)=>part.code);\nvar parseStreamPart = (line)=>{\n    const firstSeparatorIndex = line.indexOf(\":\");\n    if (firstSeparatorIndex === -1) {\n        throw new Error(\"Failed to parse stream string. No separator found.\");\n    }\n    const prefix = line.slice(0, firstSeparatorIndex);\n    if (!validCodes.includes(prefix)) {\n        throw new Error(`Failed to parse stream string. Invalid code ${prefix}.`);\n    }\n    const code = prefix;\n    const textValue = line.slice(firstSeparatorIndex + 1);\n    const jsonValue = JSON.parse(textValue);\n    return streamPartsByCode[code].parse(jsonValue);\n};\n// shared/read-data-stream.ts\nvar NEWLINE = \"\\n\".charCodeAt(0);\nfunction concatChunks(chunks, totalLength) {\n    const concatenatedChunks = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const chunk of chunks){\n        concatenatedChunks.set(chunk, offset);\n        offset += chunk.length;\n    }\n    chunks.length = 0;\n    return concatenatedChunks;\n}\nasync function* readDataStream(reader, { isAborted } = {}) {\n    const decoder = new TextDecoder();\n    const chunks = [];\n    let totalLength = 0;\n    while(true){\n        const { value } = await reader.read();\n        if (value) {\n            chunks.push(value);\n            totalLength += value.length;\n            if (value[value.length - 1] !== NEWLINE) {\n                continue;\n            }\n        }\n        if (chunks.length === 0) {\n            break;\n        }\n        const concatenatedChunks = concatChunks(chunks, totalLength);\n        totalLength = 0;\n        const streamParts2 = decoder.decode(concatenatedChunks, {\n            stream: true\n        }).split(\"\\n\").filter((line)=>line !== \"\").map(parseStreamPart);\n        for (const streamPart of streamParts2){\n            yield streamPart;\n        }\n        if (isAborted == null ? void 0 : isAborted()) {\n            reader.cancel();\n            break;\n        }\n    }\n}\n// shared/utils.ts\n\nvar nanoid = (0,nanoid_non_secure__WEBPACK_IMPORTED_MODULE_2__.customAlphabet)(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", 7);\nfunction createChunkDecoder(complex) {\n    const decoder = new TextDecoder();\n    if (!complex) {\n        return function(chunk) {\n            if (!chunk) return \"\";\n            return decoder.decode(chunk, {\n                stream: true\n            });\n        };\n    }\n    return function(chunk) {\n        const decoded = decoder.decode(chunk, {\n            stream: true\n        }).split(\"\\n\").filter((line)=>line !== \"\");\n        return decoded.map(parseStreamPart).filter(Boolean);\n    };\n}\nvar COMPLEX_HEADER = \"X-Experimental-Stream-Data\";\n// shared/parse-complex-response.ts\nasync function parseComplexResponse({ reader, abortControllerRef, update, onFinish, generateId = nanoid, getCurrentDate = ()=>/* @__PURE__ */ new Date() }) {\n    const createdAt = getCurrentDate();\n    const prefixMap = {\n        data: []\n    };\n    for await (const { type, value } of readDataStream(reader, {\n        isAborted: ()=>(abortControllerRef == null ? void 0 : abortControllerRef.current) === null\n    })){\n        if (type === \"text\") {\n            if (prefixMap[\"text\"]) {\n                prefixMap[\"text\"] = {\n                    ...prefixMap[\"text\"],\n                    content: (prefixMap[\"text\"].content || \"\") + value\n                };\n            } else {\n                prefixMap[\"text\"] = {\n                    id: generateId(),\n                    role: \"assistant\",\n                    content: value,\n                    createdAt\n                };\n            }\n        }\n        let functionCallMessage = null;\n        if (type === \"function_call\") {\n            prefixMap[\"function_call\"] = {\n                id: generateId(),\n                role: \"assistant\",\n                content: \"\",\n                function_call: value.function_call,\n                name: value.function_call.name,\n                createdAt\n            };\n            functionCallMessage = prefixMap[\"function_call\"];\n        }\n        let toolCallMessage = null;\n        if (type === \"tool_calls\") {\n            prefixMap[\"tool_calls\"] = {\n                id: generateId(),\n                role: \"assistant\",\n                content: \"\",\n                tool_calls: value.tool_calls,\n                createdAt\n            };\n            toolCallMessage = prefixMap[\"tool_calls\"];\n        }\n        if (type === \"data\") {\n            prefixMap[\"data\"].push(...value);\n        }\n        const responseMessage = prefixMap[\"text\"];\n        const merged = [\n            functionCallMessage,\n            toolCallMessage,\n            responseMessage\n        ].filter(Boolean);\n        update(merged, [\n            ...prefixMap[\"data\"]\n        ]);\n    }\n    onFinish == null ? void 0 : onFinish(prefixMap);\n    return {\n        messages: [\n            prefixMap.text,\n            prefixMap.function_call,\n            prefixMap.tool_calls\n        ].filter(Boolean),\n        data: prefixMap.data\n    };\n}\n// shared/call-chat-api.ts\nasync function callChatApi({ api, messages, body, credentials, headers, abortController, appendMessage, restoreMessagesOnFailure, onResponse, onUpdate, onFinish, generateId }) {\n    var _a;\n    const response = await fetch(api, {\n        method: \"POST\",\n        body: JSON.stringify({\n            messages,\n            ...body\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...headers\n        },\n        signal: (_a = abortController == null ? void 0 : abortController()) == null ? void 0 : _a.signal,\n        credentials\n    }).catch((err)=>{\n        restoreMessagesOnFailure();\n        throw err;\n    });\n    if (onResponse) {\n        try {\n            await onResponse(response);\n        } catch (err) {\n            throw err;\n        }\n    }\n    if (!response.ok) {\n        restoreMessagesOnFailure();\n        throw new Error(await response.text() || \"Failed to fetch the chat response.\");\n    }\n    if (!response.body) {\n        throw new Error(\"The response body is empty.\");\n    }\n    const reader = response.body.getReader();\n    const isComplexMode = response.headers.get(COMPLEX_HEADER) === \"true\";\n    if (isComplexMode) {\n        return await parseComplexResponse({\n            reader,\n            abortControllerRef: abortController != null ? {\n                current: abortController()\n            } : void 0,\n            update: onUpdate,\n            onFinish (prefixMap) {\n                if (onFinish && prefixMap.text != null) {\n                    onFinish(prefixMap.text);\n                }\n            },\n            generateId\n        });\n    } else {\n        const createdAt = /* @__PURE__ */ new Date();\n        const decode = createChunkDecoder(false);\n        let streamedResponse = \"\";\n        const replyId = generateId();\n        let responseMessage = {\n            id: replyId,\n            createdAt,\n            content: \"\",\n            role: \"assistant\"\n        };\n        while(true){\n            const { done, value } = await reader.read();\n            if (done) {\n                break;\n            }\n            streamedResponse += decode(value);\n            if (streamedResponse.startsWith('{\"function_call\":')) {\n                responseMessage[\"function_call\"] = streamedResponse;\n            } else if (streamedResponse.startsWith('{\"tool_calls\":')) {\n                responseMessage[\"tool_calls\"] = streamedResponse;\n            } else {\n                responseMessage[\"content\"] = streamedResponse;\n            }\n            appendMessage({\n                ...responseMessage\n            });\n            if ((abortController == null ? void 0 : abortController()) === null) {\n                reader.cancel();\n                break;\n            }\n        }\n        if (streamedResponse.startsWith('{\"function_call\":')) {\n            const parsedFunctionCall = JSON.parse(streamedResponse).function_call;\n            responseMessage[\"function_call\"] = parsedFunctionCall;\n            appendMessage({\n                ...responseMessage\n            });\n        }\n        if (streamedResponse.startsWith('{\"tool_calls\":')) {\n            const parsedToolCalls = JSON.parse(streamedResponse).tool_calls;\n            responseMessage[\"tool_calls\"] = parsedToolCalls;\n            appendMessage({\n                ...responseMessage\n            });\n        }\n        if (onFinish) {\n            onFinish(responseMessage);\n        }\n        return responseMessage;\n    }\n}\n// shared/process-chat-stream.ts\nasync function processChatStream({ getStreamedResponse: getStreamedResponse2, experimental_onFunctionCall, experimental_onToolCall, updateChatRequest, getCurrentMessages }) {\n    while(true){\n        const messagesAndDataOrJustMessage = await getStreamedResponse2();\n        if (\"messages\" in messagesAndDataOrJustMessage) {\n            let hasFollowingResponse = false;\n            for (const message of messagesAndDataOrJustMessage.messages){\n                if ((message.function_call === void 0 || typeof message.function_call === \"string\") && (message.tool_calls === void 0 || typeof message.tool_calls === \"string\")) {\n                    continue;\n                }\n                hasFollowingResponse = true;\n                if (experimental_onFunctionCall) {\n                    const functionCall = message.function_call;\n                    if (typeof functionCall !== \"object\") {\n                        console.warn(\"experimental_onFunctionCall should not be defined when using tools\");\n                        continue;\n                    }\n                    const functionCallResponse = await experimental_onFunctionCall(getCurrentMessages(), functionCall);\n                    if (functionCallResponse === void 0) {\n                        hasFollowingResponse = false;\n                        break;\n                    }\n                    updateChatRequest(functionCallResponse);\n                }\n                if (experimental_onToolCall) {\n                    const toolCalls = message.tool_calls;\n                    if (!Array.isArray(toolCalls) || toolCalls.some((toolCall)=>typeof toolCall !== \"object\")) {\n                        console.warn(\"experimental_onToolCall should not be defined when using tools\");\n                        continue;\n                    }\n                    const toolCallResponse = await experimental_onToolCall(getCurrentMessages(), toolCalls);\n                    if (toolCallResponse === void 0) {\n                        hasFollowingResponse = false;\n                        break;\n                    }\n                    updateChatRequest(toolCallResponse);\n                }\n            }\n            if (!hasFollowingResponse) {\n                break;\n            }\n        } else {\n            let fixFunctionCallArguments2 = function(response) {\n                for (const message of response.messages){\n                    if (message.tool_calls !== void 0) {\n                        for (const toolCall of message.tool_calls){\n                            if (typeof toolCall === \"object\") {\n                                if (toolCall.function.arguments && typeof toolCall.function.arguments !== \"string\") {\n                                    toolCall.function.arguments = JSON.stringify(toolCall.function.arguments);\n                                }\n                            }\n                        }\n                    }\n                    if (message.function_call !== void 0) {\n                        if (typeof message.function_call === \"object\") {\n                            if (message.function_call.arguments && typeof message.function_call.arguments !== \"string\") {\n                                message.function_call.arguments = JSON.stringify(message.function_call.arguments);\n                            }\n                        }\n                    }\n                }\n            };\n            var fixFunctionCallArguments = fixFunctionCallArguments2;\n            const streamedResponseMessage = messagesAndDataOrJustMessage;\n            if ((streamedResponseMessage.function_call === void 0 || typeof streamedResponseMessage.function_call === \"string\") && (streamedResponseMessage.tool_calls === void 0 || typeof streamedResponseMessage.tool_calls === \"string\")) {\n                break;\n            }\n            if (experimental_onFunctionCall) {\n                const functionCall = streamedResponseMessage.function_call;\n                if (!(typeof functionCall === \"object\")) {\n                    console.warn(\"experimental_onFunctionCall should not be defined when using tools\");\n                    continue;\n                }\n                const functionCallResponse = await experimental_onFunctionCall(getCurrentMessages(), functionCall);\n                if (functionCallResponse === void 0) break;\n                fixFunctionCallArguments2(functionCallResponse);\n                updateChatRequest(functionCallResponse);\n            }\n            if (experimental_onToolCall) {\n                const toolCalls = streamedResponseMessage.tool_calls;\n                if (!(typeof toolCalls === \"object\")) {\n                    console.warn(\"experimental_onToolCall should not be defined when using functions\");\n                    continue;\n                }\n                const toolCallResponse = await experimental_onToolCall(getCurrentMessages(), toolCalls);\n                if (toolCallResponse === void 0) break;\n                fixFunctionCallArguments2(toolCallResponse);\n                updateChatRequest(toolCallResponse);\n            }\n        }\n    }\n}\n// react/use-chat.ts\nvar getStreamedResponse = async (api, chatRequest, mutate, mutateStreamData, existingData, extraMetadataRef, messagesRef, abortControllerRef, generateId, onFinish, onResponse, sendExtraMessageFields)=>{\n    var _a, _b;\n    const previousMessages = messagesRef.current;\n    mutate(chatRequest.messages, false);\n    const constructedMessagesPayload = sendExtraMessageFields ? chatRequest.messages : chatRequest.messages.map(({ role, content, name, function_call, tool_calls, tool_call_id })=>({\n            role,\n            content,\n            tool_call_id,\n            ...name !== void 0 && {\n                name\n            },\n            ...function_call !== void 0 && {\n                function_call\n            },\n            ...tool_calls !== void 0 && {\n                tool_calls\n            }\n        }));\n    if (typeof api !== \"string\") {\n        const replyId = generateId();\n        const createdAt = /* @__PURE__ */ new Date();\n        let responseMessage = {\n            id: replyId,\n            createdAt,\n            content: \"\",\n            role: \"assistant\"\n        };\n        async function readRow(promise) {\n            const { content, ui, next } = await promise;\n            responseMessage[\"content\"] = content;\n            responseMessage[\"ui\"] = await ui;\n            mutate([\n                ...chatRequest.messages,\n                {\n                    ...responseMessage\n                }\n            ], false);\n            if (next) {\n                await readRow(next);\n            }\n        }\n        try {\n            const promise = api({\n                messages: constructedMessagesPayload,\n                data: chatRequest.data\n            });\n            await readRow(promise);\n        } catch (e) {\n            mutate(previousMessages, false);\n            throw e;\n        }\n        if (onFinish) {\n            onFinish(responseMessage);\n        }\n        return responseMessage;\n    }\n    return await callChatApi({\n        api,\n        messages: constructedMessagesPayload,\n        body: {\n            data: chatRequest.data,\n            ...extraMetadataRef.current.body,\n            ...(_a = chatRequest.options) == null ? void 0 : _a.body,\n            ...chatRequest.functions !== void 0 && {\n                functions: chatRequest.functions\n            },\n            ...chatRequest.function_call !== void 0 && {\n                function_call: chatRequest.function_call\n            },\n            ...chatRequest.tools !== void 0 && {\n                tools: chatRequest.tools\n            },\n            ...chatRequest.tool_choice !== void 0 && {\n                tool_choice: chatRequest.tool_choice\n            }\n        },\n        credentials: extraMetadataRef.current.credentials,\n        headers: {\n            ...extraMetadataRef.current.headers,\n            ...(_b = chatRequest.options) == null ? void 0 : _b.headers\n        },\n        abortController: ()=>abortControllerRef.current,\n        appendMessage (message) {\n            mutate([\n                ...chatRequest.messages,\n                message\n            ], false);\n        },\n        restoreMessagesOnFailure () {\n            mutate(previousMessages, false);\n        },\n        onResponse,\n        onUpdate (merged, data) {\n            mutate([\n                ...chatRequest.messages,\n                ...merged\n            ], false);\n            mutateStreamData([\n                ...existingData || [],\n                ...data || []\n            ], false);\n        },\n        onFinish,\n        generateId\n    });\n};\nfunction useChat({ api = \"/api/chat\", id, initialMessages, initialInput = \"\", sendExtraMessageFields, experimental_onFunctionCall, experimental_onToolCall, onResponse, onFinish, onError, credentials, headers, body, generateId = nanoid } = {}) {\n    const hookId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    const idKey = id != null ? id : hookId;\n    const chatKey = typeof api === \"string\" ? [\n        api,\n        idKey\n    ] : idKey;\n    const [initialMessagesFallback] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const { data: messages, mutate } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        chatKey,\n        \"messages\"\n    ], null, {\n        fallbackData: initialMessages != null ? initialMessages : initialMessagesFallback\n    });\n    const { data: isLoading = false, mutate: mutateLoading } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        chatKey,\n        \"loading\"\n    ], null);\n    const { data: streamData, mutate: mutateStreamData } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        chatKey,\n        \"streamData\"\n    ], null);\n    const { data: error = void 0, mutate: setError } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        chatKey,\n        \"error\"\n    ], null);\n    const messagesRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(messages || []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        messagesRef.current = messages || [];\n    }, [\n        messages\n    ]);\n    const abortControllerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const extraMetadataRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        credentials,\n        headers,\n        body\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        extraMetadataRef.current = {\n            credentials,\n            headers,\n            body\n        };\n    }, [\n        credentials,\n        headers,\n        body\n    ]);\n    const triggerRequest = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (chatRequest)=>{\n        try {\n            mutateLoading(true);\n            setError(void 0);\n            const abortController = new AbortController();\n            abortControllerRef.current = abortController;\n            await processChatStream({\n                getStreamedResponse: ()=>getStreamedResponse(api, chatRequest, mutate, mutateStreamData, streamData, extraMetadataRef, messagesRef, abortControllerRef, generateId, onFinish, onResponse, sendExtraMessageFields),\n                experimental_onFunctionCall,\n                experimental_onToolCall,\n                updateChatRequest: (chatRequestParam)=>{\n                    chatRequest = chatRequestParam;\n                },\n                getCurrentMessages: ()=>messagesRef.current\n            });\n            abortControllerRef.current = null;\n        } catch (err) {\n            if (err.name === \"AbortError\") {\n                abortControllerRef.current = null;\n                return null;\n            }\n            if (onError && err instanceof Error) {\n                onError(err);\n            }\n            setError(err);\n        } finally{\n            mutateLoading(false);\n        }\n    }, [\n        mutate,\n        mutateLoading,\n        api,\n        extraMetadataRef,\n        onResponse,\n        onFinish,\n        onError,\n        setError,\n        mutateStreamData,\n        streamData,\n        sendExtraMessageFields,\n        experimental_onFunctionCall,\n        experimental_onToolCall,\n        messagesRef,\n        abortControllerRef,\n        generateId\n    ]);\n    const append = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (message, { options, functions, function_call, tools, tool_choice, data } = {})=>{\n        if (!message.id) {\n            message.id = generateId();\n        }\n        const chatRequest = {\n            messages: messagesRef.current.concat(message),\n            options,\n            data,\n            ...functions !== void 0 && {\n                functions\n            },\n            ...function_call !== void 0 && {\n                function_call\n            },\n            ...tools !== void 0 && {\n                tools\n            },\n            ...tool_choice !== void 0 && {\n                tool_choice\n            }\n        };\n        return triggerRequest(chatRequest);\n    }, [\n        triggerRequest,\n        generateId\n    ]);\n    const reload = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ({ options, functions, function_call, tools, tool_choice } = {})=>{\n        if (messagesRef.current.length === 0) return null;\n        const lastMessage = messagesRef.current[messagesRef.current.length - 1];\n        if (lastMessage.role === \"assistant\") {\n            const chatRequest2 = {\n                messages: messagesRef.current.slice(0, -1),\n                options,\n                ...functions !== void 0 && {\n                    functions\n                },\n                ...function_call !== void 0 && {\n                    function_call\n                },\n                ...tools !== void 0 && {\n                    tools\n                },\n                ...tool_choice !== void 0 && {\n                    tool_choice\n                }\n            };\n            return triggerRequest(chatRequest2);\n        }\n        const chatRequest = {\n            messages: messagesRef.current,\n            options,\n            ...functions !== void 0 && {\n                functions\n            },\n            ...function_call !== void 0 && {\n                function_call\n            },\n            ...tools !== void 0 && {\n                tools\n            },\n            ...tool_choice !== void 0 && {\n                tool_choice\n            }\n        };\n        return triggerRequest(chatRequest);\n    }, [\n        triggerRequest\n    ]);\n    const stop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (abortControllerRef.current) {\n            abortControllerRef.current.abort();\n            abortControllerRef.current = null;\n        }\n    }, []);\n    const setMessages = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((messages2)=>{\n        mutate(messages2, false);\n        messagesRef.current = messages2;\n    }, [\n        mutate\n    ]);\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialInput);\n    const handleSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e, options = {}, metadata)=>{\n        if (metadata) {\n            extraMetadataRef.current = {\n                ...extraMetadataRef.current,\n                ...metadata\n            };\n        }\n        e.preventDefault();\n        if (!input) return;\n        append({\n            content: input,\n            role: \"user\",\n            createdAt: /* @__PURE__ */ new Date()\n        }, options);\n        setInput(\"\");\n    }, [\n        input,\n        append\n    ]);\n    const handleInputChange = (e)=>{\n        setInput(e.target.value);\n    };\n    return {\n        messages: messages || [],\n        error,\n        append,\n        reload,\n        stop,\n        setMessages,\n        input,\n        setInput,\n        handleInputChange,\n        handleSubmit,\n        isLoading,\n        data: streamData\n    };\n}\n// react/use-completion.ts\n\n\n// shared/call-completion-api.ts\nasync function callCompletionApi({ api, prompt, credentials, headers, body, setCompletion, setLoading, setError, setAbortController, onResponse, onFinish, onError, onData }) {\n    try {\n        setLoading(true);\n        setError(void 0);\n        const abortController = new AbortController();\n        setAbortController(abortController);\n        setCompletion(\"\");\n        const res = await fetch(api, {\n            method: \"POST\",\n            body: JSON.stringify({\n                prompt,\n                ...body\n            }),\n            credentials,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...headers\n            },\n            signal: abortController.signal\n        }).catch((err)=>{\n            throw err;\n        });\n        if (onResponse) {\n            try {\n                await onResponse(res);\n            } catch (err) {\n                throw err;\n            }\n        }\n        if (!res.ok) {\n            throw new Error(await res.text() || \"Failed to fetch the chat response.\");\n        }\n        if (!res.body) {\n            throw new Error(\"The response body is empty.\");\n        }\n        let result = \"\";\n        const reader = res.body.getReader();\n        const isComplexMode = res.headers.get(COMPLEX_HEADER) === \"true\";\n        if (isComplexMode) {\n            for await (const { type, value } of readDataStream(reader, {\n                isAborted: ()=>abortController === null\n            })){\n                switch(type){\n                    case \"text\":\n                        {\n                            result += value;\n                            setCompletion(result);\n                            break;\n                        }\n                    case \"data\":\n                        {\n                            onData == null ? void 0 : onData(value);\n                            break;\n                        }\n                }\n            }\n        } else {\n            const decoder = createChunkDecoder();\n            while(true){\n                const { done, value } = await reader.read();\n                if (done) {\n                    break;\n                }\n                result += decoder(value);\n                setCompletion(result);\n                if (abortController === null) {\n                    reader.cancel();\n                    break;\n                }\n            }\n        }\n        if (onFinish) {\n            onFinish(prompt, result);\n        }\n        setAbortController(null);\n        return result;\n    } catch (err) {\n        if (err.name === \"AbortError\") {\n            setAbortController(null);\n            return null;\n        }\n        if (err instanceof Error) {\n            if (onError) {\n                onError(err);\n            }\n        }\n        setError(err);\n    } finally{\n        setLoading(false);\n    }\n}\n// react/use-completion.ts\nfunction useCompletion({ api = \"/api/completion\", id, initialCompletion = \"\", initialInput = \"\", credentials, headers, body, onResponse, onFinish, onError } = {}) {\n    const hookId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    const completionId = id || hookId;\n    const { data, mutate } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        api,\n        completionId\n    ], null, {\n        fallbackData: initialCompletion\n    });\n    const { data: isLoading = false, mutate: mutateLoading } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        completionId,\n        \"loading\"\n    ], null);\n    const { data: streamData, mutate: mutateStreamData } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        completionId,\n        \"streamData\"\n    ], null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);\n    const completion = data;\n    const [abortController, setAbortController] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const extraMetadataRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        credentials,\n        headers,\n        body\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        extraMetadataRef.current = {\n            credentials,\n            headers,\n            body\n        };\n    }, [\n        credentials,\n        headers,\n        body\n    ]);\n    const triggerRequest = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (prompt, options)=>callCompletionApi({\n            api,\n            prompt,\n            credentials: extraMetadataRef.current.credentials,\n            headers: {\n                ...extraMetadataRef.current.headers,\n                ...options == null ? void 0 : options.headers\n            },\n            body: {\n                ...extraMetadataRef.current.body,\n                ...options == null ? void 0 : options.body\n            },\n            setCompletion: (completion2)=>mutate(completion2, false),\n            setLoading: mutateLoading,\n            setError,\n            setAbortController,\n            onResponse,\n            onFinish,\n            onError,\n            onData: (data2)=>{\n                mutateStreamData([\n                    ...streamData || [],\n                    ...data2 || []\n                ], false);\n            }\n        }), [\n        mutate,\n        mutateLoading,\n        api,\n        extraMetadataRef,\n        setAbortController,\n        onResponse,\n        onFinish,\n        onError,\n        setError,\n        streamData,\n        mutateStreamData\n    ]);\n    const stop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (abortController) {\n            abortController.abort();\n            setAbortController(null);\n        }\n    }, [\n        abortController\n    ]);\n    const setCompletion = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((completion2)=>{\n        mutate(completion2, false);\n    }, [\n        mutate\n    ]);\n    const complete = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (prompt, options)=>{\n        return triggerRequest(prompt, options);\n    }, [\n        triggerRequest\n    ]);\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialInput);\n    const handleSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        e.preventDefault();\n        if (!input) return;\n        return complete(input);\n    }, [\n        input,\n        complete\n    ]);\n    const handleInputChange = (e)=>{\n        setInput(e.target.value);\n    };\n    return {\n        completion,\n        complete,\n        error,\n        setCompletion,\n        stop,\n        input,\n        setInput,\n        handleInputChange,\n        handleSubmit,\n        isLoading,\n        data: streamData\n    };\n}\n// react/use-assistant.ts\n\nfunction experimental_useAssistant({ api, threadId: threadIdParam, credentials, headers, body }) {\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [threadId, setThreadId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);\n    const [status, setStatus] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"awaiting_message\");\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);\n    const handleInputChange = (event)=>{\n        setInput(event.target.value);\n    };\n    const submitMessage = async (event, requestOptions)=>{\n        var _a, _b;\n        (_a = event == null ? void 0 : event.preventDefault) == null ? void 0 : _a.call(event);\n        if (input === \"\") {\n            return;\n        }\n        setStatus(\"in_progress\");\n        setMessages((messages2)=>[\n                ...messages2,\n                {\n                    id: \"\",\n                    role: \"user\",\n                    content: input\n                }\n            ]);\n        setInput(\"\");\n        const result = await fetch(api, {\n            method: \"POST\",\n            credentials,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...headers\n            },\n            body: JSON.stringify({\n                ...body,\n                // always use user-provided threadId when available:\n                threadId: (_b = threadIdParam != null ? threadIdParam : threadId) != null ? _b : null,\n                message: input,\n                // optional request data:\n                data: requestOptions == null ? void 0 : requestOptions.data\n            })\n        });\n        if (result.body == null) {\n            throw new Error(\"The response body is empty.\");\n        }\n        try {\n            for await (const { type, value } of readDataStream(result.body.getReader())){\n                switch(type){\n                    case \"assistant_message\":\n                        {\n                            setMessages((messages2)=>[\n                                    ...messages2,\n                                    {\n                                        id: value.id,\n                                        role: value.role,\n                                        content: value.content[0].text.value\n                                    }\n                                ]);\n                            break;\n                        }\n                    case \"data_message\":\n                        {\n                            setMessages((messages2)=>{\n                                var _a2;\n                                return [\n                                    ...messages2,\n                                    {\n                                        id: (_a2 = value.id) != null ? _a2 : \"\",\n                                        role: \"data\",\n                                        content: \"\",\n                                        data: value.data\n                                    }\n                                ];\n                            });\n                            break;\n                        }\n                    case \"assistant_control_data\":\n                        {\n                            setThreadId(value.threadId);\n                            setMessages((messages2)=>{\n                                const lastMessage = messages2[messages2.length - 1];\n                                lastMessage.id = value.messageId;\n                                return [\n                                    ...messages2.slice(0, messages2.length - 1),\n                                    lastMessage\n                                ];\n                            });\n                            break;\n                        }\n                    case \"error\":\n                        {\n                            setError(value);\n                            break;\n                        }\n                }\n            }\n        } catch (error2) {\n            setError(error2);\n        }\n        setStatus(\"awaiting_message\");\n    };\n    return {\n        messages,\n        threadId,\n        input,\n        setInput,\n        handleInputChange,\n        submitMessage,\n        status,\n        error\n    };\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWkvcmVhY3QvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O3FHQUVBLG9CQUFvQjtBQUNvRDtBQUMvQztBQUV6Qix5QkFBeUI7QUFDekIsSUFBSU0saUJBQWlCO0lBQ25CQyxNQUFNO0lBQ05DLE1BQU07SUFDTkMsT0FBTyxDQUFDQztRQUNOLElBQUksT0FBT0EsVUFBVSxVQUFVO1lBQzdCLE1BQU0sSUFBSUMsTUFBTTtRQUNsQjtRQUNBLE9BQU87WUFBRUMsTUFBTTtZQUFRRjtRQUFNO0lBQy9CO0FBQ0Y7QUFDQSxJQUFJRyx5QkFBeUI7SUFDM0JOLE1BQU07SUFDTkMsTUFBTTtJQUNOQyxPQUFPLENBQUNDO1FBQ04sSUFBSUEsU0FBUyxRQUFRLE9BQU9BLFVBQVUsWUFBWSxDQUFFLG9CQUFtQkEsS0FBSSxLQUFNLE9BQU9BLE1BQU1JLGFBQWEsS0FBSyxZQUFZSixNQUFNSSxhQUFhLElBQUksUUFBUSxDQUFFLFdBQVVKLE1BQU1JLGFBQWEsS0FBSyxDQUFFLGdCQUFlSixNQUFNSSxhQUFhLEtBQUssT0FBT0osTUFBTUksYUFBYSxDQUFDTixJQUFJLEtBQUssWUFBWSxPQUFPRSxNQUFNSSxhQUFhLENBQUNDLFNBQVMsS0FBSyxVQUFVO1lBQ3pVLE1BQU0sSUFBSUosTUFDUjtRQUVKO1FBQ0EsT0FBTztZQUNMQyxNQUFNO1lBQ05GO1FBQ0Y7SUFDRjtBQUNGO0FBQ0EsSUFBSU0saUJBQWlCO0lBQ25CVCxNQUFNO0lBQ05DLE1BQU07SUFDTkMsT0FBTyxDQUFDQztRQUNOLElBQUksQ0FBQ08sTUFBTUMsT0FBTyxDQUFDUixRQUFRO1lBQ3pCLE1BQU0sSUFBSUMsTUFBTTtRQUNsQjtRQUNBLE9BQU87WUFBRUMsTUFBTTtZQUFRRjtRQUFNO0lBQy9CO0FBQ0Y7QUFDQSxJQUFJUyxrQkFBa0I7SUFDcEJaLE1BQU07SUFDTkMsTUFBTTtJQUNOQyxPQUFPLENBQUNDO1FBQ04sSUFBSSxPQUFPQSxVQUFVLFVBQVU7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QnNMLFlBQVksQ0FBQ0M7Z0NBQ1gsSUFBSXVDO2dDQUNKLE9BQU87dUNBQ0Z2QztvQ0FDSDt3Q0FDRTVLLElBQUksQ0FBQ21OLE1BQU05TixNQUFNVyxFQUFFLEtBQUssT0FBT21OLE1BQU07d0NBQ3JDbE4sTUFBTTt3Q0FDTkMsU0FBUzt3Q0FDVHNFLE1BQU1uRixNQUFNbUYsSUFBSTtvQ0FDbEI7aUNBQ0Q7NEJBQ0g7NEJBQ0E7d0JBQ0Y7b0JBQ0EsS0FBSzt3QkFBMEI7NEJBQzdCb0ksWUFBWXZOLE1BQU1rQixRQUFROzRCQUMxQm9LLFlBQVksQ0FBQ0M7Z0NBQ1gsTUFBTUwsY0FBY0ssU0FBUyxDQUFDQSxVQUFVbkksTUFBTSxHQUFHLEVBQUU7Z0NBQ25EOEgsWUFBWXZLLEVBQUUsR0FBR1gsTUFBTW1CLFNBQVM7Z0NBQ2hDLE9BQU87dUNBQUlvSyxVQUFVbEosS0FBSyxDQUFDLEdBQUdrSixVQUFVbkksTUFBTSxHQUFHO29DQUFJOEg7aUNBQVk7NEJBQ25FOzRCQUNBO3dCQUNGO29CQUNBLEtBQUs7d0JBQVM7NEJBQ1pQLFNBQVMzSzs0QkFDVDt3QkFDRjtnQkFDRjtZQUNGO1FBQ0YsRUFBRSxPQUFPK04sUUFBUTtZQUNmcEQsU0FBU29EO1FBQ1g7UUFDQU4sVUFBVTtJQUNaO0lBQ0EsT0FBTztRQUNMaEk7UUFDQXZFO1FBQ0FzSztRQUNBQztRQUNBSTtRQUNBOEI7UUFDQUg7UUFDQTlDO0lBQ0Y7QUFDRjtBQUtFLENBQ0Ysa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGxhbWEtaW5kZXgtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9haS9yZWFjdC9kaXN0L2luZGV4Lm1qcz8yYmZhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50J1xuXG4vLyByZWFjdC91c2UtY2hhdC50c1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlSWQsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB1c2VTV1IgZnJvbSBcInN3clwiO1xuXG4vLyBzaGFyZWQvc3RyZWFtLXBhcnRzLnRzXG52YXIgdGV4dFN0cmVhbVBhcnQgPSB7XG4gIGNvZGU6IFwiMFwiLFxuICBuYW1lOiBcInRleHRcIixcbiAgcGFyc2U6ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCJ0ZXh0XCIgcGFydHMgZXhwZWN0IGEgc3RyaW5nIHZhbHVlLicpO1xuICAgIH1cbiAgICByZXR1cm4geyB0eXBlOiBcInRleHRcIiwgdmFsdWUgfTtcbiAgfVxufTtcbnZhciBmdW5jdGlvbkNhbGxTdHJlYW1QYXJ0ID0ge1xuICBjb2RlOiBcIjFcIixcbiAgbmFtZTogXCJmdW5jdGlvbl9jYWxsXCIsXG4gIHBhcnNlOiAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgIShcImZ1bmN0aW9uX2NhbGxcIiBpbiB2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlLmZ1bmN0aW9uX2NhbGwgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUuZnVuY3Rpb25fY2FsbCA9PSBudWxsIHx8ICEoXCJuYW1lXCIgaW4gdmFsdWUuZnVuY3Rpb25fY2FsbCkgfHwgIShcImFyZ3VtZW50c1wiIGluIHZhbHVlLmZ1bmN0aW9uX2NhbGwpIHx8IHR5cGVvZiB2YWx1ZS5mdW5jdGlvbl9jYWxsLm5hbWUgIT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbHVlLmZ1bmN0aW9uX2NhbGwuYXJndW1lbnRzICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdcImZ1bmN0aW9uX2NhbGxcIiBwYXJ0cyBleHBlY3QgYW4gb2JqZWN0IHdpdGggYSBcImZ1bmN0aW9uX2NhbGxcIiBwcm9wZXJ0eS4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJmdW5jdGlvbl9jYWxsXCIsXG4gICAgICB2YWx1ZVxuICAgIH07XG4gIH1cbn07XG52YXIgZGF0YVN0cmVhbVBhcnQgPSB7XG4gIGNvZGU6IFwiMlwiLFxuICBuYW1lOiBcImRhdGFcIixcbiAgcGFyc2U6ICh2YWx1ZSkgPT4ge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCJkYXRhXCIgcGFydHMgZXhwZWN0IGFuIGFycmF5IHZhbHVlLicpO1xuICAgIH1cbiAgICByZXR1cm4geyB0eXBlOiBcImRhdGFcIiwgdmFsdWUgfTtcbiAgfVxufTtcbnZhciBlcnJvclN0cmVhbVBhcnQgPSB7XG4gIGNvZGU6IFwiM1wiLFxuICBuYW1lOiBcImVycm9yXCIsXG4gIHBhcnNlOiAodmFsdWUpID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiZXJyb3JcIiBwYXJ0cyBleHBlY3QgYSBzdHJpbmcgdmFsdWUuJyk7XG4gICAgfVxuICAgIHJldHVybiB7IHR5cGU6IFwiZXJyb3JcIiwgdmFsdWUgfTtcbiAgfVxufTtcbnZhciBhc3Npc3RhbnRNZXNzYWdlU3RyZWFtUGFydCA9IHtcbiAgY29kZTogXCI0XCIsXG4gIG5hbWU6IFwiYXNzaXN0YW50X21lc3NhZ2VcIixcbiAgcGFyc2U6ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCAhKFwiaWRcIiBpbiB2YWx1ZSkgfHwgIShcInJvbGVcIiBpbiB2YWx1ZSkgfHwgIShcImNvbnRlbnRcIiBpbiB2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlLmlkICE9PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWx1ZS5yb2xlICE9PSBcInN0cmluZ1wiIHx8IHZhbHVlLnJvbGUgIT09IFwiYXNzaXN0YW50XCIgfHwgIUFycmF5LmlzQXJyYXkodmFsdWUuY29udGVudCkgfHwgIXZhbHVlLmNvbnRlbnQuZXZlcnkoXG4gICAgICAoaXRlbSkgPT4gaXRlbSAhPSBudWxsICYmIHR5cGVvZiBpdGVtID09PSBcIm9iamVjdFwiICYmIFwidHlwZVwiIGluIGl0ZW0gJiYgaXRlbS50eXBlID09PSBcInRleHRcIiAmJiBcInRleHRcIiBpbiBpdGVtICYmIGl0ZW0udGV4dCAhPSBudWxsICYmIHR5cGVvZiBpdGVtLnRleHQgPT09IFwib2JqZWN0XCIgJiYgXCJ2YWx1ZVwiIGluIGl0ZW0udGV4dCAmJiB0eXBlb2YgaXRlbS50ZXh0LnZhbHVlID09PSBcInN0cmluZ1wiXG4gICAgKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnXCJhc3Npc3RhbnRfbWVzc2FnZVwiIHBhcnRzIGV4cGVjdCBhbiBvYmplY3Qgd2l0aCBhbiBcImlkXCIsIFwicm9sZVwiLCBhbmQgXCJjb250ZW50XCIgcHJvcGVydHkuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiYXNzaXN0YW50X21lc3NhZ2VcIixcbiAgICAgIHZhbHVlXG4gICAgfTtcbiAgfVxufTtcbnZhciBhc3Npc3RhbnRDb250cm9sRGF0YVN0cmVhbVBhcnQgPSB7XG4gIGNvZGU6IFwiNVwiLFxuICBuYW1lOiBcImFzc2lzdGFudF9jb250cm9sX2RhdGFcIixcbiAgcGFyc2U6ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCAhKFwidGhyZWFkSWRcIiBpbiB2YWx1ZSkgfHwgIShcIm1lc3NhZ2VJZFwiIGluIHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUudGhyZWFkSWQgIT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbHVlLm1lc3NhZ2VJZCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnXCJhc3Npc3RhbnRfY29udHJvbF9kYXRhXCIgcGFydHMgZXhwZWN0IGFuIG9iamVjdCB3aXRoIGEgXCJ0aHJlYWRJZFwiIGFuZCBcIm1lc3NhZ2VJZFwiIHByb3BlcnR5LidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImFzc2lzdGFudF9jb250cm9sX2RhdGFcIixcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIHRocmVhZElkOiB2YWx1ZS50aHJlYWRJZCxcbiAgICAgICAgbWVzc2FnZUlkOiB2YWx1ZS5tZXNzYWdlSWRcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xudmFyIGRhdGFNZXNzYWdlU3RyZWFtUGFydCA9IHtcbiAgY29kZTogXCI2XCIsXG4gIG5hbWU6IFwiZGF0YV9tZXNzYWdlXCIsXG4gIHBhcnNlOiAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgIShcInJvbGVcIiBpbiB2YWx1ZSkgfHwgIShcImRhdGFcIiBpbiB2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlLnJvbGUgIT09IFwic3RyaW5nXCIgfHwgdmFsdWUucm9sZSAhPT0gXCJkYXRhXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1wiZGF0YV9tZXNzYWdlXCIgcGFydHMgZXhwZWN0IGFuIG9iamVjdCB3aXRoIGEgXCJyb2xlXCIgYW5kIFwiZGF0YVwiIHByb3BlcnR5LidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImRhdGFfbWVzc2FnZVwiLFxuICAgICAgdmFsdWVcbiAgICB9O1xuICB9XG59O1xudmFyIHRvb2xDYWxsU3RyZWFtUGFydCA9IHtcbiAgY29kZTogXCI3XCIsXG4gIG5hbWU6IFwidG9vbF9jYWxsc1wiLFxuICBwYXJzZTogKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8ICEoXCJ0b29sX2NhbGxzXCIgaW4gdmFsdWUpIHx8IHR5cGVvZiB2YWx1ZS50b29sX2NhbGxzICE9PSBcIm9iamVjdFwiIHx8IHZhbHVlLnRvb2xfY2FsbHMgPT0gbnVsbCB8fCAhQXJyYXkuaXNBcnJheSh2YWx1ZS50b29sX2NhbGxzKSB8fCB2YWx1ZS50b29sX2NhbGxzLnNvbWUoKHRjKSA9PiB7XG4gICAgICB0YyA9PSBudWxsIHx8IHR5cGVvZiB0YyAhPT0gXCJvYmplY3RcIiB8fCAhKFwiaWRcIiBpbiB0YykgfHwgdHlwZW9mIHRjLmlkICE9PSBcInN0cmluZ1wiIHx8ICEoXCJ0eXBlXCIgaW4gdGMpIHx8IHR5cGVvZiB0Yy50eXBlICE9PSBcInN0cmluZ1wiIHx8ICEoXCJmdW5jdGlvblwiIGluIHRjKSB8fCB0Yy5mdW5jdGlvbiA9PSBudWxsIHx8IHR5cGVvZiB0Yy5mdW5jdGlvbiAhPT0gXCJvYmplY3RcIiB8fCAhKFwiYXJndW1lbnRzXCIgaW4gdGMuZnVuY3Rpb24pIHx8IHR5cGVvZiB0Yy5mdW5jdGlvbi5uYW1lICE9PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB0Yy5mdW5jdGlvbi5hcmd1bWVudHMgIT09IFwic3RyaW5nXCI7XG4gICAgfSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1widG9vbF9jYWxsc1wiIHBhcnRzIGV4cGVjdCBhbiBvYmplY3Qgd2l0aCBhIFRvb2xDYWxsUGF5bG9hZC4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJ0b29sX2NhbGxzXCIsXG4gICAgICB2YWx1ZVxuICAgIH07XG4gIH1cbn07XG52YXIgc3RyZWFtUGFydHMgPSBbXG4gIHRleHRTdHJlYW1QYXJ0LFxuICBmdW5jdGlvbkNhbGxTdHJlYW1QYXJ0LFxuICBkYXRhU3RyZWFtUGFydCxcbiAgZXJyb3JTdHJlYW1QYXJ0LFxuICBhc3Npc3RhbnRNZXNzYWdlU3RyZWFtUGFydCxcbiAgYXNzaXN0YW50Q29udHJvbERhdGFTdHJlYW1QYXJ0LFxuICBkYXRhTWVzc2FnZVN0cmVhbVBhcnQsXG4gIHRvb2xDYWxsU3RyZWFtUGFydFxuXTtcbnZhciBzdHJlYW1QYXJ0c0J5Q29kZSA9IHtcbiAgW3RleHRTdHJlYW1QYXJ0LmNvZGVdOiB0ZXh0U3RyZWFtUGFydCxcbiAgW2Z1bmN0aW9uQ2FsbFN0cmVhbVBhcnQuY29kZV06IGZ1bmN0aW9uQ2FsbFN0cmVhbVBhcnQsXG4gIFtkYXRhU3RyZWFtUGFydC5jb2RlXTogZGF0YVN0cmVhbVBhcnQsXG4gIFtlcnJvclN0cmVhbVBhcnQuY29kZV06IGVycm9yU3RyZWFtUGFydCxcbiAgW2Fzc2lzdGFudE1lc3NhZ2VTdHJlYW1QYXJ0LmNvZGVdOiBhc3Npc3RhbnRNZXNzYWdlU3RyZWFtUGFydCxcbiAgW2Fzc2lzdGFudENvbnRyb2xEYXRhU3RyZWFtUGFydC5jb2RlXTogYXNzaXN0YW50Q29udHJvbERhdGFTdHJlYW1QYXJ0LFxuICBbZGF0YU1lc3NhZ2VTdHJlYW1QYXJ0LmNvZGVdOiBkYXRhTWVzc2FnZVN0cmVhbVBhcnQsXG4gIFt0b29sQ2FsbFN0cmVhbVBhcnQuY29kZV06IHRvb2xDYWxsU3RyZWFtUGFydFxufTtcbnZhciBTdHJlYW1TdHJpbmdQcmVmaXhlcyA9IHtcbiAgW3RleHRTdHJlYW1QYXJ0Lm5hbWVdOiB0ZXh0U3RyZWFtUGFydC5jb2RlLFxuICBbZnVuY3Rpb25DYWxsU3RyZWFtUGFydC5uYW1lXTogZnVuY3Rpb25DYWxsU3RyZWFtUGFydC5jb2RlLFxuICBbZGF0YVN0cmVhbVBhcnQubmFtZV06IGRhdGFTdHJlYW1QYXJ0LmNvZGUsXG4gIFtlcnJvclN0cmVhbVBhcnQubmFtZV06IGVycm9yU3RyZWFtUGFydC5jb2RlLFxuICBbYXNzaXN0YW50TWVzc2FnZVN0cmVhbVBhcnQubmFtZV06IGFzc2lzdGFudE1lc3NhZ2VTdHJlYW1QYXJ0LmNvZGUsXG4gIFthc3Npc3RhbnRDb250cm9sRGF0YVN0cmVhbVBhcnQubmFtZV06IGFzc2lzdGFudENvbnRyb2xEYXRhU3RyZWFtUGFydC5jb2RlLFxuICBbZGF0YU1lc3NhZ2VTdHJlYW1QYXJ0Lm5hbWVdOiBkYXRhTWVzc2FnZVN0cmVhbVBhcnQuY29kZSxcbiAgW3Rvb2xDYWxsU3RyZWFtUGFydC5uYW1lXTogdG9vbENhbGxTdHJlYW1QYXJ0LmNvZGVcbn07XG52YXIgdmFsaWRDb2RlcyA9IHN0cmVhbVBhcnRzLm1hcCgocGFydCkgPT4gcGFydC5jb2RlKTtcbnZhciBwYXJzZVN0cmVhbVBhcnQgPSAobGluZSkgPT4ge1xuICBjb25zdCBmaXJzdFNlcGFyYXRvckluZGV4ID0gbGluZS5pbmRleE9mKFwiOlwiKTtcbiAgaWYgKGZpcnN0U2VwYXJhdG9ySW5kZXggPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHBhcnNlIHN0cmVhbSBzdHJpbmcuIE5vIHNlcGFyYXRvciBmb3VuZC5cIik7XG4gIH1cbiAgY29uc3QgcHJlZml4ID0gbGluZS5zbGljZSgwLCBmaXJzdFNlcGFyYXRvckluZGV4KTtcbiAgaWYgKCF2YWxpZENvZGVzLmluY2x1ZGVzKHByZWZpeCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwYXJzZSBzdHJlYW0gc3RyaW5nLiBJbnZhbGlkIGNvZGUgJHtwcmVmaXh9LmApO1xuICB9XG4gIGNvbnN0IGNvZGUgPSBwcmVmaXg7XG4gIGNvbnN0IHRleHRWYWx1ZSA9IGxpbmUuc2xpY2UoZmlyc3RTZXBhcmF0b3JJbmRleCArIDEpO1xuICBjb25zdCBqc29uVmFsdWUgPSBKU09OLnBhcnNlKHRleHRWYWx1ZSk7XG4gIHJldHVybiBzdHJlYW1QYXJ0c0J5Q29kZVtjb2RlXS5wYXJzZShqc29uVmFsdWUpO1xufTtcblxuLy8gc2hhcmVkL3JlYWQtZGF0YS1zdHJlYW0udHNcbnZhciBORVdMSU5FID0gXCJcXG5cIi5jaGFyQ29kZUF0KDApO1xuZnVuY3Rpb24gY29uY2F0Q2h1bmtzKGNodW5rcywgdG90YWxMZW5ndGgpIHtcbiAgY29uc3QgY29uY2F0ZW5hdGVkQ2h1bmtzID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpO1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgZm9yIChjb25zdCBjaHVuayBvZiBjaHVua3MpIHtcbiAgICBjb25jYXRlbmF0ZWRDaHVua3Muc2V0KGNodW5rLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSBjaHVuay5sZW5ndGg7XG4gIH1cbiAgY2h1bmtzLmxlbmd0aCA9IDA7XG4gIHJldHVybiBjb25jYXRlbmF0ZWRDaHVua3M7XG59XG5hc3luYyBmdW5jdGlvbiogcmVhZERhdGFTdHJlYW0ocmVhZGVyLCB7XG4gIGlzQWJvcnRlZFxufSA9IHt9KSB7XG4gIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcbiAgY29uc3QgY2h1bmtzID0gW107XG4gIGxldCB0b3RhbExlbmd0aCA9IDA7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGNodW5rcy5wdXNoKHZhbHVlKTtcbiAgICAgIHRvdGFsTGVuZ3RoICs9IHZhbHVlLmxlbmd0aDtcbiAgICAgIGlmICh2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSAhPT0gTkVXTElORSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNodW5rcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjb25zdCBjb25jYXRlbmF0ZWRDaHVua3MgPSBjb25jYXRDaHVua3MoY2h1bmtzLCB0b3RhbExlbmd0aCk7XG4gICAgdG90YWxMZW5ndGggPSAwO1xuICAgIGNvbnN0IHN0cmVhbVBhcnRzMiA9IGRlY29kZXIuZGVjb2RlKGNvbmNhdGVuYXRlZENodW5rcywgeyBzdHJlYW06IHRydWUgfSkuc3BsaXQoXCJcXG5cIikuZmlsdGVyKChsaW5lKSA9PiBsaW5lICE9PSBcIlwiKS5tYXAocGFyc2VTdHJlYW1QYXJ0KTtcbiAgICBmb3IgKGNvbnN0IHN0cmVhbVBhcnQgb2Ygc3RyZWFtUGFydHMyKSB7XG4gICAgICB5aWVsZCBzdHJlYW1QYXJ0O1xuICAgIH1cbiAgICBpZiAoaXNBYm9ydGVkID09IG51bGwgPyB2b2lkIDAgOiBpc0Fib3J0ZWQoKSkge1xuICAgICAgcmVhZGVyLmNhbmNlbCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG5cbi8vIHNoYXJlZC91dGlscy50c1xuaW1wb3J0IHsgY3VzdG9tQWxwaGFiZXQgfSBmcm9tIFwibmFub2lkL25vbi1zZWN1cmVcIjtcbnZhciBuYW5vaWQgPSBjdXN0b21BbHBoYWJldChcbiAgXCIwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiLFxuICA3XG4pO1xuZnVuY3Rpb24gY3JlYXRlQ2h1bmtEZWNvZGVyKGNvbXBsZXgpIHtcbiAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuICBpZiAoIWNvbXBsZXgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oY2h1bmspIHtcbiAgICAgIGlmICghY2h1bmspXG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKGNodW5rLCB7IHN0cmVhbTogdHJ1ZSB9KTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihjaHVuaykge1xuICAgIGNvbnN0IGRlY29kZWQgPSBkZWNvZGVyLmRlY29kZShjaHVuaywgeyBzdHJlYW06IHRydWUgfSkuc3BsaXQoXCJcXG5cIikuZmlsdGVyKChsaW5lKSA9PiBsaW5lICE9PSBcIlwiKTtcbiAgICByZXR1cm4gZGVjb2RlZC5tYXAocGFyc2VTdHJlYW1QYXJ0KS5maWx0ZXIoQm9vbGVhbik7XG4gIH07XG59XG52YXIgQ09NUExFWF9IRUFERVIgPSBcIlgtRXhwZXJpbWVudGFsLVN0cmVhbS1EYXRhXCI7XG5cbi8vIHNoYXJlZC9wYXJzZS1jb21wbGV4LXJlc3BvbnNlLnRzXG5hc3luYyBmdW5jdGlvbiBwYXJzZUNvbXBsZXhSZXNwb25zZSh7XG4gIHJlYWRlcixcbiAgYWJvcnRDb250cm9sbGVyUmVmLFxuICB1cGRhdGUsXG4gIG9uRmluaXNoLFxuICBnZW5lcmF0ZUlkID0gbmFub2lkLFxuICBnZXRDdXJyZW50RGF0ZSA9ICgpID0+IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpXG59KSB7XG4gIGNvbnN0IGNyZWF0ZWRBdCA9IGdldEN1cnJlbnREYXRlKCk7XG4gIGNvbnN0IHByZWZpeE1hcCA9IHtcbiAgICBkYXRhOiBbXVxuICB9O1xuICBmb3IgYXdhaXQgKGNvbnN0IHsgdHlwZSwgdmFsdWUgfSBvZiByZWFkRGF0YVN0cmVhbShyZWFkZXIsIHtcbiAgICBpc0Fib3J0ZWQ6ICgpID0+IChhYm9ydENvbnRyb2xsZXJSZWYgPT0gbnVsbCA/IHZvaWQgMCA6IGFib3J0Q29udHJvbGxlclJlZi5jdXJyZW50KSA9PT0gbnVsbFxuICB9KSkge1xuICAgIGlmICh0eXBlID09PSBcInRleHRcIikge1xuICAgICAgaWYgKHByZWZpeE1hcFtcInRleHRcIl0pIHtcbiAgICAgICAgcHJlZml4TWFwW1widGV4dFwiXSA9IHtcbiAgICAgICAgICAuLi5wcmVmaXhNYXBbXCJ0ZXh0XCJdLFxuICAgICAgICAgIGNvbnRlbnQ6IChwcmVmaXhNYXBbXCJ0ZXh0XCJdLmNvbnRlbnQgfHwgXCJcIikgKyB2YWx1ZVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJlZml4TWFwW1widGV4dFwiXSA9IHtcbiAgICAgICAgICBpZDogZ2VuZXJhdGVJZCgpLFxuICAgICAgICAgIHJvbGU6IFwiYXNzaXN0YW50XCIsXG4gICAgICAgICAgY29udGVudDogdmFsdWUsXG4gICAgICAgICAgY3JlYXRlZEF0XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBmdW5jdGlvbkNhbGxNZXNzYWdlID0gbnVsbDtcbiAgICBpZiAodHlwZSA9PT0gXCJmdW5jdGlvbl9jYWxsXCIpIHtcbiAgICAgIHByZWZpeE1hcFtcImZ1bmN0aW9uX2NhbGxcIl0gPSB7XG4gICAgICAgIGlkOiBnZW5lcmF0ZUlkKCksXG4gICAgICAgIHJvbGU6IFwiYXNzaXN0YW50XCIsXG4gICAgICAgIGNvbnRlbnQ6IFwiXCIsXG4gICAgICAgIGZ1bmN0aW9uX2NhbGw6IHZhbHVlLmZ1bmN0aW9uX2NhbGwsXG4gICAgICAgIG5hbWU6IHZhbHVlLmZ1bmN0aW9uX2NhbGwubmFtZSxcbiAgICAgICAgY3JlYXRlZEF0XG4gICAgICB9O1xuICAgICAgZnVuY3Rpb25DYWxsTWVzc2FnZSA9IHByZWZpeE1hcFtcImZ1bmN0aW9uX2NhbGxcIl07XG4gICAgfVxuICAgIGxldCB0b29sQ2FsbE1lc3NhZ2UgPSBudWxsO1xuICAgIGlmICh0eXBlID09PSBcInRvb2xfY2FsbHNcIikge1xuICAgICAgcHJlZml4TWFwW1widG9vbF9jYWxsc1wiXSA9IHtcbiAgICAgICAgaWQ6IGdlbmVyYXRlSWQoKSxcbiAgICAgICAgcm9sZTogXCJhc3Npc3RhbnRcIixcbiAgICAgICAgY29udGVudDogXCJcIixcbiAgICAgICAgdG9vbF9jYWxsczogdmFsdWUudG9vbF9jYWxscyxcbiAgICAgICAgY3JlYXRlZEF0XG4gICAgICB9O1xuICAgICAgdG9vbENhbGxNZXNzYWdlID0gcHJlZml4TWFwW1widG9vbF9jYWxsc1wiXTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IFwiZGF0YVwiKSB7XG4gICAgICBwcmVmaXhNYXBbXCJkYXRhXCJdLnB1c2goLi4udmFsdWUpO1xuICAgIH1cbiAgICBjb25zdCByZXNwb25zZU1lc3NhZ2UgPSBwcmVmaXhNYXBbXCJ0ZXh0XCJdO1xuICAgIGNvbnN0IG1lcmdlZCA9IFtcbiAgICAgIGZ1bmN0aW9uQ2FsbE1lc3NhZ2UsXG4gICAgICB0b29sQ2FsbE1lc3NhZ2UsXG4gICAgICByZXNwb25zZU1lc3NhZ2VcbiAgICBdLmZpbHRlcihCb29sZWFuKTtcbiAgICB1cGRhdGUobWVyZ2VkLCBbLi4ucHJlZml4TWFwW1wiZGF0YVwiXV0pO1xuICB9XG4gIG9uRmluaXNoID09IG51bGwgPyB2b2lkIDAgOiBvbkZpbmlzaChwcmVmaXhNYXApO1xuICByZXR1cm4ge1xuICAgIG1lc3NhZ2VzOiBbXG4gICAgICBwcmVmaXhNYXAudGV4dCxcbiAgICAgIHByZWZpeE1hcC5mdW5jdGlvbl9jYWxsLFxuICAgICAgcHJlZml4TWFwLnRvb2xfY2FsbHNcbiAgICBdLmZpbHRlcihCb29sZWFuKSxcbiAgICBkYXRhOiBwcmVmaXhNYXAuZGF0YVxuICB9O1xufVxuXG4vLyBzaGFyZWQvY2FsbC1jaGF0LWFwaS50c1xuYXN5bmMgZnVuY3Rpb24gY2FsbENoYXRBcGkoe1xuICBhcGksXG4gIG1lc3NhZ2VzLFxuICBib2R5LFxuICBjcmVkZW50aWFscyxcbiAgaGVhZGVycyxcbiAgYWJvcnRDb250cm9sbGVyLFxuICBhcHBlbmRNZXNzYWdlLFxuICByZXN0b3JlTWVzc2FnZXNPbkZhaWx1cmUsXG4gIG9uUmVzcG9uc2UsXG4gIG9uVXBkYXRlLFxuICBvbkZpbmlzaCxcbiAgZ2VuZXJhdGVJZFxufSkge1xuICB2YXIgX2E7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYXBpLCB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBtZXNzYWdlcyxcbiAgICAgIC4uLmJvZHlcbiAgICB9KSxcbiAgICBoZWFkZXJzOiB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIC4uLmhlYWRlcnNcbiAgICB9LFxuICAgIHNpZ25hbDogKF9hID0gYWJvcnRDb250cm9sbGVyID09IG51bGwgPyB2b2lkIDAgOiBhYm9ydENvbnRyb2xsZXIoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnNpZ25hbCxcbiAgICBjcmVkZW50aWFsc1xuICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgcmVzdG9yZU1lc3NhZ2VzT25GYWlsdXJlKCk7XG4gICAgdGhyb3cgZXJyO1xuICB9KTtcbiAgaWYgKG9uUmVzcG9uc2UpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgb25SZXNwb25zZShyZXNwb25zZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICByZXN0b3JlTWVzc2FnZXNPbkZhaWx1cmUoKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBhd2FpdCByZXNwb25zZS50ZXh0KCkgfHwgXCJGYWlsZWQgdG8gZmV0Y2ggdGhlIGNoYXQgcmVzcG9uc2UuXCJcbiAgICApO1xuICB9XG4gIGlmICghcmVzcG9uc2UuYm9keSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSByZXNwb25zZSBib2R5IGlzIGVtcHR5LlwiKTtcbiAgfVxuICBjb25zdCByZWFkZXIgPSByZXNwb25zZS5ib2R5LmdldFJlYWRlcigpO1xuICBjb25zdCBpc0NvbXBsZXhNb2RlID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoQ09NUExFWF9IRUFERVIpID09PSBcInRydWVcIjtcbiAgaWYgKGlzQ29tcGxleE1vZGUpIHtcbiAgICByZXR1cm4gYXdhaXQgcGFyc2VDb21wbGV4UmVzcG9uc2Uoe1xuICAgICAgcmVhZGVyLFxuICAgICAgYWJvcnRDb250cm9sbGVyUmVmOiBhYm9ydENvbnRyb2xsZXIgIT0gbnVsbCA/IHsgY3VycmVudDogYWJvcnRDb250cm9sbGVyKCkgfSA6IHZvaWQgMCxcbiAgICAgIHVwZGF0ZTogb25VcGRhdGUsXG4gICAgICBvbkZpbmlzaChwcmVmaXhNYXApIHtcbiAgICAgICAgaWYgKG9uRmluaXNoICYmIHByZWZpeE1hcC50ZXh0ICE9IG51bGwpIHtcbiAgICAgICAgICBvbkZpbmlzaChwcmVmaXhNYXAudGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBnZW5lcmF0ZUlkXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgY3JlYXRlZEF0ID0gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCk7XG4gICAgY29uc3QgZGVjb2RlID0gY3JlYXRlQ2h1bmtEZWNvZGVyKGZhbHNlKTtcbiAgICBsZXQgc3RyZWFtZWRSZXNwb25zZSA9IFwiXCI7XG4gICAgY29uc3QgcmVwbHlJZCA9IGdlbmVyYXRlSWQoKTtcbiAgICBsZXQgcmVzcG9uc2VNZXNzYWdlID0ge1xuICAgICAgaWQ6IHJlcGx5SWQsXG4gICAgICBjcmVhdGVkQXQsXG4gICAgICBjb250ZW50OiBcIlwiLFxuICAgICAgcm9sZTogXCJhc3Npc3RhbnRcIlxuICAgIH07XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGNvbnN0IHsgZG9uZSwgdmFsdWUgfSA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgICBpZiAoZG9uZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHN0cmVhbWVkUmVzcG9uc2UgKz0gZGVjb2RlKHZhbHVlKTtcbiAgICAgIGlmIChzdHJlYW1lZFJlc3BvbnNlLnN0YXJ0c1dpdGgoJ3tcImZ1bmN0aW9uX2NhbGxcIjonKSkge1xuICAgICAgICByZXNwb25zZU1lc3NhZ2VbXCJmdW5jdGlvbl9jYWxsXCJdID0gc3RyZWFtZWRSZXNwb25zZTtcbiAgICAgIH0gZWxzZSBpZiAoc3RyZWFtZWRSZXNwb25zZS5zdGFydHNXaXRoKCd7XCJ0b29sX2NhbGxzXCI6JykpIHtcbiAgICAgICAgcmVzcG9uc2VNZXNzYWdlW1widG9vbF9jYWxsc1wiXSA9IHN0cmVhbWVkUmVzcG9uc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNwb25zZU1lc3NhZ2VbXCJjb250ZW50XCJdID0gc3RyZWFtZWRSZXNwb25zZTtcbiAgICAgIH1cbiAgICAgIGFwcGVuZE1lc3NhZ2UoeyAuLi5yZXNwb25zZU1lc3NhZ2UgfSk7XG4gICAgICBpZiAoKGFib3J0Q29udHJvbGxlciA9PSBudWxsID8gdm9pZCAwIDogYWJvcnRDb250cm9sbGVyKCkpID09PSBudWxsKSB7XG4gICAgICAgIHJlYWRlci5jYW5jZWwoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzdHJlYW1lZFJlc3BvbnNlLnN0YXJ0c1dpdGgoJ3tcImZ1bmN0aW9uX2NhbGxcIjonKSkge1xuICAgICAgY29uc3QgcGFyc2VkRnVuY3Rpb25DYWxsID0gSlNPTi5wYXJzZShzdHJlYW1lZFJlc3BvbnNlKS5mdW5jdGlvbl9jYWxsO1xuICAgICAgcmVzcG9uc2VNZXNzYWdlW1wiZnVuY3Rpb25fY2FsbFwiXSA9IHBhcnNlZEZ1bmN0aW9uQ2FsbDtcbiAgICAgIGFwcGVuZE1lc3NhZ2UoeyAuLi5yZXNwb25zZU1lc3NhZ2UgfSk7XG4gICAgfVxuICAgIGlmIChzdHJlYW1lZFJlc3BvbnNlLnN0YXJ0c1dpdGgoJ3tcInRvb2xfY2FsbHNcIjonKSkge1xuICAgICAgY29uc3QgcGFyc2VkVG9vbENhbGxzID0gSlNPTi5wYXJzZShzdHJlYW1lZFJlc3BvbnNlKS50b29sX2NhbGxzO1xuICAgICAgcmVzcG9uc2VNZXNzYWdlW1widG9vbF9jYWxsc1wiXSA9IHBhcnNlZFRvb2xDYWxscztcbiAgICAgIGFwcGVuZE1lc3NhZ2UoeyAuLi5yZXNwb25zZU1lc3NhZ2UgfSk7XG4gICAgfVxuICAgIGlmIChvbkZpbmlzaCkge1xuICAgICAgb25GaW5pc2gocmVzcG9uc2VNZXNzYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlTWVzc2FnZTtcbiAgfVxufVxuXG4vLyBzaGFyZWQvcHJvY2Vzcy1jaGF0LXN0cmVhbS50c1xuYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0NoYXRTdHJlYW0oe1xuICBnZXRTdHJlYW1lZFJlc3BvbnNlOiBnZXRTdHJlYW1lZFJlc3BvbnNlMixcbiAgZXhwZXJpbWVudGFsX29uRnVuY3Rpb25DYWxsLFxuICBleHBlcmltZW50YWxfb25Ub29sQ2FsbCxcbiAgdXBkYXRlQ2hhdFJlcXVlc3QsXG4gIGdldEN1cnJlbnRNZXNzYWdlc1xufSkge1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbnN0IG1lc3NhZ2VzQW5kRGF0YU9ySnVzdE1lc3NhZ2UgPSBhd2FpdCBnZXRTdHJlYW1lZFJlc3BvbnNlMigpO1xuICAgIGlmIChcIm1lc3NhZ2VzXCIgaW4gbWVzc2FnZXNBbmREYXRhT3JKdXN0TWVzc2FnZSkge1xuICAgICAgbGV0IGhhc0ZvbGxvd2luZ1Jlc3BvbnNlID0gZmFsc2U7XG4gICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgbWVzc2FnZXNBbmREYXRhT3JKdXN0TWVzc2FnZS5tZXNzYWdlcykge1xuICAgICAgICBpZiAoKG1lc3NhZ2UuZnVuY3Rpb25fY2FsbCA9PT0gdm9pZCAwIHx8IHR5cGVvZiBtZXNzYWdlLmZ1bmN0aW9uX2NhbGwgPT09IFwic3RyaW5nXCIpICYmIChtZXNzYWdlLnRvb2xfY2FsbHMgPT09IHZvaWQgMCB8fCB0eXBlb2YgbWVzc2FnZS50b29sX2NhbGxzID09PSBcInN0cmluZ1wiKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGhhc0ZvbGxvd2luZ1Jlc3BvbnNlID0gdHJ1ZTtcbiAgICAgICAgaWYgKGV4cGVyaW1lbnRhbF9vbkZ1bmN0aW9uQ2FsbCkge1xuICAgICAgICAgIGNvbnN0IGZ1bmN0aW9uQ2FsbCA9IG1lc3NhZ2UuZnVuY3Rpb25fY2FsbDtcbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9uQ2FsbCAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICBcImV4cGVyaW1lbnRhbF9vbkZ1bmN0aW9uQ2FsbCBzaG91bGQgbm90IGJlIGRlZmluZWQgd2hlbiB1c2luZyB0b29sc1wiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGZ1bmN0aW9uQ2FsbFJlc3BvbnNlID0gYXdhaXQgZXhwZXJpbWVudGFsX29uRnVuY3Rpb25DYWxsKFxuICAgICAgICAgICAgZ2V0Q3VycmVudE1lc3NhZ2VzKCksXG4gICAgICAgICAgICBmdW5jdGlvbkNhbGxcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChmdW5jdGlvbkNhbGxSZXNwb25zZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBoYXNGb2xsb3dpbmdSZXNwb25zZSA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHVwZGF0ZUNoYXRSZXF1ZXN0KGZ1bmN0aW9uQ2FsbFJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhwZXJpbWVudGFsX29uVG9vbENhbGwpIHtcbiAgICAgICAgICBjb25zdCB0b29sQ2FsbHMgPSBtZXNzYWdlLnRvb2xfY2FsbHM7XG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRvb2xDYWxscykgfHwgdG9vbENhbGxzLnNvbWUoKHRvb2xDYWxsKSA9PiB0eXBlb2YgdG9vbENhbGwgIT09IFwib2JqZWN0XCIpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgIFwiZXhwZXJpbWVudGFsX29uVG9vbENhbGwgc2hvdWxkIG5vdCBiZSBkZWZpbmVkIHdoZW4gdXNpbmcgdG9vbHNcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB0b29sQ2FsbFJlc3BvbnNlID0gYXdhaXQgZXhwZXJpbWVudGFsX29uVG9vbENhbGwoZ2V0Q3VycmVudE1lc3NhZ2VzKCksIHRvb2xDYWxscyk7XG4gICAgICAgICAgaWYgKHRvb2xDYWxsUmVzcG9uc2UgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgaGFzRm9sbG93aW5nUmVzcG9uc2UgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVDaGF0UmVxdWVzdCh0b29sQ2FsbFJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFoYXNGb2xsb3dpbmdSZXNwb25zZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGZpeEZ1bmN0aW9uQ2FsbEFyZ3VtZW50czIgPSBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgcmVzcG9uc2UubWVzc2FnZXMpIHtcbiAgICAgICAgICBpZiAobWVzc2FnZS50b29sX2NhbGxzICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdG9vbENhbGwgb2YgbWVzc2FnZS50b29sX2NhbGxzKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdG9vbENhbGwgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9vbENhbGwuZnVuY3Rpb24uYXJndW1lbnRzICYmIHR5cGVvZiB0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHMgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgIHRvb2xDYWxsLmZ1bmN0aW9uLmFyZ3VtZW50cyA9IEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgICAgICB0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHNcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtZXNzYWdlLmZ1bmN0aW9uX2NhbGwgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLmZ1bmN0aW9uX2NhbGwgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZnVuY3Rpb25fY2FsbC5hcmd1bWVudHMgJiYgdHlwZW9mIG1lc3NhZ2UuZnVuY3Rpb25fY2FsbC5hcmd1bWVudHMgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmZ1bmN0aW9uX2NhbGwuYXJndW1lbnRzID0gSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICAgICAgICBtZXNzYWdlLmZ1bmN0aW9uX2NhbGwuYXJndW1lbnRzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBmaXhGdW5jdGlvbkNhbGxBcmd1bWVudHMgPSBmaXhGdW5jdGlvbkNhbGxBcmd1bWVudHMyO1xuICAgICAgY29uc3Qgc3RyZWFtZWRSZXNwb25zZU1lc3NhZ2UgPSBtZXNzYWdlc0FuZERhdGFPckp1c3RNZXNzYWdlO1xuICAgICAgaWYgKChzdHJlYW1lZFJlc3BvbnNlTWVzc2FnZS5mdW5jdGlvbl9jYWxsID09PSB2b2lkIDAgfHwgdHlwZW9mIHN0cmVhbWVkUmVzcG9uc2VNZXNzYWdlLmZ1bmN0aW9uX2NhbGwgPT09IFwic3RyaW5nXCIpICYmIChzdHJlYW1lZFJlc3BvbnNlTWVzc2FnZS50b29sX2NhbGxzID09PSB2b2lkIDAgfHwgdHlwZW9mIHN0cmVhbWVkUmVzcG9uc2VNZXNzYWdlLnRvb2xfY2FsbHMgPT09IFwic3RyaW5nXCIpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGV4cGVyaW1lbnRhbF9vbkZ1bmN0aW9uQ2FsbCkge1xuICAgICAgICBjb25zdCBmdW5jdGlvbkNhbGwgPSBzdHJlYW1lZFJlc3BvbnNlTWVzc2FnZS5mdW5jdGlvbl9jYWxsO1xuICAgICAgICBpZiAoISh0eXBlb2YgZnVuY3Rpb25DYWxsID09PSBcIm9iamVjdFwiKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiZXhwZXJpbWVudGFsX29uRnVuY3Rpb25DYWxsIHNob3VsZCBub3QgYmUgZGVmaW5lZCB3aGVuIHVzaW5nIHRvb2xzXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZ1bmN0aW9uQ2FsbFJlc3BvbnNlID0gYXdhaXQgZXhwZXJpbWVudGFsX29uRnVuY3Rpb25DYWxsKGdldEN1cnJlbnRNZXNzYWdlcygpLCBmdW5jdGlvbkNhbGwpO1xuICAgICAgICBpZiAoZnVuY3Rpb25DYWxsUmVzcG9uc2UgPT09IHZvaWQgMClcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZml4RnVuY3Rpb25DYWxsQXJndW1lbnRzMihmdW5jdGlvbkNhbGxSZXNwb25zZSk7XG4gICAgICAgIHVwZGF0ZUNoYXRSZXF1ZXN0KGZ1bmN0aW9uQ2FsbFJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICAgIGlmIChleHBlcmltZW50YWxfb25Ub29sQ2FsbCkge1xuICAgICAgICBjb25zdCB0b29sQ2FsbHMgPSBzdHJlYW1lZFJlc3BvbnNlTWVzc2FnZS50b29sX2NhbGxzO1xuICAgICAgICBpZiAoISh0eXBlb2YgdG9vbENhbGxzID09PSBcIm9iamVjdFwiKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiZXhwZXJpbWVudGFsX29uVG9vbENhbGwgc2hvdWxkIG5vdCBiZSBkZWZpbmVkIHdoZW4gdXNpbmcgZnVuY3Rpb25zXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRvb2xDYWxsUmVzcG9uc2UgPSBhd2FpdCBleHBlcmltZW50YWxfb25Ub29sQ2FsbChnZXRDdXJyZW50TWVzc2FnZXMoKSwgdG9vbENhbGxzKTtcbiAgICAgICAgaWYgKHRvb2xDYWxsUmVzcG9uc2UgPT09IHZvaWQgMClcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZml4RnVuY3Rpb25DYWxsQXJndW1lbnRzMih0b29sQ2FsbFJlc3BvbnNlKTtcbiAgICAgICAgdXBkYXRlQ2hhdFJlcXVlc3QodG9vbENhbGxSZXNwb25zZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIHJlYWN0L3VzZS1jaGF0LnRzXG52YXIgZ2V0U3RyZWFtZWRSZXNwb25zZSA9IGFzeW5jIChhcGksIGNoYXRSZXF1ZXN0LCBtdXRhdGUsIG11dGF0ZVN0cmVhbURhdGEsIGV4aXN0aW5nRGF0YSwgZXh0cmFNZXRhZGF0YVJlZiwgbWVzc2FnZXNSZWYsIGFib3J0Q29udHJvbGxlclJlZiwgZ2VuZXJhdGVJZCwgb25GaW5pc2gsIG9uUmVzcG9uc2UsIHNlbmRFeHRyYU1lc3NhZ2VGaWVsZHMpID0+IHtcbiAgdmFyIF9hLCBfYjtcbiAgY29uc3QgcHJldmlvdXNNZXNzYWdlcyA9IG1lc3NhZ2VzUmVmLmN1cnJlbnQ7XG4gIG11dGF0ZShjaGF0UmVxdWVzdC5tZXNzYWdlcywgZmFsc2UpO1xuICBjb25zdCBjb25zdHJ1Y3RlZE1lc3NhZ2VzUGF5bG9hZCA9IHNlbmRFeHRyYU1lc3NhZ2VGaWVsZHMgPyBjaGF0UmVxdWVzdC5tZXNzYWdlcyA6IGNoYXRSZXF1ZXN0Lm1lc3NhZ2VzLm1hcChcbiAgICAoeyByb2xlLCBjb250ZW50LCBuYW1lLCBmdW5jdGlvbl9jYWxsLCB0b29sX2NhbGxzLCB0b29sX2NhbGxfaWQgfSkgPT4gKHtcbiAgICAgIHJvbGUsXG4gICAgICBjb250ZW50LFxuICAgICAgdG9vbF9jYWxsX2lkLFxuICAgICAgLi4ubmFtZSAhPT0gdm9pZCAwICYmIHsgbmFtZSB9LFxuICAgICAgLi4uZnVuY3Rpb25fY2FsbCAhPT0gdm9pZCAwICYmIHtcbiAgICAgICAgZnVuY3Rpb25fY2FsbFxuICAgICAgfSxcbiAgICAgIC4uLnRvb2xfY2FsbHMgIT09IHZvaWQgMCAmJiB7XG4gICAgICAgIHRvb2xfY2FsbHNcbiAgICAgIH1cbiAgICB9KVxuICApO1xuICBpZiAodHlwZW9mIGFwaSAhPT0gXCJzdHJpbmdcIikge1xuICAgIGNvbnN0IHJlcGx5SWQgPSBnZW5lcmF0ZUlkKCk7XG4gICAgY29uc3QgY3JlYXRlZEF0ID0gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCk7XG4gICAgbGV0IHJlc3BvbnNlTWVzc2FnZSA9IHtcbiAgICAgIGlkOiByZXBseUlkLFxuICAgICAgY3JlYXRlZEF0LFxuICAgICAgY29udGVudDogXCJcIixcbiAgICAgIHJvbGU6IFwiYXNzaXN0YW50XCJcbiAgICB9O1xuICAgIGFzeW5jIGZ1bmN0aW9uIHJlYWRSb3cocHJvbWlzZSkge1xuICAgICAgY29uc3QgeyBjb250ZW50LCB1aSwgbmV4dCB9ID0gYXdhaXQgcHJvbWlzZTtcbiAgICAgIHJlc3BvbnNlTWVzc2FnZVtcImNvbnRlbnRcIl0gPSBjb250ZW50O1xuICAgICAgcmVzcG9uc2VNZXNzYWdlW1widWlcIl0gPSBhd2FpdCB1aTtcbiAgICAgIG11dGF0ZShbLi4uY2hhdFJlcXVlc3QubWVzc2FnZXMsIHsgLi4ucmVzcG9uc2VNZXNzYWdlIH1dLCBmYWxzZSk7XG4gICAgICBpZiAobmV4dCkge1xuICAgICAgICBhd2FpdCByZWFkUm93KG5leHQpO1xuICAgICAgfVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgcHJvbWlzZSA9IGFwaSh7XG4gICAgICAgIG1lc3NhZ2VzOiBjb25zdHJ1Y3RlZE1lc3NhZ2VzUGF5bG9hZCxcbiAgICAgICAgZGF0YTogY2hhdFJlcXVlc3QuZGF0YVxuICAgICAgfSk7XG4gICAgICBhd2FpdCByZWFkUm93KHByb21pc2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIG11dGF0ZShwcmV2aW91c01lc3NhZ2VzLCBmYWxzZSk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgICBpZiAob25GaW5pc2gpIHtcbiAgICAgIG9uRmluaXNoKHJlc3BvbnNlTWVzc2FnZSk7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZU1lc3NhZ2U7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IGNhbGxDaGF0QXBpKHtcbiAgICBhcGksXG4gICAgbWVzc2FnZXM6IGNvbnN0cnVjdGVkTWVzc2FnZXNQYXlsb2FkLFxuICAgIGJvZHk6IHtcbiAgICAgIGRhdGE6IGNoYXRSZXF1ZXN0LmRhdGEsXG4gICAgICAuLi5leHRyYU1ldGFkYXRhUmVmLmN1cnJlbnQuYm9keSxcbiAgICAgIC4uLihfYSA9IGNoYXRSZXF1ZXN0Lm9wdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5ib2R5LFxuICAgICAgLi4uY2hhdFJlcXVlc3QuZnVuY3Rpb25zICE9PSB2b2lkIDAgJiYge1xuICAgICAgICBmdW5jdGlvbnM6IGNoYXRSZXF1ZXN0LmZ1bmN0aW9uc1xuICAgICAgfSxcbiAgICAgIC4uLmNoYXRSZXF1ZXN0LmZ1bmN0aW9uX2NhbGwgIT09IHZvaWQgMCAmJiB7XG4gICAgICAgIGZ1bmN0aW9uX2NhbGw6IGNoYXRSZXF1ZXN0LmZ1bmN0aW9uX2NhbGxcbiAgICAgIH0sXG4gICAgICAuLi5jaGF0UmVxdWVzdC50b29scyAhPT0gdm9pZCAwICYmIHtcbiAgICAgICAgdG9vbHM6IGNoYXRSZXF1ZXN0LnRvb2xzXG4gICAgICB9LFxuICAgICAgLi4uY2hhdFJlcXVlc3QudG9vbF9jaG9pY2UgIT09IHZvaWQgMCAmJiB7XG4gICAgICAgIHRvb2xfY2hvaWNlOiBjaGF0UmVxdWVzdC50b29sX2Nob2ljZVxuICAgICAgfVxuICAgIH0sXG4gICAgY3JlZGVudGlhbHM6IGV4dHJhTWV0YWRhdGFSZWYuY3VycmVudC5jcmVkZW50aWFscyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAuLi5leHRyYU1ldGFkYXRhUmVmLmN1cnJlbnQuaGVhZGVycyxcbiAgICAgIC4uLihfYiA9IGNoYXRSZXF1ZXN0Lm9wdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiBfYi5oZWFkZXJzXG4gICAgfSxcbiAgICBhYm9ydENvbnRyb2xsZXI6ICgpID0+IGFib3J0Q29udHJvbGxlclJlZi5jdXJyZW50LFxuICAgIGFwcGVuZE1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgbXV0YXRlKFsuLi5jaGF0UmVxdWVzdC5tZXNzYWdlcywgbWVzc2FnZV0sIGZhbHNlKTtcbiAgICB9LFxuICAgIHJlc3RvcmVNZXNzYWdlc09uRmFpbHVyZSgpIHtcbiAgICAgIG11dGF0ZShwcmV2aW91c01lc3NhZ2VzLCBmYWxzZSk7XG4gICAgfSxcbiAgICBvblJlc3BvbnNlLFxuICAgIG9uVXBkYXRlKG1lcmdlZCwgZGF0YSkge1xuICAgICAgbXV0YXRlKFsuLi5jaGF0UmVxdWVzdC5tZXNzYWdlcywgLi4ubWVyZ2VkXSwgZmFsc2UpO1xuICAgICAgbXV0YXRlU3RyZWFtRGF0YShbLi4uZXhpc3RpbmdEYXRhIHx8IFtdLCAuLi5kYXRhIHx8IFtdXSwgZmFsc2UpO1xuICAgIH0sXG4gICAgb25GaW5pc2gsXG4gICAgZ2VuZXJhdGVJZFxuICB9KTtcbn07XG5mdW5jdGlvbiB1c2VDaGF0KHtcbiAgYXBpID0gXCIvYXBpL2NoYXRcIixcbiAgaWQsXG4gIGluaXRpYWxNZXNzYWdlcyxcbiAgaW5pdGlhbElucHV0ID0gXCJcIixcbiAgc2VuZEV4dHJhTWVzc2FnZUZpZWxkcyxcbiAgZXhwZXJpbWVudGFsX29uRnVuY3Rpb25DYWxsLFxuICBleHBlcmltZW50YWxfb25Ub29sQ2FsbCxcbiAgb25SZXNwb25zZSxcbiAgb25GaW5pc2gsXG4gIG9uRXJyb3IsXG4gIGNyZWRlbnRpYWxzLFxuICBoZWFkZXJzLFxuICBib2R5LFxuICBnZW5lcmF0ZUlkID0gbmFub2lkXG59ID0ge30pIHtcbiAgY29uc3QgaG9va0lkID0gdXNlSWQoKTtcbiAgY29uc3QgaWRLZXkgPSBpZCAhPSBudWxsID8gaWQgOiBob29rSWQ7XG4gIGNvbnN0IGNoYXRLZXkgPSB0eXBlb2YgYXBpID09PSBcInN0cmluZ1wiID8gW2FwaSwgaWRLZXldIDogaWRLZXk7XG4gIGNvbnN0IFtpbml0aWFsTWVzc2FnZXNGYWxsYmFja10gPSB1c2VTdGF0ZShbXSk7XG4gIGNvbnN0IHsgZGF0YTogbWVzc2FnZXMsIG11dGF0ZSB9ID0gdXNlU1dSKFxuICAgIFtjaGF0S2V5LCBcIm1lc3NhZ2VzXCJdLFxuICAgIG51bGwsXG4gICAgeyBmYWxsYmFja0RhdGE6IGluaXRpYWxNZXNzYWdlcyAhPSBudWxsID8gaW5pdGlhbE1lc3NhZ2VzIDogaW5pdGlhbE1lc3NhZ2VzRmFsbGJhY2sgfVxuICApO1xuICBjb25zdCB7IGRhdGE6IGlzTG9hZGluZyA9IGZhbHNlLCBtdXRhdGU6IG11dGF0ZUxvYWRpbmcgfSA9IHVzZVNXUihcbiAgICBbY2hhdEtleSwgXCJsb2FkaW5nXCJdLFxuICAgIG51bGxcbiAgKTtcbiAgY29uc3QgeyBkYXRhOiBzdHJlYW1EYXRhLCBtdXRhdGU6IG11dGF0ZVN0cmVhbURhdGEgfSA9IHVzZVNXUihbY2hhdEtleSwgXCJzdHJlYW1EYXRhXCJdLCBudWxsKTtcbiAgY29uc3QgeyBkYXRhOiBlcnJvciA9IHZvaWQgMCwgbXV0YXRlOiBzZXRFcnJvciB9ID0gdXNlU1dSKFtjaGF0S2V5LCBcImVycm9yXCJdLCBudWxsKTtcbiAgY29uc3QgbWVzc2FnZXNSZWYgPSB1c2VSZWYobWVzc2FnZXMgfHwgW10pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIG1lc3NhZ2VzUmVmLmN1cnJlbnQgPSBtZXNzYWdlcyB8fCBbXTtcbiAgfSwgW21lc3NhZ2VzXSk7XG4gIGNvbnN0IGFib3J0Q29udHJvbGxlclJlZiA9IHVzZVJlZihudWxsKTtcbiAgY29uc3QgZXh0cmFNZXRhZGF0YVJlZiA9IHVzZVJlZih7XG4gICAgY3JlZGVudGlhbHMsXG4gICAgaGVhZGVycyxcbiAgICBib2R5XG4gIH0pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGV4dHJhTWV0YWRhdGFSZWYuY3VycmVudCA9IHtcbiAgICAgIGNyZWRlbnRpYWxzLFxuICAgICAgaGVhZGVycyxcbiAgICAgIGJvZHlcbiAgICB9O1xuICB9LCBbY3JlZGVudGlhbHMsIGhlYWRlcnMsIGJvZHldKTtcbiAgY29uc3QgdHJpZ2dlclJlcXVlc3QgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAoY2hhdFJlcXVlc3QpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG11dGF0ZUxvYWRpbmcodHJ1ZSk7XG4gICAgICAgIHNldEVycm9yKHZvaWQgMCk7XG4gICAgICAgIGNvbnN0IGFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgICAgYWJvcnRDb250cm9sbGVyUmVmLmN1cnJlbnQgPSBhYm9ydENvbnRyb2xsZXI7XG4gICAgICAgIGF3YWl0IHByb2Nlc3NDaGF0U3RyZWFtKHtcbiAgICAgICAgICBnZXRTdHJlYW1lZFJlc3BvbnNlOiAoKSA9PiBnZXRTdHJlYW1lZFJlc3BvbnNlKFxuICAgICAgICAgICAgYXBpLFxuICAgICAgICAgICAgY2hhdFJlcXVlc3QsXG4gICAgICAgICAgICBtdXRhdGUsXG4gICAgICAgICAgICBtdXRhdGVTdHJlYW1EYXRhLFxuICAgICAgICAgICAgc3RyZWFtRGF0YSxcbiAgICAgICAgICAgIGV4dHJhTWV0YWRhdGFSZWYsXG4gICAgICAgICAgICBtZXNzYWdlc1JlZixcbiAgICAgICAgICAgIGFib3J0Q29udHJvbGxlclJlZixcbiAgICAgICAgICAgIGdlbmVyYXRlSWQsXG4gICAgICAgICAgICBvbkZpbmlzaCxcbiAgICAgICAgICAgIG9uUmVzcG9uc2UsXG4gICAgICAgICAgICBzZW5kRXh0cmFNZXNzYWdlRmllbGRzXG4gICAgICAgICAgKSxcbiAgICAgICAgICBleHBlcmltZW50YWxfb25GdW5jdGlvbkNhbGwsXG4gICAgICAgICAgZXhwZXJpbWVudGFsX29uVG9vbENhbGwsXG4gICAgICAgICAgdXBkYXRlQ2hhdFJlcXVlc3Q6IChjaGF0UmVxdWVzdFBhcmFtKSA9PiB7XG4gICAgICAgICAgICBjaGF0UmVxdWVzdCA9IGNoYXRSZXF1ZXN0UGFyYW07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXRDdXJyZW50TWVzc2FnZXM6ICgpID0+IG1lc3NhZ2VzUmVmLmN1cnJlbnRcbiAgICAgICAgfSk7XG4gICAgICAgIGFib3J0Q29udHJvbGxlclJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoZXJyLm5hbWUgPT09IFwiQWJvcnRFcnJvclwiKSB7XG4gICAgICAgICAgYWJvcnRDb250cm9sbGVyUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvbkVycm9yICYmIGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIHNldEVycm9yKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBtdXRhdGVMb2FkaW5nKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtcbiAgICAgIG11dGF0ZSxcbiAgICAgIG11dGF0ZUxvYWRpbmcsXG4gICAgICBhcGksXG4gICAgICBleHRyYU1ldGFkYXRhUmVmLFxuICAgICAgb25SZXNwb25zZSxcbiAgICAgIG9uRmluaXNoLFxuICAgICAgb25FcnJvcixcbiAgICAgIHNldEVycm9yLFxuICAgICAgbXV0YXRlU3RyZWFtRGF0YSxcbiAgICAgIHN0cmVhbURhdGEsXG4gICAgICBzZW5kRXh0cmFNZXNzYWdlRmllbGRzLFxuICAgICAgZXhwZXJpbWVudGFsX29uRnVuY3Rpb25DYWxsLFxuICAgICAgZXhwZXJpbWVudGFsX29uVG9vbENhbGwsXG4gICAgICBtZXNzYWdlc1JlZixcbiAgICAgIGFib3J0Q29udHJvbGxlclJlZixcbiAgICAgIGdlbmVyYXRlSWRcbiAgICBdXG4gICk7XG4gIGNvbnN0IGFwcGVuZCA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChtZXNzYWdlLCB7XG4gICAgICBvcHRpb25zLFxuICAgICAgZnVuY3Rpb25zLFxuICAgICAgZnVuY3Rpb25fY2FsbCxcbiAgICAgIHRvb2xzLFxuICAgICAgdG9vbF9jaG9pY2UsXG4gICAgICBkYXRhXG4gICAgfSA9IHt9KSA9PiB7XG4gICAgICBpZiAoIW1lc3NhZ2UuaWQpIHtcbiAgICAgICAgbWVzc2FnZS5pZCA9IGdlbmVyYXRlSWQoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNoYXRSZXF1ZXN0ID0ge1xuICAgICAgICBtZXNzYWdlczogbWVzc2FnZXNSZWYuY3VycmVudC5jb25jYXQobWVzc2FnZSksXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIC4uLmZ1bmN0aW9ucyAhPT0gdm9pZCAwICYmIHsgZnVuY3Rpb25zIH0sXG4gICAgICAgIC4uLmZ1bmN0aW9uX2NhbGwgIT09IHZvaWQgMCAmJiB7IGZ1bmN0aW9uX2NhbGwgfSxcbiAgICAgICAgLi4udG9vbHMgIT09IHZvaWQgMCAmJiB7IHRvb2xzIH0sXG4gICAgICAgIC4uLnRvb2xfY2hvaWNlICE9PSB2b2lkIDAgJiYgeyB0b29sX2Nob2ljZSB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHRyaWdnZXJSZXF1ZXN0KGNoYXRSZXF1ZXN0KTtcbiAgICB9LFxuICAgIFt0cmlnZ2VyUmVxdWVzdCwgZ2VuZXJhdGVJZF1cbiAgKTtcbiAgY29uc3QgcmVsb2FkID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKHtcbiAgICAgIG9wdGlvbnMsXG4gICAgICBmdW5jdGlvbnMsXG4gICAgICBmdW5jdGlvbl9jYWxsLFxuICAgICAgdG9vbHMsXG4gICAgICB0b29sX2Nob2ljZVxuICAgIH0gPSB7fSkgPT4ge1xuICAgICAgaWYgKG1lc3NhZ2VzUmVmLmN1cnJlbnQubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGNvbnN0IGxhc3RNZXNzYWdlID0gbWVzc2FnZXNSZWYuY3VycmVudFttZXNzYWdlc1JlZi5jdXJyZW50Lmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGxhc3RNZXNzYWdlLnJvbGUgPT09IFwiYXNzaXN0YW50XCIpIHtcbiAgICAgICAgY29uc3QgY2hhdFJlcXVlc3QyID0ge1xuICAgICAgICAgIG1lc3NhZ2VzOiBtZXNzYWdlc1JlZi5jdXJyZW50LnNsaWNlKDAsIC0xKSxcbiAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgIC4uLmZ1bmN0aW9ucyAhPT0gdm9pZCAwICYmIHsgZnVuY3Rpb25zIH0sXG4gICAgICAgICAgLi4uZnVuY3Rpb25fY2FsbCAhPT0gdm9pZCAwICYmIHsgZnVuY3Rpb25fY2FsbCB9LFxuICAgICAgICAgIC4uLnRvb2xzICE9PSB2b2lkIDAgJiYgeyB0b29scyB9LFxuICAgICAgICAgIC4uLnRvb2xfY2hvaWNlICE9PSB2b2lkIDAgJiYgeyB0b29sX2Nob2ljZSB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0cmlnZ2VyUmVxdWVzdChjaGF0UmVxdWVzdDIpO1xuICAgICAgfVxuICAgICAgY29uc3QgY2hhdFJlcXVlc3QgPSB7XG4gICAgICAgIG1lc3NhZ2VzOiBtZXNzYWdlc1JlZi5jdXJyZW50LFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICAuLi5mdW5jdGlvbnMgIT09IHZvaWQgMCAmJiB7IGZ1bmN0aW9ucyB9LFxuICAgICAgICAuLi5mdW5jdGlvbl9jYWxsICE9PSB2b2lkIDAgJiYgeyBmdW5jdGlvbl9jYWxsIH0sXG4gICAgICAgIC4uLnRvb2xzICE9PSB2b2lkIDAgJiYgeyB0b29scyB9LFxuICAgICAgICAuLi50b29sX2Nob2ljZSAhPT0gdm9pZCAwICYmIHsgdG9vbF9jaG9pY2UgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiB0cmlnZ2VyUmVxdWVzdChjaGF0UmVxdWVzdCk7XG4gICAgfSxcbiAgICBbdHJpZ2dlclJlcXVlc3RdXG4gICk7XG4gIGNvbnN0IHN0b3AgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGFib3J0Q29udHJvbGxlclJlZi5jdXJyZW50KSB7XG4gICAgICBhYm9ydENvbnRyb2xsZXJSZWYuY3VycmVudC5hYm9ydCgpO1xuICAgICAgYWJvcnRDb250cm9sbGVyUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgfSwgW10pO1xuICBjb25zdCBzZXRNZXNzYWdlcyA9IHVzZUNhbGxiYWNrKFxuICAgIChtZXNzYWdlczIpID0+IHtcbiAgICAgIG11dGF0ZShtZXNzYWdlczIsIGZhbHNlKTtcbiAgICAgIG1lc3NhZ2VzUmVmLmN1cnJlbnQgPSBtZXNzYWdlczI7XG4gICAgfSxcbiAgICBbbXV0YXRlXVxuICApO1xuICBjb25zdCBbaW5wdXQsIHNldElucHV0XSA9IHVzZVN0YXRlKGluaXRpYWxJbnB1dCk7XG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IHVzZUNhbGxiYWNrKFxuICAgIChlLCBvcHRpb25zID0ge30sIG1ldGFkYXRhKSA9PiB7XG4gICAgICBpZiAobWV0YWRhdGEpIHtcbiAgICAgICAgZXh0cmFNZXRhZGF0YVJlZi5jdXJyZW50ID0ge1xuICAgICAgICAgIC4uLmV4dHJhTWV0YWRhdGFSZWYuY3VycmVudCxcbiAgICAgICAgICAuLi5tZXRhZGF0YVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKCFpbnB1dClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgYXBwZW5kKFxuICAgICAgICB7XG4gICAgICAgICAgY29udGVudDogaW5wdXQsXG4gICAgICAgICAgcm9sZTogXCJ1c2VyXCIsXG4gICAgICAgICAgY3JlYXRlZEF0OiAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKVxuICAgICAgICB9LFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICAgICAgc2V0SW5wdXQoXCJcIik7XG4gICAgfSxcbiAgICBbaW5wdXQsIGFwcGVuZF1cbiAgKTtcbiAgY29uc3QgaGFuZGxlSW5wdXRDaGFuZ2UgPSAoZSkgPT4ge1xuICAgIHNldElucHV0KGUudGFyZ2V0LnZhbHVlKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlczogbWVzc2FnZXMgfHwgW10sXG4gICAgZXJyb3IsXG4gICAgYXBwZW5kLFxuICAgIHJlbG9hZCxcbiAgICBzdG9wLFxuICAgIHNldE1lc3NhZ2VzLFxuICAgIGlucHV0LFxuICAgIHNldElucHV0LFxuICAgIGhhbmRsZUlucHV0Q2hhbmdlLFxuICAgIGhhbmRsZVN1Ym1pdCxcbiAgICBpc0xvYWRpbmcsXG4gICAgZGF0YTogc3RyZWFtRGF0YVxuICB9O1xufVxuXG4vLyByZWFjdC91c2UtY29tcGxldGlvbi50c1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgYXMgdXNlQ2FsbGJhY2syLCB1c2VFZmZlY3QgYXMgdXNlRWZmZWN0MiwgdXNlSWQgYXMgdXNlSWQyLCB1c2VSZWYgYXMgdXNlUmVmMiwgdXNlU3RhdGUgYXMgdXNlU3RhdGUyIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgdXNlU1dSMiBmcm9tIFwic3dyXCI7XG5cbi8vIHNoYXJlZC9jYWxsLWNvbXBsZXRpb24tYXBpLnRzXG5hc3luYyBmdW5jdGlvbiBjYWxsQ29tcGxldGlvbkFwaSh7XG4gIGFwaSxcbiAgcHJvbXB0LFxuICBjcmVkZW50aWFscyxcbiAgaGVhZGVycyxcbiAgYm9keSxcbiAgc2V0Q29tcGxldGlvbixcbiAgc2V0TG9hZGluZyxcbiAgc2V0RXJyb3IsXG4gIHNldEFib3J0Q29udHJvbGxlcixcbiAgb25SZXNwb25zZSxcbiAgb25GaW5pc2gsXG4gIG9uRXJyb3IsXG4gIG9uRGF0YVxufSkge1xuICB0cnkge1xuICAgIHNldExvYWRpbmcodHJ1ZSk7XG4gICAgc2V0RXJyb3Iodm9pZCAwKTtcbiAgICBjb25zdCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgc2V0QWJvcnRDb250cm9sbGVyKGFib3J0Q29udHJvbGxlcik7XG4gICAgc2V0Q29tcGxldGlvbihcIlwiKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChhcGksIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHByb21wdCxcbiAgICAgICAgLi4uYm9keVxuICAgICAgfSksXG4gICAgICBjcmVkZW50aWFscyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIC4uLmhlYWRlcnNcbiAgICAgIH0sXG4gICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWxcbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfSk7XG4gICAgaWYgKG9uUmVzcG9uc2UpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IG9uUmVzcG9uc2UocmVzKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGF3YWl0IHJlcy50ZXh0KCkgfHwgXCJGYWlsZWQgdG8gZmV0Y2ggdGhlIGNoYXQgcmVzcG9uc2UuXCJcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghcmVzLmJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSByZXNwb25zZSBib2R5IGlzIGVtcHR5LlwiKTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgY29uc3QgcmVhZGVyID0gcmVzLmJvZHkuZ2V0UmVhZGVyKCk7XG4gICAgY29uc3QgaXNDb21wbGV4TW9kZSA9IHJlcy5oZWFkZXJzLmdldChDT01QTEVYX0hFQURFUikgPT09IFwidHJ1ZVwiO1xuICAgIGlmIChpc0NvbXBsZXhNb2RlKSB7XG4gICAgICBmb3IgYXdhaXQgKGNvbnN0IHsgdHlwZSwgdmFsdWUgfSBvZiByZWFkRGF0YVN0cmVhbShyZWFkZXIsIHtcbiAgICAgICAgaXNBYm9ydGVkOiAoKSA9PiBhYm9ydENvbnRyb2xsZXIgPT09IG51bGxcbiAgICAgIH0pKSB7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIGNhc2UgXCJ0ZXh0XCI6IHtcbiAgICAgICAgICAgIHJlc3VsdCArPSB2YWx1ZTtcbiAgICAgICAgICAgIHNldENvbXBsZXRpb24ocmVzdWx0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBvbkRhdGEgPT0gbnVsbCA/IHZvaWQgMCA6IG9uRGF0YSh2YWx1ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGVjb2RlciA9IGNyZWF0ZUNodW5rRGVjb2RlcigpO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gZGVjb2Rlcih2YWx1ZSk7XG4gICAgICAgIHNldENvbXBsZXRpb24ocmVzdWx0KTtcbiAgICAgICAgaWYgKGFib3J0Q29udHJvbGxlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHJlYWRlci5jYW5jZWwoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAob25GaW5pc2gpIHtcbiAgICAgIG9uRmluaXNoKHByb21wdCwgcmVzdWx0KTtcbiAgICB9XG4gICAgc2V0QWJvcnRDb250cm9sbGVyKG51bGwpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIubmFtZSA9PT0gXCJBYm9ydEVycm9yXCIpIHtcbiAgICAgIHNldEFib3J0Q29udHJvbGxlcihudWxsKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2V0RXJyb3IoZXJyKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgfVxufVxuXG4vLyByZWFjdC91c2UtY29tcGxldGlvbi50c1xuZnVuY3Rpb24gdXNlQ29tcGxldGlvbih7XG4gIGFwaSA9IFwiL2FwaS9jb21wbGV0aW9uXCIsXG4gIGlkLFxuICBpbml0aWFsQ29tcGxldGlvbiA9IFwiXCIsXG4gIGluaXRpYWxJbnB1dCA9IFwiXCIsXG4gIGNyZWRlbnRpYWxzLFxuICBoZWFkZXJzLFxuICBib2R5LFxuICBvblJlc3BvbnNlLFxuICBvbkZpbmlzaCxcbiAgb25FcnJvclxufSA9IHt9KSB7XG4gIGNvbnN0IGhvb2tJZCA9IHVzZUlkMigpO1xuICBjb25zdCBjb21wbGV0aW9uSWQgPSBpZCB8fCBob29rSWQ7XG4gIGNvbnN0IHsgZGF0YSwgbXV0YXRlIH0gPSB1c2VTV1IyKFthcGksIGNvbXBsZXRpb25JZF0sIG51bGwsIHtcbiAgICBmYWxsYmFja0RhdGE6IGluaXRpYWxDb21wbGV0aW9uXG4gIH0pO1xuICBjb25zdCB7IGRhdGE6IGlzTG9hZGluZyA9IGZhbHNlLCBtdXRhdGU6IG11dGF0ZUxvYWRpbmcgfSA9IHVzZVNXUjIoXG4gICAgW2NvbXBsZXRpb25JZCwgXCJsb2FkaW5nXCJdLFxuICAgIG51bGxcbiAgKTtcbiAgY29uc3QgeyBkYXRhOiBzdHJlYW1EYXRhLCBtdXRhdGU6IG11dGF0ZVN0cmVhbURhdGEgfSA9IHVzZVNXUjIoW2NvbXBsZXRpb25JZCwgXCJzdHJlYW1EYXRhXCJdLCBudWxsKTtcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZTIodm9pZCAwKTtcbiAgY29uc3QgY29tcGxldGlvbiA9IGRhdGE7XG4gIGNvbnN0IFthYm9ydENvbnRyb2xsZXIsIHNldEFib3J0Q29udHJvbGxlcl0gPSB1c2VTdGF0ZTIobnVsbCk7XG4gIGNvbnN0IGV4dHJhTWV0YWRhdGFSZWYgPSB1c2VSZWYyKHtcbiAgICBjcmVkZW50aWFscyxcbiAgICBoZWFkZXJzLFxuICAgIGJvZHlcbiAgfSk7XG4gIHVzZUVmZmVjdDIoKCkgPT4ge1xuICAgIGV4dHJhTWV0YWRhdGFSZWYuY3VycmVudCA9IHtcbiAgICAgIGNyZWRlbnRpYWxzLFxuICAgICAgaGVhZGVycyxcbiAgICAgIGJvZHlcbiAgICB9O1xuICB9LCBbY3JlZGVudGlhbHMsIGhlYWRlcnMsIGJvZHldKTtcbiAgY29uc3QgdHJpZ2dlclJlcXVlc3QgPSB1c2VDYWxsYmFjazIoXG4gICAgYXN5bmMgKHByb21wdCwgb3B0aW9ucykgPT4gY2FsbENvbXBsZXRpb25BcGkoe1xuICAgICAgYXBpLFxuICAgICAgcHJvbXB0LFxuICAgICAgY3JlZGVudGlhbHM6IGV4dHJhTWV0YWRhdGFSZWYuY3VycmVudC5jcmVkZW50aWFscyxcbiAgICAgIGhlYWRlcnM6IHsgLi4uZXh0cmFNZXRhZGF0YVJlZi5jdXJyZW50LmhlYWRlcnMsIC4uLm9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuaGVhZGVycyB9LFxuICAgICAgYm9keToge1xuICAgICAgICAuLi5leHRyYU1ldGFkYXRhUmVmLmN1cnJlbnQuYm9keSxcbiAgICAgICAgLi4ub3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5ib2R5XG4gICAgICB9LFxuICAgICAgc2V0Q29tcGxldGlvbjogKGNvbXBsZXRpb24yKSA9PiBtdXRhdGUoY29tcGxldGlvbjIsIGZhbHNlKSxcbiAgICAgIHNldExvYWRpbmc6IG11dGF0ZUxvYWRpbmcsXG4gICAgICBzZXRFcnJvcixcbiAgICAgIHNldEFib3J0Q29udHJvbGxlcixcbiAgICAgIG9uUmVzcG9uc2UsXG4gICAgICBvbkZpbmlzaCxcbiAgICAgIG9uRXJyb3IsXG4gICAgICBvbkRhdGE6IChkYXRhMikgPT4ge1xuICAgICAgICBtdXRhdGVTdHJlYW1EYXRhKFsuLi5zdHJlYW1EYXRhIHx8IFtdLCAuLi5kYXRhMiB8fCBbXV0sIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBbXG4gICAgICBtdXRhdGUsXG4gICAgICBtdXRhdGVMb2FkaW5nLFxuICAgICAgYXBpLFxuICAgICAgZXh0cmFNZXRhZGF0YVJlZixcbiAgICAgIHNldEFib3J0Q29udHJvbGxlcixcbiAgICAgIG9uUmVzcG9uc2UsXG4gICAgICBvbkZpbmlzaCxcbiAgICAgIG9uRXJyb3IsXG4gICAgICBzZXRFcnJvcixcbiAgICAgIHN0cmVhbURhdGEsXG4gICAgICBtdXRhdGVTdHJlYW1EYXRhXG4gICAgXVxuICApO1xuICBjb25zdCBzdG9wID0gdXNlQ2FsbGJhY2syKCgpID0+IHtcbiAgICBpZiAoYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICBhYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgIHNldEFib3J0Q29udHJvbGxlcihudWxsKTtcbiAgICB9XG4gIH0sIFthYm9ydENvbnRyb2xsZXJdKTtcbiAgY29uc3Qgc2V0Q29tcGxldGlvbiA9IHVzZUNhbGxiYWNrMihcbiAgICAoY29tcGxldGlvbjIpID0+IHtcbiAgICAgIG11dGF0ZShjb21wbGV0aW9uMiwgZmFsc2UpO1xuICAgIH0sXG4gICAgW211dGF0ZV1cbiAgKTtcbiAgY29uc3QgY29tcGxldGUgPSB1c2VDYWxsYmFjazIoXG4gICAgYXN5bmMgKHByb21wdCwgb3B0aW9ucykgPT4ge1xuICAgICAgcmV0dXJuIHRyaWdnZXJSZXF1ZXN0KHByb21wdCwgb3B0aW9ucyk7XG4gICAgfSxcbiAgICBbdHJpZ2dlclJlcXVlc3RdXG4gICk7XG4gIGNvbnN0IFtpbnB1dCwgc2V0SW5wdXRdID0gdXNlU3RhdGUyKGluaXRpYWxJbnB1dCk7XG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IHVzZUNhbGxiYWNrMihcbiAgICAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKCFpbnB1dClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgcmV0dXJuIGNvbXBsZXRlKGlucHV0KTtcbiAgICB9LFxuICAgIFtpbnB1dCwgY29tcGxldGVdXG4gICk7XG4gIGNvbnN0IGhhbmRsZUlucHV0Q2hhbmdlID0gKGUpID0+IHtcbiAgICBzZXRJbnB1dChlLnRhcmdldC52YWx1ZSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgY29tcGxldGlvbixcbiAgICBjb21wbGV0ZSxcbiAgICBlcnJvcixcbiAgICBzZXRDb21wbGV0aW9uLFxuICAgIHN0b3AsXG4gICAgaW5wdXQsXG4gICAgc2V0SW5wdXQsXG4gICAgaGFuZGxlSW5wdXRDaGFuZ2UsXG4gICAgaGFuZGxlU3VibWl0LFxuICAgIGlzTG9hZGluZyxcbiAgICBkYXRhOiBzdHJlYW1EYXRhXG4gIH07XG59XG5cbi8vIHJlYWN0L3VzZS1hc3Npc3RhbnQudHNcbmltcG9ydCB7IHVzZVN0YXRlIGFzIHVzZVN0YXRlMyB9IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gZXhwZXJpbWVudGFsX3VzZUFzc2lzdGFudCh7XG4gIGFwaSxcbiAgdGhyZWFkSWQ6IHRocmVhZElkUGFyYW0sXG4gIGNyZWRlbnRpYWxzLFxuICBoZWFkZXJzLFxuICBib2R5XG59KSB7XG4gIGNvbnN0IFttZXNzYWdlcywgc2V0TWVzc2FnZXNdID0gdXNlU3RhdGUzKFtdKTtcbiAgY29uc3QgW2lucHV0LCBzZXRJbnB1dF0gPSB1c2VTdGF0ZTMoXCJcIik7XG4gIGNvbnN0IFt0aHJlYWRJZCwgc2V0VGhyZWFkSWRdID0gdXNlU3RhdGUzKHZvaWQgMCk7XG4gIGNvbnN0IFtzdGF0dXMsIHNldFN0YXR1c10gPSB1c2VTdGF0ZTMoXCJhd2FpdGluZ19tZXNzYWdlXCIpO1xuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlMyh2b2lkIDApO1xuICBjb25zdCBoYW5kbGVJbnB1dENoYW5nZSA9IChldmVudCkgPT4ge1xuICAgIHNldElucHV0KGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gIH07XG4gIGNvbnN0IHN1Ym1pdE1lc3NhZ2UgPSBhc3luYyAoZXZlbnQsIHJlcXVlc3RPcHRpb25zKSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICAoX2EgPSBldmVudCA9PSBudWxsID8gdm9pZCAwIDogZXZlbnQucHJldmVudERlZmF1bHQpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKGV2ZW50KTtcbiAgICBpZiAoaW5wdXQgPT09IFwiXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0U3RhdHVzKFwiaW5fcHJvZ3Jlc3NcIik7XG4gICAgc2V0TWVzc2FnZXMoKG1lc3NhZ2VzMikgPT4gW1xuICAgICAgLi4ubWVzc2FnZXMyLFxuICAgICAgeyBpZDogXCJcIiwgcm9sZTogXCJ1c2VyXCIsIGNvbnRlbnQ6IGlucHV0IH1cbiAgICBdKTtcbiAgICBzZXRJbnB1dChcIlwiKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmZXRjaChhcGksIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBjcmVkZW50aWFscyxcbiAgICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsIC4uLmhlYWRlcnMgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgLi4uYm9keSxcbiAgICAgICAgLy8gYWx3YXlzIHVzZSB1c2VyLXByb3ZpZGVkIHRocmVhZElkIHdoZW4gYXZhaWxhYmxlOlxuICAgICAgICB0aHJlYWRJZDogKF9iID0gdGhyZWFkSWRQYXJhbSAhPSBudWxsID8gdGhyZWFkSWRQYXJhbSA6IHRocmVhZElkKSAhPSBudWxsID8gX2IgOiBudWxsLFxuICAgICAgICBtZXNzYWdlOiBpbnB1dCxcbiAgICAgICAgLy8gb3B0aW9uYWwgcmVxdWVzdCBkYXRhOlxuICAgICAgICBkYXRhOiByZXF1ZXN0T3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogcmVxdWVzdE9wdGlvbnMuZGF0YVxuICAgICAgfSlcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmJvZHkgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHJlc3BvbnNlIGJvZHkgaXMgZW1wdHkuXCIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgZm9yIGF3YWl0IChjb25zdCB7IHR5cGUsIHZhbHVlIH0gb2YgcmVhZERhdGFTdHJlYW0oXG4gICAgICAgIHJlc3VsdC5ib2R5LmdldFJlYWRlcigpXG4gICAgICApKSB7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIGNhc2UgXCJhc3Npc3RhbnRfbWVzc2FnZVwiOiB7XG4gICAgICAgICAgICBzZXRNZXNzYWdlcygobWVzc2FnZXMyKSA9PiBbXG4gICAgICAgICAgICAgIC4uLm1lc3NhZ2VzMixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOiB2YWx1ZS5pZCxcbiAgICAgICAgICAgICAgICByb2xlOiB2YWx1ZS5yb2xlLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHZhbHVlLmNvbnRlbnRbMF0udGV4dC52YWx1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwiZGF0YV9tZXNzYWdlXCI6IHtcbiAgICAgICAgICAgIHNldE1lc3NhZ2VzKChtZXNzYWdlczIpID0+IHtcbiAgICAgICAgICAgICAgdmFyIF9hMjtcbiAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAuLi5tZXNzYWdlczIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgaWQ6IChfYTIgPSB2YWx1ZS5pZCkgIT0gbnVsbCA/IF9hMiA6IFwiXCIsXG4gICAgICAgICAgICAgICAgICByb2xlOiBcImRhdGFcIixcbiAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiXCIsXG4gICAgICAgICAgICAgICAgICBkYXRhOiB2YWx1ZS5kYXRhXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcImFzc2lzdGFudF9jb250cm9sX2RhdGFcIjoge1xuICAgICAgICAgICAgc2V0VGhyZWFkSWQodmFsdWUudGhyZWFkSWQpO1xuICAgICAgICAgICAgc2V0TWVzc2FnZXMoKG1lc3NhZ2VzMikgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBsYXN0TWVzc2FnZSA9IG1lc3NhZ2VzMlttZXNzYWdlczIubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgIGxhc3RNZXNzYWdlLmlkID0gdmFsdWUubWVzc2FnZUlkO1xuICAgICAgICAgICAgICByZXR1cm4gWy4uLm1lc3NhZ2VzMi5zbGljZSgwLCBtZXNzYWdlczIubGVuZ3RoIC0gMSksIGxhc3RNZXNzYWdlXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJlcnJvclwiOiB7XG4gICAgICAgICAgICBzZXRFcnJvcih2YWx1ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcjIpIHtcbiAgICAgIHNldEVycm9yKGVycm9yMik7XG4gICAgfVxuICAgIHNldFN0YXR1cyhcImF3YWl0aW5nX21lc3NhZ2VcIik7XG4gIH07XG4gIHJldHVybiB7XG4gICAgbWVzc2FnZXMsXG4gICAgdGhyZWFkSWQsXG4gICAgaW5wdXQsXG4gICAgc2V0SW5wdXQsXG4gICAgaGFuZGxlSW5wdXRDaGFuZ2UsXG4gICAgc3VibWl0TWVzc2FnZSxcbiAgICBzdGF0dXMsXG4gICAgZXJyb3JcbiAgfTtcbn1cbmV4cG9ydCB7XG4gIGV4cGVyaW1lbnRhbF91c2VBc3Npc3RhbnQsXG4gIHVzZUNoYXQsXG4gIHVzZUNvbXBsZXRpb25cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbInVzZUNhbGxiYWNrIiwidXNlRWZmZWN0IiwidXNlSWQiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZVNXUiIsInRleHRTdHJlYW1QYXJ0IiwiY29kZSIsIm5hbWUiLCJwYXJzZSIsInZhbHVlIiwiRXJyb3IiLCJ0eXBlIiwiZnVuY3Rpb25DYWxsU3RyZWFtUGFydCIsImZ1bmN0aW9uX2NhbGwiLCJhcmd1bWVudHMiLCJkYXRhU3RyZWFtUGFydCIsIkFycmF5IiwiaXNBcnJheSIsImVycm9yU3RyZWFtUGFydCIsImFzc2lzdGFudE1lc3NhZ2VTdHJlYW1QYXJ0IiwiaWQiLCJyb2xlIiwiY29udGVudCIsImV2ZXJ5IiwiaXRlbSIsInRleHQiLCJhc3Npc3RhbnRDb250cm9sRGF0YVN0cmVhbVBhcnQiLCJ0aHJlYWRJZCIsIm1lc3NhZ2VJZCIsImRhdGFNZXNzYWdlU3RyZWFtUGFydCIsInRvb2xDYWxsU3RyZWFtUGFydCIsInRvb2xfY2FsbHMiLCJzb21lIiwidGMiLCJmdW5jdGlvbiIsInN0cmVhbVBhcnRzIiwic3RyZWFtUGFydHNCeUNvZGUiLCJTdHJlYW1TdHJpbmdQcmVmaXhlcyIsInZhbGlkQ29kZXMiLCJtYXAiLCJwYXJ0IiwicGFyc2VTdHJlYW1QYXJ0IiwibGluZSIsImZpcnN0U2VwYXJhdG9ySW5kZXgiLCJpbmRleE9mIiwicHJlZml4Iiwic2xpY2UiLCJpbmNsdWRlcyIsInRleHRWYWx1ZSIsImpzb25WYWx1ZSIsIkpTT04iLCJORVdMSU5FIiwiY2hhckNvZGVBdCIsImNvbmNhdENodW5rcyIsImNodW5rcyIsInRvdGFsTGVuZ3RoIiwiY29uY2F0ZW5hdGVkQ2h1bmtzIiwiVWludDhBcnJheSIsIm9mZnNldCIsImNodW5rIiwic2V0IiwibGVuZ3RoIiwicmVhZERhdGFTdHJlYW0iLCJyZWFkZXIiLCJpc0Fib3J0ZWQiLCJkZWNvZGVyIiwiVGV4dERlY29kZXIiLCJyZWFkIiwicHVzaCIsInN0cmVhbVBhcnRzMiIsImRlY29kZSIsInN0cmVhbSIsInNwbGl0IiwiZmlsdGVyIiwic3RyZWFtUGFydCIsImNhbmNlbCIsImN1c3RvbUFscGhhYmV0IiwibmFub2lkIiwiY3JlYXRlQ2h1bmtEZWNvZGVyIiwiY29tcGxleCIsImRlY29kZWQiLCJCb29sZWFuIiwiQ09NUExFWF9IRUFERVIiLCJwYXJzZUNvbXBsZXhSZXNwb25zZSIsImFib3J0Q29udHJvbGxlclJlZiIsInVwZGF0ZSIsIm9uRmluaXNoIiwiZ2VuZXJhdGVJZCIsImdldEN1cnJlbnREYXRlIiwiRGF0ZSIsImNyZWF0ZWRBdCIsInByZWZpeE1hcCIsImRhdGEiLCJjdXJyZW50IiwiZnVuY3Rpb25DYWxsTWVzc2FnZSIsInRvb2xDYWxsTWVzc2FnZSIsInJlc3BvbnNlTWVzc2FnZSIsIm1lcmdlZCIsIm1lc3NhZ2VzIiwiY2FsbENoYXRBcGkiLCJhcGkiLCJib2R5IiwiY3JlZGVudGlhbHMiLCJoZWFkZXJzIiwiYWJvcnRDb250cm9sbGVyIiwiYXBwZW5kTWVzc2FnZSIsInJlc3RvcmVNZXNzYWdlc09uRmFpbHVyZSIsIm9uUmVzcG9uc2UiLCJvblVwZGF0ZSIsIl9hIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsInN0cmluZ2lmeSIsInNpZ25hbCIsImNhdGNoIiwiZXJyIiwib2siLCJnZXRSZWFkZXIiLCJpc0NvbXBsZXhNb2RlIiwiZ2V0Iiwic3RyZWFtZWRSZXNwb25zZSIsInJlcGx5SWQiLCJkb25lIiwic3RhcnRzV2l0aCIsInBhcnNlZEZ1bmN0aW9uQ2FsbCIsInBhcnNlZFRvb2xDYWxscyIsInByb2Nlc3NDaGF0U3RyZWFtIiwiZ2V0U3RyZWFtZWRSZXNwb25zZSIsImdldFN0cmVhbWVkUmVzcG9uc2UyIiwiZXhwZXJpbWVudGFsX29uRnVuY3Rpb25DYWxsIiwiZXhwZXJpbWVudGFsX29uVG9vbENhbGwiLCJ1cGRhdGVDaGF0UmVxdWVzdCIsImdldEN1cnJlbnRNZXNzYWdlcyIsIm1lc3NhZ2VzQW5kRGF0YU9ySnVzdE1lc3NhZ2UiLCJoYXNGb2xsb3dpbmdSZXNwb25zZSIsIm1lc3NhZ2UiLCJmdW5jdGlvbkNhbGwiLCJjb25zb2xlIiwid2FybiIsImZ1bmN0aW9uQ2FsbFJlc3BvbnNlIiwidG9vbENhbGxzIiwidG9vbENhbGwiLCJ0b29sQ2FsbFJlc3BvbnNlIiwiZml4RnVuY3Rpb25DYWxsQXJndW1lbnRzMiIsImZpeEZ1bmN0aW9uQ2FsbEFyZ3VtZW50cyIsInN0cmVhbWVkUmVzcG9uc2VNZXNzYWdlIiwiY2hhdFJlcXVlc3QiLCJtdXRhdGUiLCJtdXRhdGVTdHJlYW1EYXRhIiwiZXhpc3RpbmdEYXRhIiwiZXh0cmFNZXRhZGF0YVJlZiIsIm1lc3NhZ2VzUmVmIiwic2VuZEV4dHJhTWVzc2FnZUZpZWxkcyIsIl9iIiwicHJldmlvdXNNZXNzYWdlcyIsImNvbnN0cnVjdGVkTWVzc2FnZXNQYXlsb2FkIiwidG9vbF9jYWxsX2lkIiwicmVhZFJvdyIsInByb21pc2UiLCJ1aSIsIm5leHQiLCJlIiwib3B0aW9ucyIsImZ1bmN0aW9ucyIsInRvb2xzIiwidG9vbF9jaG9pY2UiLCJ1c2VDaGF0IiwiaW5pdGlhbE1lc3NhZ2VzIiwiaW5pdGlhbElucHV0Iiwib25FcnJvciIsImhvb2tJZCIsImlkS2V5IiwiY2hhdEtleSIsImluaXRpYWxNZXNzYWdlc0ZhbGxiYWNrIiwiZmFsbGJhY2tEYXRhIiwiaXNMb2FkaW5nIiwibXV0YXRlTG9hZGluZyIsInN0cmVhbURhdGEiLCJlcnJvciIsInNldEVycm9yIiwidHJpZ2dlclJlcXVlc3QiLCJBYm9ydENvbnRyb2xsZXIiLCJjaGF0UmVxdWVzdFBhcmFtIiwiYXBwZW5kIiwiY29uY2F0IiwicmVsb2FkIiwibGFzdE1lc3NhZ2UiLCJjaGF0UmVxdWVzdDIiLCJzdG9wIiwiYWJvcnQiLCJzZXRNZXNzYWdlcyIsIm1lc3NhZ2VzMiIsImlucHV0Iiwic2V0SW5wdXQiLCJoYW5kbGVTdWJtaXQiLCJtZXRhZGF0YSIsInByZXZlbnREZWZhdWx0IiwiaGFuZGxlSW5wdXRDaGFuZ2UiLCJ0YXJnZXQiLCJ1c2VDYWxsYmFjazIiLCJ1c2VFZmZlY3QyIiwidXNlSWQyIiwidXNlUmVmMiIsInVzZVN0YXRlMiIsInVzZVNXUjIiLCJjYWxsQ29tcGxldGlvbkFwaSIsInByb21wdCIsInNldENvbXBsZXRpb24iLCJzZXRMb2FkaW5nIiwic2V0QWJvcnRDb250cm9sbGVyIiwib25EYXRhIiwicmVzIiwicmVzdWx0IiwidXNlQ29tcGxldGlvbiIsImluaXRpYWxDb21wbGV0aW9uIiwiY29tcGxldGlvbklkIiwiY29tcGxldGlvbiIsImNvbXBsZXRpb24yIiwiZGF0YTIiLCJjb21wbGV0ZSIsInVzZVN0YXRlMyIsImV4cGVyaW1lbnRhbF91c2VBc3Npc3RhbnQiLCJ0aHJlYWRJZFBhcmFtIiwic2V0VGhyZWFkSWQiLCJzdGF0dXMiLCJzZXRTdGF0dXMiLCJldmVudCIsInN1Ym1pdE1lc3NhZ2UiLCJyZXF1ZXN0T3B0aW9ucyIsImNhbGwiLCJfYTIiLCJlcnJvcjIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ai/react/dist/index.mjs\n");

/***/ })

};
;