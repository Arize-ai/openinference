import base64
import io
import json
from typing import Any, Dict, Generator, List, Tuple
from unittest.mock import MagicMock

import boto3
import pytest
from botocore.response import StreamingBody
from openinference.instrumentation import OITracer, using_attributes
from openinference.instrumentation.bedrock import (
    _MINIMUM_CONVERSE_BOTOCORE_VERSION,
    BedrockInstrumentor,
)
from openinference.semconv.trace import (
    OpenInferenceMimeTypeValues,
    OpenInferenceSpanKindValues,
    SpanAttributes,
)
from opentelemetry import trace as trace_api
from opentelemetry.sdk import trace as trace_sdk
from opentelemetry.sdk.resources import Resource
from opentelemetry.sdk.trace.export import SimpleSpanProcessor
from opentelemetry.sdk.trace.export.in_memory_span_exporter import InMemorySpanExporter


@pytest.fixture()
def image_bytes_and_format() -> Tuple[bytes, str]:
    return (
        b"RIFF\xde>\x00\x00WEBPVP8 \xd2>\x00\x00\xf0.\x01\x9d\x01* \x03\xb8\x01>\x9dN\xa1L\xb20\xae\xab\xa4S\xd9P\xb0\x13\x89cn\xfc6\\\x00\xedO\xa8\x84\xd0k\xba\x9c\x8f\x9f7\xfa\x9f\x01n\xb7\xe2\xbf\xbe~\xd9\x7f\x86\xf7\xf4\xaf\x7fp\xff\x03\xfa\x87\xfb\x7f\xba\x8f0;c\xcc\xc3\xc9?d\xff\xd5\xfe\x0b\xfc\xef\xbd\x1f\xf4_\xf5\xbd\x8e~\xb6\xff\xc5\xee\x0f\xfa}\xfa\xfd\xfe\xd7\xdb\x03\xf6w\xdd\x7f\x99\x8f\xdc\xcf\xdc\x9fw\x9f\xfa~\xbe\x7f\xb3z\x92\xffC\xff\xd1\xd7\x17\xe8u\xe6\xef\xff\xb3\xf7\x8b\xe1\xef\xf7#\xf7s\xda\xcf\xff\xfe\xb2\xbf\xa7\xbf\xdb\xf6\xff\xfe\xf7\xfb\xf7\x94~k~C\xa2\xd6q\xfb9\xd4\xa7\xe6\xdf\x94\xbf\x93\xeb\xd3\xfb\xbe\xfc\xf8\x05\xfeI\xfdC\xfd\xce\xfa\xe8\x02\xee\xe3\xfbo:\x7f\x99\xf5\x02\xe0\xdf\xf5\x7f`\x7f\xd3\xde\xb1\x9f\xeb\xf9B\xfd\xa3\xfe\x17\xb0\xe7K\x8f\xde\xd1\xae:\xe5\xe9/\xb24\x97hD\xe6\x96|\xa7LU\xd0\xab\x84J{\x19\xf5\x1b\xa5\x0cF\x14\xf5\xee^\x92\xed\x96uy\x8c=\xd0\xea\xf3\x18{\xa1\xd5\xe6\xa3H\x01\xdf\x12U?\x8a\x13\x05\xe6Q\xad\x14IO\xc9\x10\xd8\xa5\xa1=\x8d\x8eu{\xa7\xb3L\x07\x15x\x99\\\x8d\x1b}WNz3s\xf5\xe5){k\xccn\xa2\xf4\xf3\x8e\xaf1\x8b;GL\x17\xf19\x079}W\x97\xff\xce\xbc\x04\xe1Ez\x93|{}$\xcc-\xdd\xe0\xee\x04\xf7\xbb\xf0b\xc3\x8d\x85\x9dqD\x84\x10\x9d\xb6\xb4i\x90T,\x0c\x9aY`\x88\xa6\xc6\xf9>\xb1_\xd9\xc7W\x98\xc3\xdd\x0e\xaf1\x8a\x9c\x00\xc59q\xb4\x19p\x8b\x9a\x1f]\x0fz\xb8\x8bo%x)h\xd4#\x18\x16iP\xb2\xb8\xfe\xdd\x15\x86n\x9aL\x0f\x93\x07D2\xce\xaf1\x87\xf5\xc8\x07\xd7e\xa01f c\x86\x9b\xf6r!\xaa\x8b^\xe9B&H\xa8\xafE\"\xaf\x8d\x8bMy\xd0\x0f\x024\xc3\xdd\x98)\xc3Z\x17\xeae^\xbac\xaea\xd0<\x068;&\xf8\x11X\xbb$\x97\xbaJ\xf7.pN\x1d\xb2:\r\x8a\xcc\xd2c\x10\xc7r\xf4\x97l\xb4\x04\x03\xc0\x8d0\xf7RFs\x14\xcf\xcdYg\xed\xb2Q\x83\x01\xd1a\xe6\xac\x9e\xb2\xee\xcb\xecH0\xb9!\xa6n\xf4\xdf\xa0#!`g\"\xb1\xc5\xd6A\\O\x053\xf3\xd3@<S}\xd0\xe9\xc5d\xd7\xfb\xa9\x0e\xc1\x051\xbai\xa1gp\x15\x9fO\x86=\xd02 *L%)\x02\xde\xaa\x93F\xb3]\x0e\x80\x0e\xfd\xef\xef\x85\xc5\xc9\xdf'U\xbfu$\x149\x88\x0b$^1\x07|h\x07\x8a\xa3\xa6\x0c\xac\x01\x8b,/Z\xa2\xfa\x83\x883\xefz\x91\x8a\xde\xee\xd0\xbe.7\x9e\xa2r\x19s\x8c]\xd1tX\xe2\xc0\xb8}\x84M\xcf\x08\xa9\xce\x83\xec\xfa\x9c.f\xd8\x164o\t~\xcfs6{\x8a\xf7x\xcf\x1a\xba$\xce\xf4\xdd\x7f\xd5q\x01\xc0\xf0\x90\xe7\xbe\x1eD\xa5\x94\xa6\x11Ru\xa4\xc5\\]0eA\xcf}o\xf4\xfc\x03{\xf8\xb1O\xe9\xc7\xfc\n\xf4\x19\xdc\x8b\x0f \x84\x05\x94\xaeUp\xf8\x12c4\xf8!^\x19\x14\xdd\xae6\x14\xf8\xe6\x08:\x0e\xb5\xb6\x19e\xb2\xe5\x8c\x1b\x8185\xa8\x85{nR\xd0c\xf2\xbf\xf8\x9e/\x8f\xd5\xc6\x03]\x14\rc\xe4\xea\x0en\xa5X\x1f5\x83d\xd1T\x971\xf7g&\xde\x06b\xe5_\x98\x81\x95-\xf6\xf3\xbf\xca\xd7\xaeq\xfe\x7f\xc1\x08\xce\x83P\xa7\xeb\x13\x9dg+(\xca@\xa2\xc8W\x8f\xf7\xe1e\xb9\xc6;\x15\xed\xfd\xfb\x8f\xe3(m^6d\xd6\x18\x1d\x11\xe6\xb9\x98n\x83\xaa\x06\xc7\xe9\x12\xe8B>h\x08\x1c\x91\xacO\x18\xc1>\xe1\x8eY\xa0\xefa\xf4\xd0\x03xD\x08\xab\xee\xe7A\x95Nmd#'2\xef\xff\xee\xed\x07\x99\xef\xe7\x9fe \x9e\x1f\xf2;a\x87\x81\xe8\xec\x85\xf6r\x980L\xb6\xd1\xa1\x16>L\xee\x15y\xe1,\xfc\xb9z\xef!\xb0\xc3\x88\xdf\xec\xad\xb8[\xb2\x8e?\xb6R\xd3\xa9z\x99R\x85\xcd\"\xfd0f2[Y\xcb\x01t@q\xbb\xdf3-\xbf;<n\xef@\x05\xbf\xd7\xddg\x0b\xca<r\xe5\xb3\xc1=\xc7T\x9a7;S\xa2\xf9\xd6\xc8\x95uZ\xd0\x1e7@;O\xda\xde8\xe64\xde\\\xd5s\x0fq$(\x8e\xaf\xff\xef\x9c\x91\xac\x1bS\x8bl\xf4\xecl\xcfdV\xbdG\xa1\xe9gM\x03\x97\xafR\x07\xbc.\xbd\x80\x0f\xb3\xeb\xd9\xc8b\xba\xadU\x18\x18\xdcjH\x16DP\x1c\xa4\xc4\xcf\x0cE{\xb7D\xf7:\xe1\x06K\xe1\xf7X\xb6\xa4;\x18\x83\xc0~\xc2h(+V\x807\x87\x12M\x8f\\\xe9\x8a\x87\xba\x1e\x83\x85\x96/\xbbl\x1e>\xaa-\x8d\xfa\xdab\xc3\x1a\xe2\xe8\x93lA(Jl;Kx\x18\x12\xdb3-\xa6xy\x11\x96\n\x11\xbf\xa7\x95\xcfV \x186\x0b\x99\xd9d\x080\x0c\xd6X\xf2\xb2\xfd\xa5(\xfa\xba\xb9\xab\xcb\x9b\xee\xf7\xc0\xa3\xb0\\&\xd1\xcc!\xd0\xb2\x00\xba=?>U\xe6&X\xb8X6\xb6<\xb6P\xeb^;\x8b\xfa$\x03\x90&\xc8a\xef\xe1\x16\xec\xf1\xe4\xe1a\xee\x87W\x98\xc0j\"O\xb4\xb8\xc3w\xd9n\xf3df\x81\x8f\x07C\x87\xea\x9d\x99\xbab[\xf0\x1b5\xe5\x00\xb5\x86\xc1\xa1\xab\x85n\xb1e\xd9\xa8\xee\xcb^\x91\xf6\xc4\xbe\xfa\xb9vmL\x1b\xab%\xf3-Os\xdf\xc6\xae\x98\xe4\xff.\xdcl\x85\x9f~\xf6\xad{+5\xa7\xf8\xdc\x16wh\x8a]\xbf=g\xb0\xcbo\x8d\x0f\x85\x0f\xd8\x00\x843!\xa2'qM\xb5w\x98/\xe3\x10\xc7\xfb\xa1\xce\x89\xb3\x0b5B-$\x01a\xfd\xaarc-\x7f\xf6\xb1S\xa5S\x13\xdd&\x80\xf5\xc4\x8e\x9d\xcb\xefK\x07qH\xfa\xddO$H\xa0_P/\xd6;\x8d\xfa\xb8\x1a\xbc\xa7\xa4)g>\x85\x9e\xd7`\xa0\xea\xd7\x19\x13\x91\x1d\xa3\x85\x05\xfd\t\x915Y\xf3\xf8\x0e\x80\xd3|\x90'M\xcc\x07\x85\x00B\xa0$\x82\xef+\x97\xa4\xee\xac\xdddYj\x8a:\t1\x96\x14\xacq-W\xfa\xfaE\xb4:(\xe6\x90s6\x1e\xba\x9b}\"\xd2\x8c\xcf\xc7u\xa6yYm\x8a\xa7m4\x8f\x96\xc5\xa3\x18\xe0\xd9\xa4\x15R\xfa\xd9O\xe7'\xc5/\x12n\x0e\xcf\x98]\xf5\x86na\xbf\xfcSE\xf5Z\xbf\x92M\xaf9\xc7\xc4\xac\x8c\xd7\x1b\xb6\x10\x86\x0c\xfd\xd9{\x12a7\x92-\xb9\xdc\r\x9f;\xa7\xe6\xc1\x91Tt;2Sm+\x92\xbe\xfam\xb8\xad \xaa*\x1a\xcc\xf9tHy\x97,\xc01\xc8\xbf\xe1\xfbO8\x96ht\xb0k`b\xd1\xdd_\xa0\x14d\xd5\xbc\x03ys\xaa\xd3\xdf\xb0RR:\x92\x1e\xcbD\x87\xacVy\xfd\x8a\xe8\x11$\xa3&\x18MP,Y_H&\xdac\xf4\xc1\xbd'u\x92\xbe\xd3\xb0_\xb9N\xc7\xfb\x9d\x8c\xa7!7\x86\xa0\xf2\xaf\xf0\x000\x02\xe2\x9f\xe2\x10\x8e\xfdU#;P\x1cH[\x97^\xf5i\xa3\xb9\xe0\x072\xfd\x8f\xea\xd0\xd8\xe7#\x14?F\xf2\x1eLd<\x87%\n\xe3a_\xb2\xc0T\xa4Px\xb4\xb9\xdd\x96\x93\xf0P\xf6j\xc5 \xbb\xc23\xa03\x1c.\xb1\xe2\x0e\xb0)t\x0e\xdb\xef\xb0\xb2\x07\xbd\xf9f\xd9c\x0ft\xc3\xab\xe6\x94@\x8d/\xf1\x84\x81\xd4\x8c\x8f\xe7\xeeQ\xfaE\xaaZ>\x14\xa0P\x1b\xc9\xce\x98\x8c\x94\x9ea\x13\\\x19J\x08!\xb6lI\xed:#\x1f\xc8\xb7\x9b*%*\x98\xba\x85\x9f\xa0\xfba1\xeeY\x0c\xc0')gU=\xc4\xd3Uz\xb6\n\xf1\x91\xd36\x86\xe6\xfe\xb7\xcb\x14\x04L/\xc7X#e\xc9\x99k3\xec*,\xa4\xc6\x1e\xe8u\x9d@\x7f\x1c\xfb\x02\xf8\x91\x91\xa2\x12\x00\xb0l\x1e\x0e7Z\xe8V\xc3E\xed\xaa\x81UM6k\xda\x05\xc2\xacE\xb2\xcb\xc07\\\x8c\xc3\x15\xe3q\x1f\x0e\x10^\xbfS\xf4]K\xa1\x03[[\xc1\xa0!\xc6\x8a\xf6x\xb6\xb1^Ay3\xef\xad\xef\xaa\x82+\x0f\xf3\"\xe4\xa6\xc2\x8c8\xb1\x08\x12\xc7\xf7!\x08\xf4{\xf8\xc4\x1e\x04i\x87\xba)\xf4k\xcdLeG\x84\xeaX(\xc0\xcd\xe5\xa4A\xb2\xed+\x03.y\x9c\x06\x90\xd6|\x05\x8c\xe7\x86A\xae\x164\x91\x92N\xda\xc0\x8b\x88\x81\xe2\xe4\xb2#\x93o\xdaI\xebU\xe2\x80\xe3V\x9f\xf4\x87\xcfG>|\xf9\xa5\xd9\"\xe9{\xc5bo7\xa4\xbbe\x9d^c\x13\xb1\xc0\x01\xc6SR\x94\x95\xd7\xb05@\x82\xb2]*\x1bh\xeaPK\x86\xf2Y\xc9\r\xe8\x90s\xbd\xc4Zp]\x89\xcey\x9a\xb8\xfe\xefv\x16H\xaa\xaf\xa9GfE\x9bv'\x91Ma\x87\xcd\xe4\xc2\x00\x1e\x04is\xcf\x06Lp\xa4 \\\t-1]zS\xef\xe3\xad>\x0f\x08\xb4\xad\xed~\x1boL\xee\xe5\xe8\xb1\xda\xaa\x96\x1e`9\xcb\xb6\xd3\xfc\xe6\xe8w\xde\xceY\xda\xb0A\xe0o\x10\x061\x06\x99\xf5Q\xb3\x9b\xfaO\rB\x94\xab\x86p\xd0\tx\x96>\xd3\xc8w>\xd4)1\x87\xb8h\x98\xac\xd0\xaa\x8a(Z\xf5/\xff\xfa>\xa7\x8f\xed\xdc\x05\xc2\xed}\xd0\xea\xf3\x18{\xa1\xda\xb0v\x8d\xbe\xcd\xb2R\xee\x80\x19\x13\xaf\tI\xff\x8fo\xa6\x1e`\xcf\xe9$\xac\x042\xc7Ruu,\x0fs\xe0\xa2\xa7~\xf6f\x19A\x82\xea\x8bY\xb4\x8e\xf2\xab\xcca\xee\x9b\x97\xa4\xbbf\x12L\x80\xc5\x86\xfd\xba' \x0e\xfe\xde>\x0f=\xb3A\x94r\xb5\xe4\x0fDd\x7f\xb1\x8c=\xd6\xea\x9f+d\xb1\xd2\x0c1\x17fj\xf3\x18{\xa2\x02\x14\x8f\xb6\xf25\x97q,\x81\xf9Y]b\xa7A\xce\x067\xa7}5\x7fU\xf5\xaf\xb2h-\x87{\x97\xa4\xbbb\x9b\xfaJ\xf6\xb3\xc8m<\xd6\x93I\x8c=\xd0\xecl\x87W\x9aH\xf4\x9bV\xad\x98t\x91i\x16\xdfx?F\xf9\xa6\xa9\x99>1R\x87\xdd\x0e\xaf1\x85jI\x1f\xbfd(2\xf4\x97l\xb3\xab\xcca\xed\xb0\x00\xfe\xe7H?\xf0\xec\x972K!\xff\xc2\x14@C\xb7H\xc3\xedI\x8c$\x1ac\xa3\x92\xe4#9Q\x10\xf5\xf6\xa7Q\xe5\x80\x1a\xe0\xe0\xab$Q.#\x948\\\xb4\x9d+\xd7S\xebK%\xb4\x19.7\x85\xfb/\xc99`\x88\xb5\x8a\x1d\xe3\xe7@&W\x07=\xf0&\xcaJ\xeb\xa7[\x8c\x83\xbe$\xf0Cd\xd5\x9b\xad\xacu\x05\xf7UN\xe6\xe7\x8atT\x0f\xc0h\xa2,\x87V\xc5\xbf\x1aw\xd6\xbe\xe9!K\xb2h\x95\x08:\x04\xda\xea\x11\xdd\xcb0\xc8\xba\xc5{\xb0\xc6\x923\xfc\r\xec\xc5-,w\xae\xe1\x9f=\x98.\xc0a\x1c\xe3d?\x90\xa1U\xdf\xba\xc9n\xac)\x032\x85\\_\x18}\xc9{\xc6Q\xc9K\xae\x9e\xeb\x90\x8a^\x07t\xbe\xfd:\x9d\xc1\x8fhx\x92\xca\xd3\x82m\xeaW\x06\xb6\x08em@\xc8\x15\x10\x9f\x08-dz\x00\xc9\x05\t)\t\xc0\x96\xedF\xb3\x7fx|e\x00\x14\xff\xb7\x0bc\x05\x9bp\x018\x83\xff\x1a(\xd2\xb7\xb56\x95\x8ek\xf9^\xf5\x856L+\xcb\x1a8\xf8\xd7\x8e\x17|\xe7IDl\x83\xd8\xe8\xd9\xf4D\xad\x99\xae\xa3g\xc8\xe2<4S\ro1\xcc\xae\r\xcaBP\xc0\x16\x9c\x04\x16\xb8\xa8\xcf\xfd\xb47d\x9a\xb7\xbeH\xce\t\x0c\x15f\xd5a\x8a\xf4\xbar\xb2\xa2\x06x\xf1+\xf1`3=Ru}1<\xf4'Z\x06\xff7x\xaf[^\xef\xd7\x9c%v\xe0\x93E\x91\x7f\x13\x08\xd9\x83\x12\x1b@\x81\xfc\xac\x94\xfc\xa3\xfd\xd3s5L\xb0A$\xa1\x9f\x93\xfe\xad\xc0f\xd4\x90(\xbc\xec\x8c)P3&e2\x86\x10\rj\xbf\xdd\x84\x0bc\xfb9\xb3\x8e\xb8x(!\n\x0f\xeb\xd8\xf6$e:\x18\x84\x1cl(\xca\xf0*\xd1\x08Vc\x04\x15\x95\xa9N\x1e0\xcd\xd7Z>\xd4\xae?\xb3\xa4\xde\xb0\x9b\xf7\x18w\x9a\xbb\xf6\xc2^\x9e\xba\xf3UL\x9f\n`\xa7\xc2\xbd\x0e\xb1\x91mE\x81\xaf\xd0Z\xb7\xd17\xb9\xd0^\xd0\xf2\xa2\xcb\xda\xe3\xce\xc03\xb8A\"[\x1f\x13>\x973\xf2\xa2\x1b\xf2\xbd<\x0e\x12\xdf\x8c\xcfI<\x1f\xad\xd2\xf4\x9e\xc6\x08\x89\xa8\xef\xd4\x1b\xa4\xdef?\xe7J\xb5lg|L\x1d\x92\x95\xa0\xfeC\x0e\xebr\xfc;\xd6g\x89\x94L\xa4b\xb1\xfd\xf7\xe3b\xa7\x95\x16[\x9f\x83*\x9c\xf2a'\xa2\xb1_S\x81\xe4|\x9b\xd79N)k\xa87\x1f\xbf\x9b\xa3\xb9C&\xd9\x1b\xc92\xd0\x9ba\xacv\x99\xab\x0c^\x01\r\xd7\xf3\xee0\x04\xbb\xbaO\x0f\x06\x82\xe82o\xd3\x1d\xbe1ON\xc8\x00\xa8M\xca\x0c\xe45f\x99\xb4\x19\xc1\xff\xfb\x9b,\x1c\xdfJ\xd6n.3l\xb6&\x9aN\xce%\x87\x9f\xd2 H\xa0k\xc8O\x120\xaa\x03W\xb3\xfa\xb8J\x19T\xad\nr\xa8\xb7\xe1\xecz0X\x05\xe2*c\xd6\xbf\xa8\x1f\x00d\xb9s\xe0\x81\xbe\x929\xc8\\\x9c\xd0\x95\xab\xd1\x86\xbaG\x10V@\x08\\Z\xbd'\xd0[%\x12M\xb0EN4\xae|<\x10\x9b\x9e\x87~\x94\xd0\xddC\r\xdajK\xc3\x16.\x88qa\xb6\x93\xba\xe1VbA\xbc\xa9\xbaofYb\xe6r\xcd\x93\xf3\xfd\xd8\xb7,C\x94i\x88\xe3PAk\x98\xa6\xd2\x1b\xd8\x0em}\xb8\xa4\xa4\xf7\xdb\x0c}\xe6\x00\t$u\x91yt%\xa59W\xd4\xe8\xa46\xc5\xc5\xacr^1\xaeEY\xca\xab\x90Z\xd2\xe8\xe0\xb2\xa3O\xc5\xdbpR3\x98\xec\xff\xdeOi\xd9f\xf7g\xca\xe1(J%\xd4\xc3\xe2bX\xbaB\x15\x10\x0b\xc7\xb1\x94\x87\xa7\x91\xcb\xdc\x8f>\x8fH\xd9@E&\xb7:_\xe6\xdd\xc0F\xce\xf5\xe1\xc1oI\xd4\x06\xf8\x04\xb6\x15\x94\x08\xbf\xa6C\xc73d\xc5\x13\xbf\x00\xae&\xf1%\xcd\xec\x1d\xd1\xf3jm+AK\xee\x93\xdb[\x8c %BD\x1e\xdd\x0c\x1d\x18\x84\xdeNpVp\xd1/r\x00\x0f\t\xd5\x05\x17\xa60r\xf6\xc4\x1e\xa8E\x1a\x91\xf6\x18`\x0b\xf7~\x8c\x1f-\xa4?\x12\xc1\xd29w\xd1fj\xac&\xfa\x8e\x1e\x06\xac%\xe8}\x8b\x14tjq\xfd\xecC\x07\xdc\x0e\xb2\xfd2B#\x0e\x00y\x0ex\xb3B\x96\x0c9\xea9\r\xef\x9f-\xe1\xcd\xd5\xea\xf1\rz)\xc3\x1a\x8bM\x11%\xa8\x8d\x90\xd8\x18o\xa3\xc8i/\xc9pbi\xc4\x81|8\xb3\xa8\xcc_\x06+\xe3\xde\xae\xa3b\xfa\x9f\xa0]o>\x0e\xb3\xf3\xa9\x86C\xcf\rT-\xa8i\x95_\x92\xec\xc3\xcf\xf3\xefg\xb1N^\xcfp'HL\xfb\xed]Z\x87\xd50\xfav\xf9\x85Bv\x05\xabD\x1a\\\xb6Q\t\x7f\xb4q\xc0\x95T\x1f0P\x92;\x08T\xe6\x11g\xf3\xd4f\xde\xb0\xb8\x92\xd1zE6\x12\x9b\xf1\xbc\xf6\xe1W\x9e\\7\xc6c\x93\x14O\xbbs\x04\xb5\xe5\xebX\xe0\xd0\x06\xca\x97\xe3\x1aT\xa0EP\xb9b7\x94K\x99\xec\x11\x93\x8b\xef \xfb<\x940\x02\x96\x00\x80'\xa8h\x11\xc7an\xa5?\xbd\xc0\xaf2\xd7\n\xb6L\xb0<\x1a\xad\xcc\xf6o\xaa\xf7\x039xw\xbe\x0bd\xef\xa4es\xd6\xd0\xdf\xac\x13\xcc\xe3IsM\xa1N\xb2\x94\xb7\x18fw\x07\x0eF\x87\x91\x80\x00\x08\xfd\x1f\xd6w\x9f\xc0\xfeVf\x03\xca\xb5\xfd\x82\\\xb0\xdc\xf9\x1d\x87PNd\xcd\xac\x95\xb5\x880\xd9\xdb\xd0\xb6Q\x90\x11\x05\xe0C\x9asq\x88\xcb\x93E\xa3k~\xc9\xe9\xb9\r*\xac\x93\xf0+9\xef\xbe\x04\xef\xa3\xdb.\x150\x9d\x80c\xcb\x01\xdd\x93\xa3-\xed\xa2\xf5AL\xbc\xbe\xd2\x93g\xc1\x84\x80\xdf\xc1\x1f\xa9\x95]\x81\xdc\x94!\x05\x06{\x9b\x9b\x19\xd1nE\xb9\xadq~\xaa\xf6\xb3\x00<+;\xbbs\x06\xddr\xedtDY\xa9\x86\xe6\x0f\x88\xdfak\xe3t>1\xdd\x97F\xd5-o\xd4V\xd2t\x05\xa1\x10\xf2\xe8\x02:\x01\x00\xb4\x94\x8f\xae!\xdb\xcf`\xae:\xd2\xa5tU\xacBo]%;\xf9\x14\xc8hJ\xf4\x18/`\x14H\x82\x98T\x0c)lH<\x12bP\x94\xeb\x83\x0b\xc7\x92$Qi.\xc4\x0b\xe6\x1a\xb0C\x11:\xabs\x89{\xf5\xd8\xf4\x8d\xb6\xfe\x0e=\x977\xb4[\x9er)R\xea\x1f\xdc+0\xf1\xf6r\x90i\xb7\x83\xde\x17)u\x9cz\xcb<\xeb\xe6<\x81`\xd8Z\x8fq9\tb\x93(y\x13\x8f\xcf\x16\xd5\xb3.H\x0c\x1f\xd4\"\xc2\x9eo\xca\xda$\xba\x97\x0f\xc9\xeaP\xe2\x00I\x08\xe2\xe6D\x92]\x8c\xaa\x19\xc0U\x99\xb4\xef\xf5\xad\xa2 k\x08\xad\xa6W-\xbdc\xeb\xef\x07\x1d\xebx\x11IZbC\xf4\xe7j/\xe2\xca\xbc\x98F\x8b\xc6|\xcer\xd8\xab\xfa\xfc\"\xd5\xe3U;\x0e\x12So\xe5\xd1\x8c\x870?I+\x9c\x1a\xb8\xcb\xee\xd0\x99\xd2\x07\xcd\x1f!A\xc82,\xa9\x08=A\xf9\xa7\xa54/\xd3\xfa\xaa\xc2\x018:\x86\t\xec\xbc(\x0eR8\xdfn\n\xc2\xd8\x18\x80\x81[Nc\x9d\xe1\x98\xf1C\x80]\xa2\xd2mg!\xa8\xde\x8e\xe8\xb3B\x8c\xbf\xf0\xf1\xdb\xf8\xba\xe1\xd9S\xc1e\xee\x18\x97\xf4\xe16\xf6Y\xd6\xc7qT6\xef\xe1\xb2\xd6\xf2\"\xdd\xcf\xc6\xd4\xf0\x0bu\n\x1f\xe4\xf0\xd5\x08\xdf:\x10xnzj\xed07,\x054\xacD/\x1b\xabL\x159\xadH\xee4\x05\x84j\xed<8!\xca1\x1f\xff>z\xfc\xbcu\x05]\x12\xbb\x82\xf1\xbd\xcf<636\xabj@*\xe5C\x9a\xe8\xc3\x0f9h\x18\xa5\x18\xa8\x1b\xd8G:Pff\xa3e\x96\xc06\x15 \xa6\xef\x87'\x8f\xf2w:\xe1wm\xdf\x9ch\xe2z\xbfp8v\x9f\x8d\x9e\xc9r\xf5q\xdc!\x8f4\xdc\xb54E\xee\xf0\x01\xcc\xcb\xa2\x02~T\xfa\x9e\xf4\x88\xaf\x13)5]P9%cc%\xe6\xc6\xae\xc6\x011)f\xe92\x10\xfd\x85w\xd6\xe5t\xd8\xcb8\"\xb8C2\x8f\x86\xf6\x84o\x10\x7f\x87=\x8eo\x1d9\xcfj\x02x\r\xf4K\x9d\x9aAK|@3\xb5\x8d\xba\xc7\x97\nN\x0e\x7f-@ \xe1\xf2\xe4B  \\,mml\x8a7G\xe0s5\xcc\xbb\xfc\x93'\xd3\x8e\x03V\x86\xde\xfd\x9bb\xcc\x12\xec^\xdd\x07\x011P;\xc5\xab\x8d\xc6\x02\xb4\x10n\xfaJ\x07\xa3p\xb7\xfe\xabW#sgu\x04B\x8a\x17\xe42\xde\x1a\x870'\xbe<\x87\xae\xb9I6\x80\x02\xf4:\xcdeu\x07\xe1\x0f\t\x8f\xfeH+9\xff\x16%\xd4z,\x91Ce\xee\xd3w\xd3B\x02\xdc9L\xff\xd9N\xc7W\xf4\x9a\t\xa7:\x91\xf5\x9f\xc7\xc9e\t\xea\x90\x18\xfe\xb8-\x0c>\xd0\xa8|\xcd\xce1l\x81 \xe6l\x07{u\x03\x03\xa367\xcb\xcc\xa2\xc3\x1b\xc7>\x83\xae\x00\xa27[\xa5\x88\xb0f.]:\x91y6\xdd@P\x14\n\x03h\x07G0\xe3m\n+\x1dc\x9b1\xba=$\x84o\xa8\xe2\xcc\xf9\xac\x1c\xbc\x0b/@\xd9\x11\xe8\xf3\xe7\x8co)\">IC\xdap\xd0%\xce\xd4\xf9\xaeJ-v\x14\x8b\x81\x06\xb1V\xff\x1cE\xb8\tt\xb89\xe0\xb6\x178[\x00l\x89nmb\xf2zE \xee\xc7\xcd\xa3\x7f\xfe\xe6\x92\xc9Xq\xc7\x00}\xa2\xbf\x9c\x0b\xe3\xf0\x0e\x04\xc1\xf9$\xdc\xb6\xe5eq\xb9.~\xa2\x93\xe6\xeb\x8aA\xb8\x08\x83\x88\xa3\xac\xfb\xf8\x15\x9dU\xbaPV\x96\xa8\x88i%\xd5\xf4\x86s\x95\x08\xff\xcer\xb1\x0c\xd5N~4\xa2\xd7.\x95\x81)n\xc3\x9bU?\xcdA\xe6\xbf\x0b\xbc\x1fQ\xde\x88&\xb8\x03C\xeb3\xdf\x10\x11j\xa0\xde\xda0M|\\\xf1\xd4\xf0\"\xbcHew\xa9Qy\xc3,f\xbbZ\xd9\xde(\x9f\xe0\xa3]/\x86\xfa\x12=O\xf9\x11L\xad\x1b\xfdY\xf54\x0c\xff\xc0p\x9e\xe05K\xecV\xc1\xe2\xd3\xe3\x8e\xc1\xde\x88\xd8|\xfc\xba\x9bu,<I\x89S9\xe9\x92\x91\xc7\xb4\x97p\xc4\\\xca\x9eC\xd6\x9b\xab\xf1\xf24\x12\xbc3\x1cp=\xe3\xba\xbbJ\x19|\xd0\xfc\x16\xd4]\xefo!\x1c\x1e\x17Z\x00U\xb3i\xd8h\x10\xbb\x8b\x82\x8f',!\xb6_\x9a0\xb6\x16\xd5\xe9:2\x15\xc0\xb0\x12\xf5 ![#3\x8f\xd9\x07\x03\xad\x839\xac\x9cc\xf1\x9d8\x89\x01\xe4\xb6\xe1\xefI\xda\xa4-\xe9\x9e\xce\xaf\x7f\x0f\xff\x8f|=\xa9G\x87c\xc9S\xbf\x08\x7f\xd9\x02S%\xcb9\xcf\xb2\x02N\x01\xb2w\x8d\xf3\xcd$[H9\x81\x07,\r\xc4K\x96\xcb\x9f`\tnD\xc4V\x0cl\xa0\xb4r\xce\xc6U\xd7\xd9 \xf0\x9c\xa7\xdaK*h\xe7\xd9\x1d\x9e\xbc\x87j?A\xee\xe9\xb6Kr\x049\x1e\x7f\xe0&WFU\xa8+|\x0e]X\xc0$\xe29\xd3\x10\xf2\x82\xe9\xedI\xf9$m(3!\x7f\xac\x97\xb0cf\xb7\xf9\xbf2\xc6&\xac\xbf{U(\x9e\x88\x88=(\xefbUK\xa7\xe4\xebc\xda\x16\x8dV\x877\x05?\x94\x8b\x1f\x04\xfb\xe2\xd0&\x0c\xdd8\xf3:\xe6\x9a\x1f\xeb61\xb6\xd1\tx\xaf\x01\x1d\xe7\x0b\xfd\xc2\x89\xcd\x1f\x8f\xea\x8c\xfd\xb2\xf9\x99\xfd\xf8\xaa\xcd/\x97\x04\xb2\xd5\x98\x9dc\x06\xe0%w\xe7\x9d\xeaN\x08Q\xb7\x89\xd0E\xa8\xfdkyt\xe2\x82\xa6\x8bz6\xd5\x99'i\x1a\x90\xae\xc1\x98YXY\xd6\xb8+7\xe2)|\x0e G]\xd1U\x1a\xe0\xb3XF\xd9@A \xcd\xeb\x13\r\x98\xa4\xc6k\x19\xe4\xb8ex\x80\xc5\x113\xd6\x02\xb4\xcf\xdb\xf4\xdb\"w\x04\"-\xc9\xa9\xed#\xdf\xf5WJ~\xe9\xbd\xe0J\x05\x07\xa6Ca\xa5I\x90C\xdf\x15\xe8j\xe7\xf8\xd9'\x92\x12Bq\x86\x0bE&\x0c(\x8c\xfc\xa58\x17\xff\xa9F\xee\xeb\xc4.X\xfb\xba\xa5\x16\n\xd8\xd8\t]M\xb5q\x80|\xc0\xdbOd\xd5\xfa\xc2m\x9a\xa5\"\x13:\x06J\xe7\x1a\x94\xc3\x03(U\x99\x1bHX\x02\xc5*\xa3\xfa\xf3\xde\xb5I\xc4\x1f@\xa6\xc7\x1b@<\xc2\x8a\xc5\x04lcm\xdd\x03:\xe0\xc8\xf0i\x1d$\x83\xd8\x9f\xda>\xe5\xe5!\xe6\x8d\xcb\x85\xa0\xfe\xeb\x04t.aB\xaaK%\xaa\x1c\xa0\x9ak\x83\x1fa7\xc1J\xed\xb4)\xdf\x9b\xd73\x86\xf3\xb1\x1c\xcf\x08O\x81[:'\x8c\xccw&\xfc:\xa1x\xe4\xff\x81\x8e\xc4y\x07q\xfb\x15\x0f\xd2\x96=\x14\xe6C\xab\x98\xb2r\x1e\x98%O\xado7o\xeb\xff\x85\rE\x9f\xba\x8c\x07C\xa4\xd0\x9b\x8f\xaaTx\x96\x8b\xe20\xe3\xca\x08\xf4?\x14D\x0b-\xab\x99\x8a\xcf\x9f\x1b\x12\xe3\xd8\x92\xe5I\x7f \x17f\x91\x9c\xb4\xd7\xedd\x98\x8c\xad\xf6\xd5q\xb2K\x86\xde?\x1c\xf2=\x02W\xb0)\xb7k\x9e\x04>}\xd5E\xeb\xd30q\xad\xf7H\x9dP\xd6g\xd5 \x0b\xd6\x11\xf7qAg\xc0\x84mG\x9e'\xac(\x9f\xec\x0c\xe7\xd4:\x1b\x1c\x04\x81s\xd3\xe9\xde@\xd6/-\xa2\xacp`1e\x84=\x93\x906\x89\xd3\xb9\xdf\xbb\x94\xb5\xf4\xc4\x1f\x14b\xfd\xfbF\xdc<.\x87\x9a\xabg\xb6{/\xac\xa2\x87j\xb9\xec\xdaT\xfe\xb6\x90IF\xce\xff\xcb\xb6\xc9K\xf8q`\xf1_\xd3\x97v\xa9~\x13\x99\x1d\x0f\x8a\xb2\x95\x95\xf6q\xef\x90),\xa3\xf9s\xf5\x14\xf4\xd4u\xd1\x92i\xcc\x9fV8'\xc4c\xb5a\xf8\x9a\xa2\xb7\xf6^\x88iZ\xa9'Q2\xeem5\xd6\xd3\xf1\x89@Q\tJh9\n|\x0c\xd1\xd6\xa9 wj\xc3\x98RF\xfb\xe1,|\xc9O\xb1\xd3\xde\t\xf3\x8d\xc3\xa5\x9b\xba7\xfb\x1e\xc5\xea\xd4\x9fw\r\xdf\xc5\x85\x83\x9b\xf4\x9a\x87\xbbU\xb7M\xaf\x955\xe2\x13\xf0\x16\n\xb4\r\xc4\xd5\xee\xf8\xd4\xeb\x99\x7f\x81\n=\xf2\xb5\x0f\x81\x80\x16\xb8\x97\xbe\x07\x86H\x1a\xf4']T\xbe T\x15\x9e\xbcj'\x7f\xf3q\xba\x90\xd1?\xb0\\_\xf9\x0b\x17\x19\xe0`\x02\x7f\xe5\x01\\\x13\x06\xa4\xbd\x9a\xcc\x9e\xe2Q#y\x80p1\xd9\xbe\xc0\x93\xb0\xf9\x8d\x1e@b\xef\xe7\xaa\x85\x89s\xafPHP\xee\x93\x15\xfe{n-\xa2[s+\xa9\x1a\xd7:s\xf3\xb2\xf7\xd4\xa1%\n\x8c\xc4\x1f\xaczf@\xfc\x8e\xe6\xed\x7f\x06\xc5\x99\xe8:\xde'A\xd5\tL\xa4\x1bL\x95\xf79G\xf7\x12=\x85\xa1W+aanQ\xc5\xa8}-\x18\xa2FF4\xb0\xc2\xed6\xc9BD\xb5pU/o9\x054\xc8\xfe\xa3\\Z6o\xa8\xb7yC\xfb\x1f-e\xfa0\x13&3<sD\xcb\t\xd1\x97ZZ8*\xd6\n\x8f\xf1\x0c\x8a\xe0\"7\r\n \xbd\x16\xbf\x83\x90\xb8MB{ t\x0c?\xad\xcb^\x0b\xfa\xfe\x86\x87\xe63\xcb\xf7\xef~\x04\xcb\x02+=\x05+\xf16\xff(\xcecM\xb26\xe2]\xbf\xa0\xd2\xea\xfd\xff\xcf\xc3k\x99F\x07|\xdfH\x04\xddq\xea\x97\xa3_\xf4\xf5n\xf7\x1a\xc9\x91LY\xc0\x0c\x7f\xc6t\xcd\xa7%I\xe4\xe0\xb9>Y\xfc\x9c\x9e\x8a=\x04\xe8\xa50X\xae\x16=\r\xb0\xaa\xc3\x1b\xf9\xf28h2Fd\xe7\xcb\xb2Y\xb3Q\x11\x90#\xa1\x85\x0c\xf9lJ\x89b`\x14\x13\x92\xa3L*\x8b\xc2'{\x98\x1f\xb0\xacN9s@\xf9y7\x96\xbf\x15\x85\xb5\x01~}-t\xd3\xaf\x95Vm&\xfed7\x14\xf5X\xddo\t\xc6S\xe8\xb7\xc1\xc1\x82h\xe1Z+\x9e\x1ep\xfe\xcf*;/`@\xa3\xbf\xa9=T\xbb\xce\x12\xe07{\xbc\x13\xaf\xfa\xc1@\xcd\x05w\xb5\xf3\xc6\xda\"66z\xc3\xb5S\xd6\x07\xcd\x01\xa7\x99\xa3<f\x02d\xf7\x8d?\xe5&9t\xd7\xe7\xdeEV\xea\xc8\xa3h\xa6kL\x00#u\x1eg&\xa2\xd5;\x18\x11I\xa6\x84s}\xb0a\x96\xf8\x13P9\x8a\xd2a\xd1\x81\xe2\xbe\xa7J\xf9\x9c\xccL\x9e\xca^?@\xa9MG\x87\xf0\xb0\x10\x0b\x80\xab\xb7\xc2J2n\to\xbe\xd0\x13f!\xe5\xc0\xdc\x17\xc9\xccXD98<W\x04n\xf3M*@\xbd\xf3c\r\x7f\xe0\xc9]\t\xc4f\x87\x13P\xb2\xe5\xde\xa3w\x8do3\x04V$\xdc\xdc\x0c\xee\xf95\xd2\xa4\x08Q\xa9\x005\xf5\xd7H\xe6C\xae\xc6\x13Kf\xb1\x0c\x0c\x06d\xb5\x0b\xbb\xf9G~L\xd3e1\xf7OQ\xf3\xc5\xba\x8f\x8d\x9b\x99\xd6\x97\n\xa9\xa2\xf58+\x02\"\xc8U\xd0\xe0_w\x10\xa38\xd3\xd1\xc7#yrn\x86?\xf6\xb1\x187\xae\x87@V.\x8e\xfd\xafMRz\x90\n\x0c]\xd60\xc3\x10&Q%Na\x81\xcf~$\xdd\xfe\x06R]\xb4\x9dJ~\x06\xae5\x1e\xcahz\x18\xfa\x06\x05\x9a\x81\x92\\(\xfa,\xdfC\xa5\x9d\xe8A\x04\x87\x82\xc8h\x97\xfa\xe1\xc2J\x84\n\xb3\x1a0\x82\xba:\xe1\x04\n\xa1\xb4\x880\xdd\xab\xaa#\\\tX\x7f9\xf9<\xd8bp\xb7\xc7>y\xa8\x1f\xd6\xe2\x9c\x92\x1bB\xf6=\xa9r+\x83\x10\xfe\xba\xfb\xe0\xcf\xa4\xb4\xd9b#\x02\xb8\t\xc3\xc8\x8f\xd2\x11\x8b\x1c\x92wg\xf8\x1fv\xbc(\xc0\x8d\x8f\xe4\xf4\xb2t\xdf\xc3\xb9-\xc0\n\xbag\x1e\x89\x05\x98\x01\x0f:\xa93\xef\xaa\x92\xf7\xe4o\xd7.\x00\n\x88\xb9AnaV2g\x8brG\xa2\xac\x9b\xbe\x94\x1c1=\x06\xba7\xec\x9c\xdaI\xfb\xf8\xef\xa0\xb7-\xe6\x11y\xf5\xe4\xf4t0\xa8]\xc1K\xaf\xcc?\xff\x13\xf7\x94\xfe2\x05\xef;\xdd\x1f\xf6p\x90A\x81\xb6\xfb\xf8\xe5\xff\xe8\x1b\xb2\xd8\x0f3\xd4\x1e\xdcDQI\xc3 \x89\xd3&\x18\xa6 \x12\xcd\xc9\x16c\x0e\xd4;E\x89&\x9a\xfa\xe6Q\xab\x16\x9e\x8c=\xaa\x9c\xf9\x05\x90\xa3\xb5#\x829\xc4\x80\x85D\x86dF\xb1\x8a\x93\xf8v\x12\xfd\xf4\xa98!\xfe\x98\x93\x90w\x844\xa68,9\x1731\x8eI\xa2+\x81|\nC\xf9\x14\xca\xect\x95\xc1`\x8e;\xc9q\x81Jc\xd8kD\xae\xe5\x88T\xa0,\xa2L\x1bO\x03\x84\x00\x1b,\x92c\x86\x19h\xe7\x18=\xd1\xb02{;\xc5\xa2)[\x8f\xca \x978P\xf3\x98\xb9\xe4$h\xad\x00\xd5\n~g\xdcD\x9e\xaeX\xd7\x1c\xd8\x9e\n\xfb\xafK\xef\xa7\x1f2\x18q\xe4\xcd)s\xa7\xcb\xb3\xc5\xecCt\x0c;\xb7\x87\xb2V\x87\xc78\xf6\x1dP\x84\xb8\xd4\x88\xb2\xf0S\x16.\x08\x1ee^\xf6\xd6\x00\xd9I&\xc5\"}\xaf%\xaf\x9a\r\x86\x0f]g\xc8\xdb#\xde\x87Oy\x10\x97:\xa0f\xfc\xe7\\\x8c\xab)\xb1_J\xfd^\x7f\xd74\x8fXN\x08\xbc\xd0\x9fIb\\\xa4\xfa\x8d\"u\x03\x82\xc6E\x17\xfc\x18h\xb0\xe1\xd9W\xe2\x14\x15\xf4\xf4\xb8\x95\xa1\xeb\x8b\xe1&\xe2K3\xe5\x17\xe2J\x81\x19\x8f\x08\x92\x83\xd4\xfb\xaa<\xb99\x9c\xf94ec{\xaa\xeb\x9b\xd0b\x95oj\x03\x17\x99\xd4Q\xf83]\xb2\xb8\xe3@\x99DU\xd8\xd4\xb2\xe7\x05\xec\xd1\xb9\x0c\x03\xe3o\x16D\xd84\xe7\x02q\x9d\x10\xb4\xcd[\x9d\xc3\xea\xc0b\n\xe7<\x196`#\xe5\x18\x89\xf5\xb3K\xf3\x02\xdc\xac\xdf\xea_R\xeb%\"9i\x85\x1cT\xden\xc7\xc2]\xe5R\x0e\xa3\xbe\xa2\x85\xe0&\xdf@\x02\xbf\xa5\x0f\xce\xbf\xff\xb9Rp\x88\xc8\x13K\x8d\x87\xcc\xcef\xa5\xf2\xec\xf8\xbb~\xe3bG\xcf\xc5\x8dw-\xa8\x0ec!k\x1d\xec_\xc5\xc1w\xb2\xd8dn\xf9\x14i\xc2<_\xc2O\xf9\xb4M\x1a\xe5r\x13e\xd0\x8d0\xd5\xc6p$\x02ck$a\xc0GYe\x91\xaf\x12%\xd6N\x14\xecv0\x80zu\xb5\"`\xa4\xe6\x0e\x1f\xa8S\x02\\\x80\xfd\xac2\x05?$D\x9f\"\xe3\xfd\xaf\x81\x8e\xa7\x80g\xbcj\x02\xf5\xf1m%p\xf1R+EIt\xf9w\x0bc\x1aP\xf1_\xd2\xd3\x8a\xb7\x16yz$\x00\xbed;\x83\x85Rkx\xae\xaa\x07\xa7\xdb\x93\xe9^\xfa\t\xcd\xa6\xe3\xb0h\xeeyN#z\xef\xe0z\xf4\xe8\x8d\xfdQ\x012>\x9cEdtA\xce\xef\x1csx\x01\x12\x82\x95\xb0\x96\x8b\r|\"\x0f\xd2\xc6\xae\xd4\x1fp?G\x8c\xf81\x93\x9e\x14\xf5\x9f\xee\xaf\xc8'\x8ez[\\7\x9f'\xee\x98m\xba\xe2\xe1\xb9>\x874'\xf9R\x92\x7f\xb7dF\xfe\x9f\xa5\xfa*\xf4\xb4\xde0\xb91r\xf7\xee\x84\x88:\r\xe7\xbf\x81\x02\x99\xa1' \xe5s\xca\xf6%\xa2\xf0P^Q/%\x84\xa9\x7f `\t\xd5\xb0\x0e\xba\xf8K\xec\xed\xb1\xae\xfc\xa3\xcd\x1e\x86\xa5\x04\x18(\xf7A\xed<\x00@e\xa0\xa8\xa5={\xb4\xfd\x97\xf3D\x83\x1b\x8e\xc7:a\x9c\xff=\xe9\xa8\x9a\x8c3\xbc\xa7\xa9\xb4\xa1@\xe6\x04\xa0\x81FA\xd1b\xc0&'\xa2\xd0\x86mZM\xa9btX3\xa3\xea\x16K\x85\xe0\xf0\x02S\x8aK\x9b\xd3e2\xd2\xfd\xdc*_\xa5\xcbP\x98@\xfd\r\xfbw\x99\xe5\xbe\xc3\x93\x806\xe8i\x9a\x02\x0f\x93X\x8b\xd0\x89\xf3\xd8\xf09\xa3(eF\xf6\xa1\x83\x80OT\x14\xbc\x1e/\xa4k\x1bE0@\x1a\x87m\xd8\xe3^\x90\x8c\x97t\xd87L\xea\x1c\xfe\xac\xca\xef\xd61=S8\x94\xc5$\x96E\xcbv8\x86\xd7\xd0\x82,\x19wd\xf6\x05\xf5\n\x1c\xd2\xdet\xd0\xf1\xfa\xd4*\x8f\xddw\x91m\xc0+\x1f\xf6\xb3\x98\xf4i!\xf7\x0b]\xc2\xb6\xcf\x08\xa57\x962\xeb\xfa\xf7,N\xc55\xe9\xa5o\x7fh\xd8|\x1a\x19\x9d[\x1d\x8c\xe7\x04\xfd\xa1O\xfd\xbf\xd3\xe9\x8b$\xfc\xeb\xa7'\xaf\xc9\xc9\xb2\x01\xb2\xdf\x9b\xbd\x86\xac\x1b\x7f/\xa4h\xb9\x81\xe0\xaf\x0b\xab\x8b\xa3\xd9\xe4\x15\x15\xc2\xec\xfb^|\xa9\xc0m\xf6F\x98}l\xfc\xc6\x12\xbdG7|\xf1\xbe\x92;\xea\xeb\x7f9\xf1J\xe6\x16\xf7\xd5\xe1\xd5\x17\xa1\t\xfd\xf5\xd7\xcf#!\xcb\xcc\x84\x8d\x034\xce\xf4\xea\x8f\xffU\xb0\xe7T\xa7\xfaqK\x9as\x1f\x1f\xb3\xa5\x8clL5\\;ZL}\xa5\xb6\x86\\\xad\x0c\xc0/\xc1BvmT\xd8b\xc5SX2\xfaD*\xb0\x05\x0bRq\xf7\xdb\x9a\x8d\xf5\x93V\x11\x8c\"\xe4\x9a>3$\x16\xb9\x8d\xc6\x90\xeeKK\x02\x8c\x199\xf8\xafI_N\xa7P\xbd\xf6Y\xf4R\xcb#+\x18\xa8\xf56;B\xe9^\xe7\xc2Tg\x85\xb6\xfc\xc7@\xf2\xe1\xd6\xe9\x9b\xfb\xfc\xaf\xabZ\r\x8a\xa4\x82\x9f\xd3\x1e:\xe2\x07&\xee\x85\xc2\x96\xef\xa9m\xa9\xb6\x8b\xb7Y\xcbn\xac\xceS\xb8\xa0\x97\x9d\x041\x8c\xc3\x83y\xd0K\x83\xa0Z\xfb\xf8y\x9c\xf7\x0b\x02\x1a\x81\x9a\n^Z\xfa\xa5\xae\xf2\xc2q\x0e\x03\xdb,\x18\xc2U\xae\x0c\x86\xf2\xbd\xda\xd0{v\xc5\xc5/\xf4\x9d\xad0L\xb1;d\x8f\xa6\x82c\x8b\xabF,\x91o\x7f\xd9b\x9cp\xc1\x14\xa4'\xfc!\xb3\xbd\xc9\xc1\x8a`WR=\xdb\xf2%\xa9\xc3\xa0\x98\xbcK\xc3\x1d\x91h\x0f\x12)W0U%\x8dk0\x8cb\x14\xc4\xc0+Q.\x8a\xcbk\xab\xcc\xa1\x00\xa9/\xdb\t\xf8\x01#C#V=t\xb8\x8c\xd1pMp\xe4\xa2\xd395y\xf8\r\xf0\x06\x84[5\t9\xf0oy*\xd1_b\x90\xcb\x86\xc2\x84\xdbH\x0c\xe9%{\x8c\xa9\xdes\x9f\xf1\xbcY\xb3=\xb4|\x19\x1a*\x08`6\x03Uh\xccG\x91cx\x01\xad\x8a\xb1\xf0gX\x92\xa9\x8e\xa00\x98%)k\x86\xa1Y\xf1\x96-\x86;Qh\x838\x80\x180\x88\x1b+&\x7fK\x1a\x15\x9e\x90)\x8cI\x93\x06P^\xc2\x9e\x86<\x87(\\\xc9\x96\x84y\xd4\x13\xf4\x8f\x87\xfe\x9a\xaf\x88\x8c\x15\xea$\xf7\x91\xbb\xd7\xec5u,\x07\xab\n\xe1\xcb\x0b\xeb\xc3\xc6\x87*L`\xdd\x10\x11C\x82\x0c\r\xba\xec\x17\xa2\xda\xddC\x8d;\xcd\x88\xbd\x07;Y\x10\x06\xfafoX\r\xa7v\xe2\x7frP\xda\xe8\x9b\xf8\x1b\xe1MW\x88\xea2Q\xe9\x0e\xd9;\xfd\xe7u\x86\xa6b[$\x9a7\\\xd6\xd6w_*K\xd4\xcb\xe2n\x15\n\x05\xc9\xa61\xfcd\x15'\xd5\xc6\xff\x94\rw$\xc7P\t\xd15\xe9\x90\x85\x1e\xdd\x85\xaa\xba9\xe8\x84l\xcd\x03s\x19o\xa5'[H\xb42\xa1\x98\xa8\x04Z\x7f?=\t\x1f;\x97\xf9\xb9#\xc3d+\x84\x85\xa2\xad\xf7\xb5\xdd\x8b\xf1\xcd\xcc\x81$\xc4\x12\xb09+#\x8dI\xb1\xd7)~\xc0u\xc7\x92*\xf4k\xfd[B\xad\x0c\x83\xc6^\xdd\xefK\xe9yx\xf8f\x1c4\xe4\xd3\xc7\x82\xc1.'C\x0b\xcd|\xa6.\xa0<(/\xe6(\xe6\xd6e#\x9f\x18\xe1$.nLS\x16\xe3\xa7\x8cBki)#\x13\x97r\xf4pv\xbb\xfd\xa2\xb5g\xa0;_\x87l'1\x80\xbfW\xa7\xa1\xc0\xd2\x9a\x18\xe9r\xe3/\x06\x1e\xb9\xd1a\xfa\x1cNO\xc3o\xc1N\xea\xfd\x9c@I\xe9\xbd\xe0%!9+#\xa3\x15$\x7f \x00\xd0l\x01\xe6\xfa\xa1\xb9\xdd\xfc\xb6\xc4\xec\xef\xfae\x18\xc4\xea\xcc\xe8\x00\x8cl\x06\x13\x03qD\x06\x85\xfe\xd3\xab\xbbT\rAmC\xfe\xda<\xfd\x8b\xe88\xd1\x98\x13\x08$\xbb\x17\x18\r\xc8O\xe9Ys{\xf0\xe6\xd8\x01\xa2C\x01T\x8e\xae&\xdb\xbb\x19\\ex\xa6\xafL\xe3x\x94\xcau\xc3\xaeu\x0b)\x1c\x90\x87\xcf\xbd\xfe\x05\xd9\"\xa3\xa2\x87L\xbb\xd0\xac\x82\x08\"\x8c\xea\xdb\x90\xb8L\x8c\x10\x83\t\xea\x9e2K\xad{\x13\x87\xee\xe6\x1a\xea\n\xdc\xad\xa6\xde\\\xef:q:tU\xfd.$\xff\xc9Tn\x1a\x94\x14\x9d\xeeOYJ\xdd#\x8b\xfb\"\xb2\xadAJ\xd1)\xd4}\xf5c\xcf[\x99w\xfb\xc0\xeeV\x10\x8a0d\x84zpy\xff\xb7\xdc\xe3\x04\x7f\x02\x95j\r\x01\xd3u\xea\xa7\xb2\xbe$mj\xd0\xdd\xc0I\x18&9\x17\xd6\xcf\xb2\xcegL\x89Y\x82\xdc_`J\x0c]\x8bz=D\x8e\xb6fY\xea$\xc2\xbf\x98%m\x87\xd8\x1b\xcfN\xbeG\xbb\xa0\x8e\xef\x08\xe1\x19\xf0. \xf4\xc3\xcc\xf1\xabFa\xc0\x91M\xcc\x17\x8b\xe0D\x95\xcf\xe9>\x9a\x07)\x03_\xe0\x92\x00m\xae\xc8D\xcclG\xf8\xc7\xa9\xb9O87\x84%\x07\x8ff\xb7\x98\x13)\x8577\x1f\xf9\x9d\x86\xed=o\xb1\x9e\xdc\x15\xf5\x194=\x90\xc4\xe7\x1a\xd4\x84\x03\xb4\xc0{}\xa4 N\xe8\x1bg\xd1`B\xa5.\x84?x^\x17\xe3:\xec7\xd3\x1c\\=\xfb\xfd\xff\xab\x11\x19$\xd0C\xba\xb3\xfdVR\xb6\xfa\xd5\xe7Y\x92'\xeb\xd2;\xe525\r\x9a}\xb9q\xbdU\xfaI\xd9\xf5\xa9A-\xb3N\x84\x9c\x88\xa1~\xbbu\"\xb4Q\xad&+e\x1ff\xa2\xbc\xf1\xa6\xcev\xfds\x97q\x9aR\x94-=\xfb7:\xc5 \xcdf\ra\xa3\xd1\xce\x9b\xe6\xce\xc7\x99f\xe2<\xe0\x1cK\x89\x9b\x0b\xbeQ\x95\x93\x9dX\x1c\xf1\xe1\x86\xe0\xa5\xb1$\x8b]\x94b\xa9\x98\x00\x17\xedt\xf8\x11\x8c\x80\xbee\x8b\x88\xf5\x1c\xdc\x83\x94.\xe8\xb9\x94_F,v\x8a\x136\x06\xa1\x13S\x19\x0f=\x9d\xd6*\x87\x18\xfe\t.\xa3\xaa\x95\xa9\x14\xdb9\xa8\xd6\xc7\xceiw\nc\xbf\x8a$\\\x9c\x04\xfc*\xc5\xec\x9e\x0e\x90\\d6\x97L\xf8\x95\x05\xd9\x95}\x89%\x8c4\xb3\xbe\x9a\xc3\x0c\xda\x85\xd2\xe5\xfb\xe4\xcf\xfb\xbb8L\xf2\x97lx\xf0;\x99\x16\xfb\xe7tA\x9a\x1b\xd9\xd7\xe7\xc7\xc8\x18U\rW\xb3*\xe4\xa9\xfd\x1a,\x16\xf4B\xec\xd7r\x85\xae]+\x88\x0f`q)\x81\xb2\xd9\x97\xca\xf4Z\x1e>B\xa2\x91P\xc2%\x7f\x1c\xba\xaexs\xe6\x8d\x85\x9c\x02\x88p\xc6\xfd\x1c\xd5\xd4\xa3\xda\x83\xcf\x95Y\x8a[\xdd8\xd8\x05\xb5\x89\x88A\xfb\xd8\x04=\xc6\xc7<{\xb3\xa8%n\xaf\x0b{S\xb4,?\xfa\xaf\xd5\xae\xf2\x90\xb1\xad\x0c@\xb4w\x13&iU/\x01J3\xdc\xba\xab\xe4G\x8dQ\xcaR\xec_\xd97\x92\xdfG\x930`\xdeKj\xb5\xb4\x98c\x0c\x15_m\xab\x9e\xa2_\x83o\xad\xdfL\xac\xee\x7f\\\x08\xe5\t\x03\xdd`\xa6w\xb2\xd0\xac@\xd9l\x8f\x83\xc6\xa5\x1b\t\"\xfd\xc0\xb3\xe5g{\xed\xa5\x19Y\x07C\xeaG\xfd3\xee\x95\x9cja\xef^\x17&\xc7C\xe3\x8d\xd3n\xe2\r\xc8`3\x03I\xf2\xf7\x92[\xb6\xb6\xba\xfa\xdd\x1e\x1d\x9f\xe4\xd1\x85\xe3\x03\x05\x92\xa9\xc9\x18\xf65\xcd\xe9\xa9lc\xdfIS\x8az\x98$?[\\^\x96\xf6R\xffD\xef8\xa2\xceGP\nXq\x8c\xe1_\xb7\xe1\x8c\xc5\x02\x03T\x84\xb0\xe76'\x01>\xfc\xf5x\xca\xe3\xbe\x87)^\x1d\xcb\x9fb@\xdfl\xc0k\xd5\xeeM\xf7S'\xac\xc0\xb32\x05o\xe5Kp\xa7#Y\xc1]\xfay\x83\xe0\x07\x8ai\x17\x98\x18AA\x08\xbb\x02ca\xa6\xe1Y>B\xec%\x00H\x96\xd1\x9f&\xc8\xf0\xfdq\xb3\xf7\x01\xec\x85\xc1t\x1c\xa2\x05Gg\xe9>\x9eW h\x1a5\xc7\xe2}FL\xd0\x13\x8d\xa7\xb7\x82\x13\xa1\xf5\xba\x1f\xf8\xf4\x0b\x05(\xedV^$\x1cRq\xbb\xc4+\xaf\xb0mf'\x87LU}\xe1N]`\xd9[\xfe\xf9\xf4\xa1\xdbd\xe4\xe4\xaf\xb1\x88|\x85yZ\x85An\xf9\xd4\x07w\x01\xf1\x1b\x80}\x14\x12\xe9\xdb\x00~\xe3\x91\x82\x85]\xee\xdea\xc05\xa5\x15\x9a\x90)\xef\x90$\x15\x87\xa7O\xe4?\xb0\x81\xe5\xd4a\x86\x12\xee\xf8e\x08;\xd2\x9fg\xa3\x05\xd0\xa1\xe4\xc8\x07\xe0\xeb\xbc*>\xe9\xdc\xb7\xa1\xd9\xf0\xbe\xe7\x8e\xe1\xf0z\xbbH:\x12\x99\xef\x96\xc3\xec\xdf\x0f\xb3\x05\xae\x99\xb1\xbc\x01\x95\xdb\x8c\xa6\xf5\xba\xab*\xc0\x1b\x99*\x80$KR\xeb\x9d\x03\xaa\x1d\x08\xdb\xfa\x02\xad\xdc[\xfbC,\x08\x12^_\xd1\xaf\x06\xdc\x17\xddm\x84\xf6\xc5\xc9\xe1\x85\xb3\x1a%w\x84`\xf1\xd0\x9c\xb0\xc2\x85\xef\xb0\"\xad\xc7\xddi>\xda7!\xba\xafz\xed-\x9a\x82\xf9\xe4K\xd8\xed\x1f\xa8\x1e\xf0Yc\xf9\x0e\x91\x14\xb2\x84cJ\xf8j:D\x1b\xe9\xecI[\xfaM\xaa\xb70\xfb%\x8ci\xe9x\xea7\xbedd\x95\x96\xcd\xad\xdc\xa9\xd0\x00\xc1U\xe80\xfe\x06\x05\xe3\xe5\x02\xf4W\x08\x16V\xd9\xc86\x1c\x9aY\xa9\xe1\xfcz\x8aJ\xe5\xca\xc1\x16\x1a\x86^S\xbaoi\xbc\x13\x8b$\txt\xc5\xe8\xe1\xca/z\xebz\x13\xe7\xd3\xe2\xc0XeU\xa4;\x1a[/\xe13&\xd3\x97\xd5\xd9\x0f_ fe\xff\x03\xb5\x04\xbb\x81vx\x81\xa7\x81g\xd9\xb9\xf3u\xc0w\xbcK\xc4tX\x99\xf5\xd8?d&\xeb\xd8\xa4\x88K\nS\x16c\xc4\xf9\xa0\xc9\x86\xe3\xdd(\x9cM\xb9\x9c;g\t\xdf\x81\xc2\x03\x97\xb8o\xe1\xda\r\xb3\x06\x9aQ\xe0\xc5L\x07e^\x0f\x05:\xf0e\xbfT-\xe7\x825\xf8=\x90\xad\xfa\xf5\xea\xf3\xc1.V\x95Fn\x83\x1c\x9d\x8e\x8a\xd2\x1d\xfd\xc8\x0f2\xe8\xaf\x1eYa\xd0d\xa9\xfe-\xba\x01\x02{\xbcU\xe3\xd8\xb3\x8e\x94m\xf7\x107\x84[\xb2\xd5Cd\x1e '\xbe\xccd\xf0\xf0pv\xf9o6\xfb*\x981\x8d&\x92O1|\xaed\xbaY\xd3\xe8\xc1%\xeb\xde\x11\xca\x80\xfbO\xd7C*\xda\xb5A\xe2\xeeo\x92'!W\xd4\x17\xd5\x80\xb5\xab\x90\xf2\xf0\xa3\xb2\x0e\x87\x89jx\xdd\x12\xcbt\xc9\xed\x04\x1d\x0f\xbb\xb9E\xad\xef\xac\xeb\x8c8\xfe\xd7@'1\xd0\xb8\xb4\xa5\x99\x81\x1b>\xcf\x06\xcf\x84\x8e\xbb\x88s\xc5\xf9\xa7\x8e<\r\xccuD\x96/\xf1;\x1e\xc4%\xd2!W\xcfT\x1a'\xb2\xcc\xbe\xa2\x1a\xd0\x1a\xb1\x10\x99\xc7\xebk\xb7\x80\x12SV\xeav)\n\xd5\x0c\xcc\xf3\xed\xb7{T?\xca\xe4\xd4\x8b\xa8\x92\x938\xfc\r\x83\xc90\xbc\xe2!\x8c\x8d\x8ch\xa2\x85\xa0\xab\xc3\x06wM\xef#K\xbb/\x93\xa6\x99\xe9\xc3\x94vkk\xe2\xe8\x83j\x1d\xd9\xfb\xcf\xe8\xb5\x9ez\x16\x13\x8d)'\x8f\x94({\xfa\x99%\x94\xe3\xf7\xa1\xc5\xe1\xa1\x8f\x94\n\xf3\xdc\xeex\x05o\x11\xb6]W0.\x19G\xd2'\x12\n'\xff\x04X\x15(\xbd5\x14\xe8\x9e-\x823ju\x9a\x0c\xed\x1d\x1d\xbaN\xb8\xd7*\xbf\xe2[\xae\x8e!w\xad\xdd\x1a\xbd\x9e>PHV\xc7\xbf\x15\x98'\x83\"\xe7\x18\x9cq\x8bO\xca\xab|\xbb\xe2\x01\xf1\x19T\x02\x9av\x16\xf7\xdaS\xac@K\xdf\x8e(\xf2\xbe\x89>\xe41m\xdd\xc1\x01v\x15\x13\x19\xdf\xddG\xb7%\xb9\xdd\xaf\xadO\xfbn\x19 e\x0fx\xaf\x10VN\xc3\xf5\xe6\x06w\x0f.\xf7\x0b\x8b\xe3\x99\x94U\xe9k\xf0\x7f\x9a\xf9/\x1bV1\xae=\xdd\xfdd\xef\xb0\x8e9\xb5\xe8\xff\xbd\xa4J\x16\xaeK\xb6S\x92e\x8b\x958\xbc3\xed\\\x96\xd4\x17\x05\xb3\x15W\x80\xda\x7f\xca\xb3,6\xa8[\xa1\x80\xf6-\xdfv\xb5\xec\xa1\x9f\x0f\xecI&v\x19rK\xd5K0\xe0\xb6W\xeb5<\x9b\xbavL\x0fR\xbf\x00+?\xcdR1\xf7\xd1\r\xed!\\\xc7Z0\x06\xac\xe0A\xb5Bg\xa6\x80%h\xdd\x85\xf9\xcf\x89\xc2\xa4b_\xdd\xda$G-O6\x06Z\x814\xfb^\x83\xf6p\xb4-\xd2E\x1f\x92\xca\x8d\x1b.\x80\xd5\xa9\xf7\x17\x8fN\xd2`[\xefqV\xa7\x1a\xeb\xafA\x12\x0b\xb6x\x80\xf7\x83\xe2\n\x11?\xe0\xbe[q\x06Z\x1b\xeb\x02\x9b\xee|\xbc\x8f\x1b\xcb\x9d>\xaa\x84\x1dV6\xf7\x10\xf0\xe0oK!\n\xbb\xcd.\xa2\xa0n\x1c\xc7Ut\x9e\xb1\x86~\x80\xeb\x1b\x188y\x12\xc3\xf7\x9e\x0e\\Ev\xf4%\x86k\xeb\xc8\xbeD\xf1\x12\x80I\x91s\x04\x1a\x9e\x17\x9dk\x16E%u\xd7\xd0\xf1\xe0#\xa8\xca\xaes\xc75\x1d:\xce\x86o\x08\xa6\xe9-:W\x07(\x10'R\x87\x9d).\xe6\x981;\xf7\xe7T\x9a\x0f\x1dP\xd3\xa0\xe9\xc2\xb8\xbc\x83\xe9\x87\xa0!+I\x15XS\r\xa8\xa2\x86\xf7X\xde\xc0\xf2\x81\xbc\x99HX\x19\xbbp\n=\rc{\xd09j\xb9jE\xc8\xad\x86\xf9\x0e\xa7\x03ZX&\x03\xa2[\x1bN`\xc7\x8c\xa1%B\x13\x85*\xea7\xf2\x00,1\xf5KB\xc5\xec\xa2\xe0\xef\xcf\x1a\x14\x04\xafx \x14\"\xb9\x8c\xe1M\x95\xb7E\xe4\t\xe4\xb1<X}R\n\x17\xe7\t.\x84V\xc8\xc8Fx\xfa\xac\x93^\xc4\\`\x11\xf4\xa9\xe2*\xbeqB\x06\xfe)\xba\xf1\x15\xceE\x1a\xdc\xc5\xe3\xc3L\x93\x01\xa6\xabm\x87H<}\xff\xd9\x18\x01\xfa\x9c\xed\x08\\\x90\x83y\x02\xcc[\x06\tye\x81Z\t\xea|\x8f\xe7\xc1\xcf\xb19\x03h\x15)\xf5\xd7m\x06\x0bqV\xe4\xcc\xe5j\x9eaw,y\xb00\x88\x005o\x08\xa5\xe2y\xd5\x8b\xca\x0c\x0b\x91F\xeb\xa2\xf98\xdf\x04\xbdw\x1dL\x8b\xe7\x03\xb4\n\t\xa5S\xcd[|\xee\x9d\xe4V\xee\x8c8\xf8;{A\x81/\x86\x11\xbfD1 \x81m'\xf7\xc67Q[d-\xde\x86x\xd2Z\xee\xa7n\xa7 \xf9\xbb\xd1\xb17\x1b\xdbc\xb5Z\xbd4#/\xc0\xc1\x8d\xfa\xbcks\x11M\x83\xd7lA\xdd\xb2\x1e\xe4?\x1an\xb6\x8awp\xf7\xca\x1ci\xf2\xdc\xf1o\xab\xe6\xe3\xeaT\xaa\xf5\xeaT(P\xcajeIt\xb0n\x18v\x1a\xd7\n\xb4\xed\x8e^\xbf\x80\x81\xab\xf4\xc7\x99t\x0e\xc1[\xb2>N\x97(\xe9hEG\xee\x91s\x1a\xf7=\xd3H\x88\x90\xba),\xab\xc9M(\x9d{\xc0\x01\xd8\xb2\xa2\xf3\xbf\xe3-\xd9h,\x81\xa7\xe8s\xfb\xda\x98\x0f\xe2\xd82\xe5\xce\xae\x84\x90\xf2m\xba\x01\x8e\xb7\xb7\xa6\x94\x0cd\xf3\x84\xe4\x8a\xb1\xca\xa5h\x9a\xbfo\x802\xe2\xd0\x8a\x0f$\xbe!\xba\x95\xc4\xfb\x94\xb6\x8c\x05\x96\tvS\xac\xe2\x12(\xbe\xfb\x8a:\xd3\x14\x9c\xcf\xeb=\x1a\n\x14\xd1\x00_\"\xe4\xb4\x9c\x18\x03\x19\xf8[\x90y\xe5\x1e\n4H\x89\x9bs\xfc \xe7f\xee\x00\xae\xe70?\xf5KyH!y\xdd\x9d\xad\xef\xe9\x005\x96O\x00I\xa5\x15\xd0xF\x82\x9f\xb6\x87\x99\xa8\xf2N\xb2\xda\xfe\xd2h\xdavRIl{\x02#;\x81\x927\xa8e\xe0\x06+#\xedY\x8a\x0c\xa1\xb6<#\xe770\rB5\x00\xb7ARMo\x06\xd0tp\xda\xf6\n6\xd7\xceG\x91\x13\xe1\xd0\xe2\x123\xc6\xd4\xb7X\x88\x91\xd3z\xa2\x82\x8fs\xb3{9\xf0\xf3*\xf16\x92Fq\xd3\x8c6l\x9a\x01HGQ\xcb/\xa1\"Y\xe0\x1e\xa4\x11\\m_\xfb\xd2\x92i\x96\xd9c\xad\x03\x18\x19F\xb6W\x8d\x80\xbcKJz9=\x15\x9b\xa4\x04Pi\x80\x9b\xf9B\x9e\xa0\xa9\xa6\x1f\x0f\x19\xf6M\xaaz\x93\x97\xed\x16\x0eS\x1a\x04\xd6\xd1\xc1\xb1>\xba\x0eQg\xc2_45\xc6_oY\xc0\x13\xa0\xe1S\xdca\x1f\x19,\xeb\x07\xff\xed\xe4nC\xb7\xf7\xf6E\xd0\xd9\x18l\xf0\x18\xfc\xd3\xa45N\x92\x85\x1cS\x96\x1f@\xc0\xf2\xf3\xce\xd5\xdcf.Hq\x18\xc9]\x19%\x92\xd5Yh\xefPDD\xf7~\xd2\xe9%\xdf4\x81\x9d\x0b\x18\"f\x8d\xb8T\xe9Q\x98\xd5\x1dg\x87[\xa3\xc8\xcf\xac!P8\x921\xb1\xe8\xd7\xc70\xf0]xa\x85Da\xc0\x90\xb3\x06?I\x88'f5\xf8\x01l\x93\x08z\xdaL7K\xcd\x8f\xf1\xe4\xd6\x9d\xa4\xa9\xaca\x85\xaa\x97\xb7\xf8\x01\xea\xbe\xfcM+%%_\x11\x84\x10h\xcc\xa5\xac-\x07\xf1\xc0\xd1_`\xf6\xe9\x91\x93\x9f\xf7\x98\xe6Y\xbd)h\xbd\xd8\x98t\x01\x14\xcb\xb4V\x97\xe2\xe6\x88\xf0ADW[\xb9\xfe\x82\xe1w\xcf\xa0\xac\x02\xda\x9a\xddw\xe3\xd0\xed\xfa\xb8a\xa3\x03\x84m\x92\x18\x1f\xde\xbe\x82\x82u\x06\x1e\xe8\xbbI\x96>bv\x85h;J\xb9=\x9a\tP\xc3X]Q\rZK\x98erv\x8b&\x04\xe5+\xbc:\xf1k\xd5j\xf4\xda)W\xc5'\xdc\xc2\x0b]\xba\xa5\n\x8b\xdd\x0fc\xd0\x19\x8dNI[\xffFI\xf3\x81\xf5o\xae\xa2\x85\x9e\xe3\xac\x16#|l\x84$Qq\xf2\x8f\"[\x18+\xd0\xa0i\xab\x81\xe3\xe8Av\xc3:^,\xc4R\xa4\xf5\xfc\xf3\xcf\xeeb\xbb\x93\xa8[\xd3.0\x9f\xc6\x1a\x0fX\xe7\xcb\x17~>\x0b\x8c\xe3v\xab\x9bj\xf7\xe1X\x06\xecQg\xb5P\x02!+8\x00\x19\xa35\xe0\xf9-\x8e\xf0\xb1\x85\xdc\x07\n?\x12Y\xa3Y?\x11||l\x0c\xde\x00\xaaag\xf6\xf2\x96v\x0c\xd4Yc`\x8b\x05\x19\xc3\xe4\xf5\x1a\x18O\xa8@Y\xff\xa6\x82$\xf4\xa7\xaa\xe6\xc37\xe5\x15\x15\rx\t\xee\xe2l\xbd\x8a\x03\xee\xd2Zul\x94\xe8!\xf8\xceth\xf7\xf8z\x14\x1e\x9fX\xec[y)6\xec\xe7\x03P\x83\xea\xad\xf7\xa9\x0b\xf1\xcd\xd9\x16F\xe8\x01\x18\xe3\x87\xbe\x00\x0c\x8d]\xfc\xa9\x1c\x0c\xff\x92\xfb\x80\x13\xdf\xd3\xb8\x8c\x98\xfaN}\x06\x97Z\xe2\xa4y\xd6\xe9\xcb\xa3\x147<\x89\x8d\x04\x00R]\xd8s\xa2\xcb\xf0\x13gg>$S\x9e\xc0Y\r\x11g)\x9d}\xdb{6\xd8\x06\xfe\xfe\xa2L\x83\xd3\xa3\xa5*\x0e\xe4\xe5}Au>\x1f\nf\x95^%\xee\rd\x0b\x90\x18\x9a\x95\xf6\xa5p2\x81 V\xecE\x00\x01\x85$\xc5\xf1\x03\xe3\xd3B\xbe\x83\xa3\xf5\xc8\xcb\xa4\xf8\x87\x08\xd7U\x16\xe6B\x99\x84\xf3\x03r\xb0\x02\xb6\xaf\xd5\xac\xdf/\x8b\x10\xbe\xf1\x0c\xd3\xfa\x92M\xf3p\x88\t\xe1\x1a+\x0c+G\xafB4\xd1`\xf7\xbeb%\xff\xa8\xe2\xb8\x1d\xc3\xd9\x97\xf6\xdc\xc5lp[Y\x87 \x80\x060\xa82\xa5j\xa9\x08U\x17\xe9q\xe3 \xe8\xa2w\x89j\x1fb\x1e\xc5q2r\xb5\x12\x88Pfi\x18\x03\xbd(84\xdb\xe2\xb6\xdf\x01\x12\xa2\x07\xf5\xb45\xc5C\x1e\x83\xeb\xe0\xee\xb2\x04m\xd6@K}\x10\xddb\xe2/\x922\x85E\x1b\xa4\rd\x00?%\xb6\xba<\xa0\xec\x8e\x909\x02\xc1\xf2\x92\xc9\xc6\xe5\xb0s\xb0\xa7\x11\xb52F%R\x1e\x8cO\x85qy\x85y6\xceo\xc8v\xa5\xe4x\xdb\x97\t#Y\xf8yE\xb5\x9d\xa5t\rL\xb1\x87\x13!\x8aB\xe9[\x17-8D\x89\x9aUJ\xd7\xc6\x88[\xbfQk\x93Y\xbd\x87\xe5:0\x1a\x8cD\xdf\xe32#uR\xfd\x8d\x8c=\xd2\x91\x1f\xfel\x88l\xc6\xc3\xfc\xf1\x99\xaf.\xfb\xc1~\x17\x02+\xe5\xe3\xee?t!\\%\xe6\x9f7\xc1\x9d;\x8c\xff%\xda!\xdf\xa0\xb1c/G:\xcf\xc3**xBsn\x93H\xd24\xee\xddbUD\x97`\x96}\x9a\xba\xbc\x0f\xb9f\xbf\xc7(5\xbdzcU47\x90\x15\x82\x89\x8e^\x80}\xc7?\xff\xf0\t\xdeK\xb9}w\xec\"kf\xca\xf8\xd4\xf3\xd5\xd7\xc7|}LZjB\x89\x1d\x89\x02\x83&\xbf\xfa\xd2#{\xdb*/O\xcf\x02K\xa7j\x88+Bf\xd3%J\xe9U\x83B\xae*7\xfc\xe2U\xd8\x97\xb1&\xb8\x84\xdc\xc4\xbd>f\xf4\xc3d\xde\xde\xcc\xa3\xa1\x9eS\x8a\xd6\xdc[^s\xb7\xd2\xc8pg\xd9\x9beg\xbd\x1f\xbcgPo5d,f\x05\xdbk\xe9\xa1|\xc1\xdft%\xb4\xd9'\xa9\xdd\x14\x9eB\xa0\xfc\xab\x91\xce\xba!\x00g\xcc\x86\x17\x8b='q\x90\xa5\x11cNY\xa9\x8fH\x7f\xa1\xf3\x9e!/\x01rd\x89\x99\xe8\xe2f\xfe7\xb6\x80\xf5\x0fS\x18\xc8\x06GB\xfb\x0e\xb4\x92AD\x0em2\x15\xb7\xc0\x17\xc3\xf9\x8d!\xc0\xaa\x928T)\xb1;\x9c\xc9\x1d\x85w\xeb\xb6J(<j-7\x1c\xbc\x18l\xf9\xc5\xca\xa5Q\x83#\x1f\x954\xd8f\xa5\xc4\xab\xe1D\xdc\xf30\xa3;\x11M\x12\xafi[%\xa0\x833r\xa1\x93|\x0e\xea\xf80\xcc\xac9t\xee\x8c\xfa\x97(\x1b\x8dx(\xd8\xb5z\xb7\x8b\xa0FL\xbbs\xcf\x90\xfda<\xb8\x8e\x8fO\xd3\x17\xb6y \x89T\xce\xe9\xbaa.9\x88`\x8bf\x95\xe3\xb6\xce\x7f\x0e$\x0e\xc3\xd4\xcbv\xbar\xb6_\xc9\xf3s\xe9\xdd\xb3\x9e\xea9\x07\x9f\xc92\xd4{v\xb4M(9'\xb4G\x07t\x13\xaf\xc8VaHT\xd6\\=\xcb:\x19\"\x8f2\x82\x8fS\xcf\x06\n\xcd\x0f\xbcU\xd1=\xefq\xa7\xf6\xb0n\x06Y\x1d-<}\xf9D\x85\xd2 EE=/\xdb\xa7\xf5\x1b$%I\xac[{\x1c,\xea\xf0\xe6z\x02B*\x05H_F\x86M\xf3\xf7K\x90\xb2%\xb0#'\x17\xa2\xa7\x8b\xc5jg*\x08\xd8\xed\xc2\xba\x89\x0bJ`\xca\xfb\x94j7\xf6O\rya\xff\x9f\x10\xc8\xcd3\x88/\xf9\xe5\x97Y(\xc9\xa1\rI\xe7\xa7*\\[\x8b\x0f\xdc`\xaf\x91\x90\xc8F\xc6u\xb9P\xf3>\x13&\xe9a\x124nw\xff\xb4na\x15\x07\x85\xcdE\xd0R\xdfj[\x94\xa8\x1b\xd3\xd5\xd2\xdf\xbcd\xc2\xbb\x1b\x13,\xc6\xa7\xabp\xc9R\xf5\xff\x02\n\x8d5\xd99\xb3\xdf\xf2P\xd1\xc2&A\xfb\xf3>\x0c`\xe9\x1c9\x04\x12\xaaO\x93r\x04\x90\r\x0b\x9a\x8d\xd9-\x98%\x9f\xe6\xc1\x9d\x16\x8b_\xfb\x8c\xc1\xff$\xdc\xdc\x07\x04\xc3`(Cm\xcb\x822\xd8\xe3\xa6\xd9\xe8\xb66\xe0d\x12j\x81)6\xf5Y8\xca\x0f\xe1\xbc\xbc\x97\xe5\x85\xf3S\xfd\xdf\xbd9\x89s\xd3\xa4\xe2\x9c\xd2\xbd\xb8^e\xf3\xc1rR(\xdaS\xbb\x1fss\xd7>]y\xd6\xa1\x9e\x0cO\xd4FK\x1e[\xddw*Tz\xc3\x1576\xe2\x0f\xc1T]X\xe4\xb2D?\xc42\n\x10\xc6\xd1 \x1c\x9b\xa7\xc0\xb9qps\xa8\x9c\x98\x82J\xaf=\xb4\xe4\xb6\x9d1\xf0*\xb2\xb0\rq\xa5D\xda\x0f{\xdb\x94\xf6M\x1026\xc7'\x864=\x8b\x9cw\x00i\xce\xe4\xe7\t\xf2{\xe94S\x82\xf9\xc4;p\x99\xcb;\xa0\x12\xa7\xc0\x17Kq8\xeb\x06\xa8l\xc3\xc3\xdf\x90\x1ek?\x11\xc9\x96G\xfa\xa6\x1c1\xce~n?t\xb4\xfeK=%\xbd\xac\xb2\xab\x86\x9e\x155\xbdR\x0b\xa1\xb4B\xd1\xb4\xa8C\x196\x00\xba5\x8co\xc0\xa4\xe5\x85\xf8\x08\xba\xc1\xb2&]\x98%\x96A\xf4j}G\xe7L^\xdb\xc5\xb4'\xff\xf6$ 1\xd8\xdfV~\xdb\xfaZl\x86\xfb\xeb\x8b\xb8\x02\xf4\n?xk\x1ab\x84/\xd3\xf3^L[\xf1\x85\x00U;\xc5\xd4\x1f\xf7\x15{z{%Y\xbb\x8dl\xeaG\xce,\xe1\xbc\xb5c\xca\xa4\xc4\x84q\x8e\xa9Z\xebNd\xf8\x94\xbb\xe0B#\xf4.cf{!p\x80\xe9]\xb4\xdfw\x8f\x00%V\xca\x90G\xc5\xd2\xd9/\x08\xb3\xb7\xc3\xe3\xecj\xc4Y\xd4m\x93\xc1\r\xa0\x18\xa1\xbd\xac\xbbAG/\x92\xab\xeb\r\xdf(\x02t\x00\x10\x97\x1e\xf3\xe1\xd0\xe7\x8d\xf3\r\xe0\x00-\x1a\x19\xcb@C\x07\xdd\xf7\x9aV\xab\xdcz\xffL\x13\xa6z\xa7x\xc1g\x1f\xf643E\xd9Eh\xd2\x80kA\xfc`\xec\xd9\xbf0\x00\xeb\x87\x9e\xa8n\xbc\xa1B\xbc\x0cS\xe8J\x17,\x99\x17:\x81-\x05[\xe1\x8ezB\xfcq\xe6\xe6&\x97#2\x912\x04}\x9e\x18\x0c\xd0\xb3\x82\xcd\xd9\xca\xc3\xea4r\xa2\x11k\xd0\x19\x8f{\xe6\x10\x07b4\xc6f\xd11\xecm\xb0\x8a\x8f\xd1\x9f,;\xf71\x97\x87\xd7\xd8\xab\xa0S\xa2+\xd4\xac\x9c\xfe\xf0\xd2\xdc\x96W\xad,\xc1\xd7\xe7\xb3y\xb9\x17\xb0\xf2\x92\xc6\xf4\x85\"\xe0n\xc3\x19`2\xe3\xa7K9\xcbY8\xa1{w#\xf4\x04g\x84\xb6\xf9\xc3\x17\x1c\x0fC\x8b\xbcK<q\xd6\xf5\x85\xc8\xe9\xed\xa2\"8\xff\xefR\xb0\x90g\x90K\x8dH\xfa\xf69\xe3b\xc3\x8e[\x91;\xadR<X7\xbdP\xfe\xd3\xb5Q\x9c\xe1<\xf8\xb2*{\xba\xfcHO\x02\x01J\xdc\x94p\xefk1\xd3\x8f\x1a\"\xbc\xee\xf4u\t\xcahw_\xc9\x15\xa7&\xd6.\xb1\xaaTh\"9\x1f?\x17\xd1\xc8^0$\xb5\x13z\x14\xf5mA\xa5\x97;\xb3\xce\xb8\xd2\xad\xf5\xc5g\xe2\xfc-jD\x08H\x93q\xec\xe4\x0er\xe4\xa2\xab\x1c\x12=\xf8w\x1cb\xcd^\xc3\xb6K\xdaT\xf68\x0cn\"\xaa\xaf\xa4\x82U+\x0cE5n\xaa\xeen5\x03\xf1 \xba\xde\x9c\xb8\xbf\xd0\n[\xd3\xc6\\:p\x83b\x07\x95\xb1\xa4\xb2\x9d\xfc:\xc2p1(\x85\x1f\xabN\xaa\xed\xf6\xa9\xdb<vpR\xff\x0e,\x85i\x9a;F\xce\x95p\xee\xb8\xdd\x91\x1e0\x05\x80/h\x17\xab\x9f\xc5a\xcb\x14\xff\xfd\xaeO\x12\xa9\x97}\xa1\x02\xa4@\x88\x11\x08\t\xb5o\xd5ZK\x13\xfe\xd6[\xee\xfa\x9e\x8b\t\x91N\x82\xdf\x9e`\x86\x13~\x16\xd80\x9a\xcc\xde.\xe99\x9ex\x9a\xfd\xb4\x97\xb4N[\x06\xae\x82 \n\xbc\xa9\xd8\x8d\xfa\xa2\xd1\x1cV\xb0K`\xa9\xa7I\x06\xdc7\xc9j\\\xaa\xa2\xaap\x17c\x07*\xd94\xc3\xf5\xeb%>t_\xc61w`\xa1R^\xd1\xc0\xcf=\xc9M\xc4>\xc9\xae\x08\xf3\xca\xda\xd0{\xd8\x0e\xa2\x12\xb7\x8b\xf0\xac\x15\xe17\x9d\x05\xe3\xe2\xb0\x91O\x8e\xc6i\xbbe\xb1I\xf8\x97\x95.\xe0f\xe3\n_sd\\q\xcdAgH\x93L\x06\\\xfc\x91\xed\x1d\x1aS\x0e\xf4^\x19\xb4\xc9K5\xcc%\xd6\xd4^\x81\x06\xcal\xd9c\xcd\xd0\xfe\x89\x9d[+F\x13\xc2\x9d\x05m\x91\xd7I\x05\xf1\x0e\x81\xa9\xe6\xa7Uq-\x99\xf1\x1f\xb8\xd3\xe2\x0bz\xbep\xf6\x01b%z\xbbZ9\xf2\xb9Pn\xbe5\xd6\xaa\x17\x99D\xd7\xca4\xe4H\x00\x1cpxH\xb2F\xae\t\xaa\xc8\xd2 \xe9\xee\x11\x11\xd0\xa4qa\x81\xe0\xfa$\xd6\x8b\x82[\xf4\x06\xd1\x05!\xa6\x9a/%`\x1fn\xfa\x91\xe3\xe9U\xec\xe7\x98]\x90\xff\xe8u\xad.\x9b\xb8\xd3L\xbb\x8e/XRf}\xa6\xc1\xaa}\xd7\xc1\xa3\xffN\x16\xa0^\x89\xb5\xefrw\xf8\xf5\x06\xaf\x9d\x8d`c\xfb\x1eh|\x02\xaa\x92x\x03=\xc0;Br\xdc\x06ow\x7f\xb4\x08\x96$\xd7;\xba]\xcb\xc6\xd5\x16\n\xb7@\x06\x1ac\xdf\xa5\x8b\x1c\x87l\xc7\xc0\xddm\xd2\xb79\xf1\x14\x8c\xef\xcc\\\x7f\xe9K\x85J\x99\xfc\xf5\x12\x96{\xe2\x92al\xa5\xf6bi\xf7\xec\xae\xc5K l\x13f\xf4\x84\xe6k0R\x93\xd1\xad8\xce\x9f}\t\xfdIE\xa8\xda@\x9c\x11\xdd\x0b\xa7S\xf0l\xddY\x01\x0c\xd7\xa8\xd5\xd9\x18\x84o\x84\x92\x981\xb3\x96\xf1D$\x03}\x81x\xd8=A\xe2\x12\xb4\"\xab&\r\xcb\xfb\x80\x8fmX\xc2\x91\x1cF\x81R\xfb\xe5\xfe\xcehXL0\xe7\xadU\x1c\x9b\x11+\xa7\x14\xb3H\xdbc\x0e\xf7\x83\x19\x0e5\x1fI\x11\x10\xd5J,\"\xd4\xe3\x9cAe\x9f\xda2\x0b@\x7fds<\xae\x9a\xc5\x91i\xb9XJ\x1d\xa4\xc8,\x9f\xf8\x9c4r_\\\xe5\xc7DQ=\xea\xdeu\xda6\x02d\x13\x9a\xf5`\x1e\x91\xc5\xc3\xae\x15\x88\xfe/\xecT\x02\xb6\xeb\t^\xf1\xf8\xca\xd5{\xb4\x0f\x8e\xb1\xc3\xd7\xaf\x84\xa2:r\xc0\xe6h\xbb\xb2.\xfb\x9a\xca4\x95~\x8au\xf50 ~\x0c\xea!\xd8n\xa9\xb7\x08\xffT\x12\xa1#C\x88\xefK\x15\x1a\xd4\xafM\xd3Dr\xe6\x14\x03R\xa2\xef\xe3[\x937\x9e\xf6\x9dA@\x94\xab\xc7\xc72\x93m\xbd\x80\xb3t\xad\xc6\x83\x8e\x1f\x95YK\xceLNu\x0e\xb5\x151\xff\xd4\xb9\x1b/\xa2\x8f\x15\xf3\x9b\x10X\xd6\x0bh f\xd3\xeeE\xaeI5\xe7\x19\x92\xcd\x81<l\x90\x07\x8e9y\xa0\xaf\xe7\xc1$5\x8e\xbe\xf2\xcfJ\x8aC\xa37\x83\x0e{1?\x8f\xe1\xfd\x08d\x08@\xae\" \xbez\xfb\x1dw6r?\xc2R\xa1p\xdc\xe6\xf94\xd20P\x1d\x7f3\xb0\xf4\x0b\x1e7Y\xfc\xa0WeQ\xed\x8a\xf7\xadd\xb9\x0bbS\x8c\xb7\xee\xaf\xa9\xd6[I\x8a\xb5\xcb\xeeY\x00\x9f\xd6\xec0;\x0e\xa6\x9bDp<b>r\xdbW\xb9\x00\x91a\xc9%\x9f\x0e\x9c*\xcc\x00\xcd\x15%\x17\xa3\xb4\x92\xd9H\x89\xd93\xf1|-\xa3(|I\xf6\xd1\x01\x1f\xee[\x80\x03,\xd5G\xfe\xd6\xd1\x90\xfbD\x06e\xf9#\x13\xc7\xa3\xf9\xdeg\xeeOp=*>\xa6c\xabF\x04\x0bwS\xf10\x9f\xc6f\xc8`\n[\xf3`'~\x04\xcb\x89ds\x0c\xd5\xacq\x1d\xf2]\x14c\x92\x0fe1E\xc18{\x83\x9f\xa3\x16\x9f\x13\xc70\xc1\xd1\xc8\x0exX\n\x06\xc8I\xf770+\x862\xd6\xe5\x1eE\x115-<Y\x9b\xc0,\x19D\xf1\xcd\t\x08kR!\xa9\xf0r\x05\xe4\xbe\x0c'\xde\x8d\xee\xe2\xf14\xe0k%&\x0c\x87I\xd8-\x02vTu\xba<;\xbb\x01\x100\xd2\xb3\x16-\xf6\xabh\x1do8*R\x13\xbe\xe9\x16\x1f%\x7f\x15-\xbcz\x16\xfe\x13b:W\xff\x87\xa5\x9d\xa8n\x04\x99\xb5\xce\x9bS\x1b\xe6\x19y\xbc\xb9\x1f\x8b\x8d=\xeb\x0c2u\xfeZ\xc8&\xde\t\xb4\xb1n\x11\xed\xb0I\xd4x\x9d*\xe7i\xd7\xcb\xed=j\xb0\xd6'\xe0LG/\x0e\x85\xc6<\"\xc0s\x1d\x15\xa3\xc9\xff#\x18\xe9\xe0\x05\x83\xe5\x87\xcc\xe5:\xbc\x07<z\x0e\x03\x1cj\x02K+X`\xb8\xd6,C1\x84\xb9\xfe\x82\xed\xa0\xfdj\\\x1eMp\x00\x002\xaf\x96\x0f\x8c\x12=\x10sH\x98x\x10*\x92o6\xdd\xf9\xda5:\xc5\x16\x97r\xa1\xdb\xe4\xe9\xb1\xba\x98\xd7\x08%@\xfd\x1df\x12N\xd9H\x8b\x10\xc3\xdb\xb9]\x8b\x1f%u\n\xd0m\x1d\x8e\xd3^a%\xa7\xc4A\xa6^\x93Hv\x90Q#\xd2N%\xf3\xb0\x06\xfe\x07\xbf\xdb\xee\xa0;\xcaG\xc6\xf7\xfax]'\xe7\x8a\x10}1\xe0\xd2\xa9\x9cx\x19lVUR$\x04\x91\xad\xd8\x8d\xb0\xa79;#b\xef\xe8i\xa09\xf9\x9c\xc6\xc6\x19e7\xd4\x9fYt@`\\xJ\xcb\x16\xfas\x8b#\xae\xf7\xdc\xc4\x99B\x82\x93\xc9\xc6U\xd5n\xe9\xec\xf8\x9b,\xa1\x88\xe3\xa7\x9cE\xee\xd6\x17r\x89e.\xef\xb7j\x9c\x93v;)\xc0\xb1:\x87q\xe1Y\xea\xfa\r\xc0\x8bf\xe3d\x8fL\xcf\x16\xb70\xac\xe7\xe9\xa7\xad\xec\\\x07\xa4\xe9\x02\x9c\xe5l\x7fD\x0c\xd7\xc5f\x86\x87\xdcw\xb6\xe4\x82\xef\xfc!\x94 \xbb\xc90\x00j~[\x84E\x88D\xd7\x18\xec\x03\xe1\xd4\x91\xe9S\x05\x10\xd3+{Y\x89\xaf\xdf%V\xb9<\xf6%s}d\xf2S\xab\xf6\xc2\x03MG\xfb\xb5%\xcdo\x07\xdf\xd1_(f-\xff)\xca\x8a\xeb\xaa\xe6\xafMb\xaa!b4\x99Y\x1e\xeb\\\xfeDoXB\xe7`\xaeq1\xa4\xe3\x8a\x00\xe6\xc8l\x96\xee/N\xd3\x89|\xec\x01m/\xaa\x03q\xfd\xa0W_\x98\x0b1\xc2\x04\xc1\x1cd\xc8\xd3\x8dT\x05\x16\xee\xe5p\x02\xa9\xa1\x9a\xef-\x01\"\xeb\xe6\xca$,\x1d\x15\xb2\x03D\xe9\x92\xb3\xc2O\xec`\xe9\xad\xc6\xad\x03\xfd\x8f\xe5\xab(]\xca\t\xae\xa7\x19\x8d\xa2\x11\xcf\x8e\xf5Y\x04\x13O?\xdbc\r\xd7\x8c\xa6\x04\xf7\xe7?\x9a\x9e>w?\x96\x83\x0f\xa1`0O\xfa\xabX\x84W\xa2\x0bt\xf6F\xd9\xb6\xdb\xd1o\xb46\x88\xc0/\xec\xb0\xe3\xa9\xd8J\xa6\x85\xa1\xa9\xbes\xeb\x10)\xfe\x8f\xb5k5\x0f$\xf19\x08\x8dU\xe0\":\xac\xdbL\xd0&\x05\x95}+\x01\xb3\xd3\x01M\x03=\xb2>\xf6\x10\xd9\x1fw\xea\xea\xe5\xbf0\x12/G\x98M\xd3\x1d\x87\xfb\xa5\xea\xbf\xef\xba\xa4\xe1\x18\x97\x8bp\x073\xf9\x9fPJL\x83u\x95\x81\xf2\x0b~5L\xc2*{\xf8_\xed}\xff\x8bA\xae\x06j\xb6\xealbq>,\r\xdcymD\x9eC\xc9\xce&l\xde\xbd%\xf4\xbe\x830N\xb5\xadX\xe1G\xa0\x03\x89\xf4\xc7\xe5\x9b\x0e\x0f\x87H~\rf{\x9cU\x08f^}\xec\xbd\xab\x00\x1b\xe3\xdb9_\x19\xd5\xd5\x0b\xc3\xceT\xbf\x06\x8f\xdd\xb2\\\xf0\xc0\xa7\x15A\xdd\xbe'\r\xc7\xfd\x9eb\x06\x10Uz\x133n\x06|\x8f\n\xb6\x13PvI\xb0\xd2\xae\xed\x0fUpjL\xc8Ro\xba\x98y\xb8\xaf\xbdbT\xceDK\xbe\\\xbf\x08\xa8\x8c1s\xbf\xe3I\xdbJP\xf54c\x13\xcaH\x9c>)C:\xd0\x14\xecH\x02g\x17\x08ON\xef\x81/\xbd\xe7F\x19\x98\x95\x0f\x03\x98\xdc\x15\x9c\xcd}\xd9Z\x1c\x10\x11\x9c\xf7=\xfe`^S~\xc1d\xfb9\xe5\x10x<\xda\xaf\x01A\xee\xed\xb0\x80\x9a\x05\xa3\xf6p\xd2\x9b\xba\x14\n\x99\xb7\xdf\xe1\xac\x8b,#\x97\xea/\xa3G\x1a\x00xZ\xca\xef& \x90O$\xbd\xe9\x8e\x00\x11\x8e\x8c\x0c\xf1\xd2b\xa7\x83[T\x90R\xe5n\xcd)Y\x01\x9b\x12\xf5V\xcc6t\xfa\xb1\xf4\x18\x12\xa7h\xba\xaa\xb3\xe4`\xf3\x00\xbez\xc0\xb7\xb4\x87\x9c\x10>\xbcs8\nbN\x8b\xe7\x12\xe1\xde\xf0\x95\x98\xc0\xa8\x97\xd2Gv\xec\xca\x01ZTlB\xa2\xab.\xb8\xd2\x0e\xdf5\x1a\x84\xf5M`\xc8\xd5\xca0\x8f7\xbbB\xa4\xcb\xe3u\x00\xa3\xea~)\xa8\x02fj\xee\xea\x08\xf6\\\xe0l\xfd$`y\x85\xae\xeb\x0c\x0c%\x91i\xc7\xc7\x08\x0eZ\x02\xce\xcc\xb6\x17\x95\n\xbf;\x12\xe7\xa97\x87\xf8\x91xz\x10:\x90\xcfM\xca\xe5O\x01\xa0\x00AI\x85\x8bnV\x9c\xc9\xc1W\x17\xb1SL\x91\x8c\xe6\x1d\x97\xf1\xfaczX\xe9\xdf\x05\xec\xca\x8b\xad\xd7\x89\xd7\x1aI\x0f@l\xd3\xc6n\xa1\x1fZ\x10\x9aC\xe5\xba\xc1h\x81\x15\xf9@\x07\x1e\x1f^%(\xac\x12s\xc0$\xa7\xa1S\xa7\xa8=\x16l\x16\x83\xd0\x12\"\x14k\xe6VH\x18\x8c\x11\xc1\xcd\xcc9 \xdd\xd8\xf8\x15\x1e\xef\xaaW\x91\xc5\xfc\x97{4\xa0dM\x01\xc2CrZ\x0e\x8a\xf7\xc4\xa0\xb4\xe9\x91,y\xc4eYV\x99\x8d\xdbY\x80\x02\x00\x1c= /Z/\x94\x98gOr9\xb9\xc4\xd4\xf8Y]\xb9!\xb5\xf2\x17a\xac7F\r\xc1\x16a\x96\xa9Ic\xdd\xfd\xf2\x06\xde\x94N\r\x85\xb3;R|WK\xa3\xc8\xc0\x00\x00\x00",  # noqa: E501
        "webp",
    )


@pytest.fixture()
def session_id() -> str:
    return "my-test-session-id"


@pytest.fixture()
def user_id() -> str:
    return "my-test-user-id"


@pytest.fixture()
def metadata() -> Dict[str, Any]:
    return {
        "test-int": 1,
        "test-str": "string",
        "test-list": [1, 2, 3],
        "test-dict": {
            "key-1": "val-1",
            "key-2": "val-2",
        },
    }


@pytest.fixture()
def tags() -> List[str]:
    return ["tag-1", "tag-2"]


@pytest.fixture
def prompt_template() -> str:
    return (
        "This is a test prompt template with int {var_int}, "
        "string {var_string}, and list {var_list}"
    )


@pytest.fixture
def prompt_template_version() -> str:
    return "v1.0"


@pytest.fixture
def prompt_template_variables() -> Dict[str, Any]:
    return {
        "var_int": 1,
        "var_str": "2",
        "var_list": [1, 2, 3],
    }


@pytest.fixture(scope="module")
def tracer_provider(in_memory_span_exporter: InMemorySpanExporter) -> trace_api.TracerProvider:
    resource = Resource(attributes={})
    tracer_provider = trace_sdk.TracerProvider(resource=resource)
    span_processor = SimpleSpanProcessor(span_exporter=in_memory_span_exporter)
    tracer_provider.add_span_processor(span_processor=span_processor)
    return tracer_provider


@pytest.fixture(scope="module")
def in_memory_span_exporter() -> InMemorySpanExporter:
    return InMemorySpanExporter()


@pytest.fixture(autouse=True)
def instrument(
    tracer_provider: trace_api.TracerProvider,
    in_memory_span_exporter: InMemorySpanExporter,
) -> Generator[None, None, None]:
    BedrockInstrumentor().instrument(tracer_provider=tracer_provider)
    yield
    BedrockInstrumentor().uninstrument()
    in_memory_span_exporter.clear()


# Ensure we're using the common OITracer from common opeinference-instrumentation pkg
def test_oitracer() -> None:
    assert isinstance(BedrockInstrumentor()._tracer, OITracer)


@pytest.mark.parametrize("use_context_attributes", [False, True])
def test_invoke_client(
    use_context_attributes: bool,
    in_memory_span_exporter: InMemorySpanExporter,
    session_id: str,
    user_id: str,
    metadata: Dict[str, Any],
    tags: List[str],
    prompt_template: str,
    prompt_template_version: str,
    prompt_template_variables: Dict[str, Any],
) -> None:
    output = b'{"completion":" Hello!","stop_reason":"stop_sequence","stop":"\\n\\nHuman:"}'
    streaming_body = StreamingBody(io.BytesIO(output), len(output))
    mock_response = {
        "ResponseMetadata": {
            "RequestId": "xxxxxxxx-yyyy-zzzz-1234-abcdefghijklmno",
            "HTTPStatusCode": 200,
            "HTTPHeaders": {
                "date": "Sun, 21 Jan 2024 20:00:00 GMT",
                "content-type": "application/json",
                "content-length": "74",
                "connection": "keep-alive",
                "x-amzn-requestid": "xxxxxxxx-yyyy-zzzz-1234-abcdefghijklmno",
                "x-amzn-bedrock-invocation-latency": "425",
                "x-amzn-bedrock-output-token-count": "6",
                "x-amzn-bedrock-input-token-count": "12",
            },
            "RetryAttempts": 0,
        },
        "contentType": "application/json",
        "body": streaming_body,
    }
    session = boto3.session.Session()
    client = session.client("bedrock-runtime", region_name="us-east-1")
    # instead of mocking the HTTP response, we mock the boto client method directly to avoid
    # complexities with mocking auth
    client._unwrapped_invoke_model = MagicMock(return_value=mock_response)
    body = {"prompt": "Human: hello there? Assistant:", "max_tokens_to_sample": 1024}
    model_name = "anthropic.claude-v2"
    if use_context_attributes:
        with using_attributes(
            session_id=session_id,
            user_id=user_id,
            metadata=metadata,
            tags=tags,
            prompt_template=prompt_template,
            prompt_template_version=prompt_template_version,
            prompt_template_variables=prompt_template_variables,
        ):
            client.invoke_model(
                modelId=model_name,
                body=json.dumps(body),
            )
    else:
        client.invoke_model(
            modelId=model_name,
            body=json.dumps(body),
        )

    spans = in_memory_span_exporter.get_finished_spans()
    assert len(spans) == 1
    span = spans[0]
    assert span.status.is_ok
    attributes = dict(span.attributes or dict())
    assert attributes.pop(OPENINFERENCE_SPAN_KIND) == OpenInferenceSpanKindValues.LLM.value
    assert attributes.pop(INPUT_VALUE) == body["prompt"]
    assert attributes.pop(OUTPUT_VALUE) == " Hello!"
    assert attributes.pop(LLM_MODEL_NAME) == model_name
    assert attributes.pop(LLM_TOKEN_COUNT_PROMPT) == 12
    assert attributes.pop(LLM_TOKEN_COUNT_COMPLETION) == 6
    assert attributes.pop(LLM_TOKEN_COUNT_TOTAL) == 18
    assert isinstance(invocation_parameters_str := attributes.pop(LLM_INVOCATION_PARAMETERS), str)
    assert json.loads(invocation_parameters_str) == {
        "max_tokens_to_sample": 1024,
    }
    if use_context_attributes:
        _check_context_attributes(
            attributes,
            session_id,
            user_id,
            metadata,
            tags,
            prompt_template,
            prompt_template_version,
            prompt_template_variables,
        )
    assert attributes == {}


@pytest.mark.parametrize("use_context_attributes", [False, True])
def test_invoke_client_with_missing_tokens(
    use_context_attributes: bool,
    in_memory_span_exporter: InMemorySpanExporter,
    session_id: str,
    user_id: str,
    metadata: Dict[str, Any],
    tags: List[str],
    prompt_template: str,
    prompt_template_version: str,
    prompt_template_variables: Dict[str, Any],
) -> None:
    output = b'{"completion":" Hello!","stop_reason":"stop_sequence","stop":"\\n\\nHuman:"}'
    streaming_body = StreamingBody(io.BytesIO(output), len(output))
    mock_response = {
        "ResponseMetadata": {
            "RequestId": "xxxxxxxx-yyyy-zzzz-1234-abcdefghijklmno",
            "HTTPStatusCode": 200,
            "HTTPHeaders": {
                "date": "Sun, 21 Jan 2024 20:00:00 GMT",
                "content-type": "application/json",
                "content-length": "74",
                "connection": "keep-alive",
                "x-amzn-requestid": "xxxxxxxx-yyyy-zzzz-1234-abcdefghijklmno",
                "x-amzn-bedrock-invocation-latency": "425",
                "x-amzn-bedrock-output-token-count": "6",
            },
            "RetryAttempts": 0,
        },
        "contentType": "application/json",
        "body": streaming_body,
    }
    session = boto3.session.Session()
    client = session.client("bedrock-runtime", region_name="us-east-1")

    # instead of mocking the HTTP response, we mock the boto client method directly to avoid
    # complexities with mocking auth
    client._unwrapped_invoke_model = MagicMock(return_value=mock_response)
    body = {"prompt": "Human: hello there? Assistant:", "max_tokens_to_sample": 1024}
    model_name = "anthropic.claude-v2"
    if use_context_attributes:
        with using_attributes(
            session_id=session_id,
            user_id=user_id,
            metadata=metadata,
            tags=tags,
            prompt_template=prompt_template,
            prompt_template_version=prompt_template_version,
            prompt_template_variables=prompt_template_variables,
        ):
            client.invoke_model(
                modelId=model_name,
                body=json.dumps(body),
            )
    else:
        client.invoke_model(
            modelId=model_name,
            body=json.dumps(body),
        )
    spans = in_memory_span_exporter.get_finished_spans()
    assert len(spans) == 1
    span = spans[0]
    assert span.status.is_ok
    attributes = dict(span.attributes or dict())
    assert attributes.pop(OPENINFERENCE_SPAN_KIND) == OpenInferenceSpanKindValues.LLM.value
    assert attributes.pop(INPUT_VALUE) == body["prompt"]
    assert attributes.pop(OUTPUT_VALUE) == " Hello!"
    assert attributes.pop(LLM_MODEL_NAME) == model_name
    assert attributes.pop(LLM_TOKEN_COUNT_COMPLETION) == 6
    assert isinstance(invocation_parameters_str := attributes.pop(LLM_INVOCATION_PARAMETERS), str)
    assert json.loads(invocation_parameters_str) == {
        "max_tokens_to_sample": 1024,
    }
    if use_context_attributes:
        _check_context_attributes(
            attributes,
            session_id,
            user_id,
            metadata,
            tags,
            prompt_template,
            prompt_template_version,
            prompt_template_variables,
        )
    assert attributes == {}


@pytest.mark.parametrize("use_context_attributes", [False, True])
def test_converse(
    use_context_attributes: bool,
    in_memory_span_exporter: InMemorySpanExporter,
    session_id: str,
    user_id: str,
    metadata: Dict[str, Any],
    tags: List[str],
    prompt_template: str,
    prompt_template_version: str,
    prompt_template_variables: Dict[str, Any],
) -> None:
    if version := boto3.__version__ < _MINIMUM_CONVERSE_BOTOCORE_VERSION:
        pytest.xfail(
            f"Botocore {version} does not support the Converse API. "
            f"Converse API introduced in {_MINIMUM_CONVERSE_BOTOCORE_VERSION}"
        )
    system = [{"text": "return a short response"}]
    inference_config = {"maxTokens": 1024, "temperature": 0.0}
    output = {
        "message": {
            "role": "assistant",
            "content": [{"text": "Hi there! How can I assist you today?"}],
        }
    }
    mock_response = {
        "ResponseMetadata": {
            "RequestId": "xxxxxxxx-yyyy-zzzz-1234-abcdefghijklmno",
            "HTTPStatusCode": 200,
            "HTTPHeaders": {
                "date": "Sun, 21 Jan 2024 20:00:00 GMT",
                "content-type": "application/json",
                "content-length": "74",
                "connection": "keep-alive",
                "x-amzn-requestid": "xxxxxxxx-yyyy-zzzz-1234-abcdefghijklmno",
                "x-amzn-bedrock-invocation-latency": "425",
                "x-amzn-bedrock-output-token-count": "6",
                "x-amzn-bedrock-input-token-count": "12",
            },
            "RetryAttempts": 0,
        },
        "output": output,
        "usage": {"inputTokens": 12, "outputTokens": 6, "totalTokens": 18},
    }
    session = boto3.session.Session()
    client = session.client("bedrock-runtime", region_name="us-east-1")
    # instead of mocking the HTTP response, we mock the boto client method directly to avoid
    # complexities with mocking auth
    client._unwrapped_converse = MagicMock(return_value=mock_response)
    message = {"role": "user", "content": [{"text": "hello there?"}]}
    model_name = "anthropic.claude-3-5-sonnet-20240620-v1:0"
    if use_context_attributes:
        with using_attributes(
            session_id=session_id,
            user_id=user_id,
            metadata=metadata,
            tags=tags,
            prompt_template=prompt_template,
            prompt_template_version=prompt_template_version,
            prompt_template_variables=prompt_template_variables,
        ):
            client.converse(
                modelId=model_name,
                system=system,
                messages=[message],
                inferenceConfig=inference_config,
            )
    else:
        client.converse(
            modelId=model_name, system=system, messages=[message], inferenceConfig=inference_config
        )

    llm_input_messages_truths = [
        {"role": "system", "content": system[0]["text"]},
        {"role": message.get("role"), "content": message.get("content", [{}])[0].get("text")},  # type: ignore
    ]

    spans = in_memory_span_exporter.get_finished_spans()
    assert len(spans) == 1
    _run_converse_checks(
        use_context_attributes,
        session_id,
        user_id,
        metadata,
        tags,
        prompt_template,
        prompt_template_version,
        prompt_template_variables,
        span=spans[0],
        llm_input_messages_truth=llm_input_messages_truths,
        input=message["content"][0]["text"],  # type: ignore
        output=output,
        model_name=model_name,
        token_counts=mock_response["usage"],  # type: ignore
        invocation_parameters=inference_config,
    )


@pytest.mark.parametrize("use_context_attributes", [False, True])
def test_converse_multiple(
    use_context_attributes: bool,
    in_memory_span_exporter: InMemorySpanExporter,
    session_id: str,
    user_id: str,
    metadata: Dict[str, Any],
    tags: List[str],
    prompt_template: str,
    prompt_template_version: str,
    prompt_template_variables: Dict[str, Any],
) -> None:
    if version := boto3.__version__ < _MINIMUM_CONVERSE_BOTOCORE_VERSION:
        pytest.xfail(
            f"Botocore {version} does not support the Converse API. "
            f"Converse API introduced in {_MINIMUM_CONVERSE_BOTOCORE_VERSION}"
        )
    first_output = {
        "message": {
            "role": "assistant",
            "content": [{"text": "Hi there! How can I assist you today?"}],
        }
    }
    first_mock_response = {
        "ResponseMetadata": {
            "RequestId": "xxxxxxxx-yyyy-zzzz-1234-abcdefghijklmno",
            "HTTPStatusCode": 200,
            "HTTPHeaders": {
                "date": "Sun, 21 Jan 2024 20:00:00 GMT",
                "content-type": "application/json",
                "content-length": "74",
                "connection": "keep-alive",
                "x-amzn-requestid": "xxxxxxxx-yyyy-zzzz-1234-abcdefghijklmno",
                "x-amzn-bedrock-invocation-latency": "425",
                "x-amzn-bedrock-output-token-count": "6",
                "x-amzn-bedrock-input-token-count": "12",
            },
            "RetryAttempts": 0,
        },
        "output": first_output,
        "usage": {"inputTokens": 12, "outputTokens": 6, "totalTokens": 18},
    }

    session = boto3.session.Session()
    client = session.client("bedrock-runtime", region_name="us-east-1")
    # instead of mocking the HTTP response, we mock the boto client method directly to avoid
    # complexities with mocking auth
    client._unwrapped_converse = MagicMock(return_value=first_mock_response)

    system = [{"text": "return a short response."}, {"text": "clarify your responses."}]
    inference_config = {"maxTokens": 1024, "temperature": 0.0}
    first_msg = {"role": "user", "content": [{"text": "hello there?"}]}
    second_msg = {"role": "user", "content": [{"text": "how are you?"}]}
    model_name = "anthropic.claude-3-5-sonnet-20240620-v1:0"
    messages = [first_msg]
    if use_context_attributes:
        with using_attributes(
            session_id=session_id,
            user_id=user_id,
            metadata=metadata,
            tags=tags,
            prompt_template=prompt_template,
            prompt_template_version=prompt_template_version,
            prompt_template_variables=prompt_template_variables,
        ):
            response = client.converse(
                modelId=model_name,
                system=system,
                messages=messages,
                inferenceConfig=inference_config,
            )
    else:
        response = client.converse(
            modelId=model_name, system=system, messages=messages, inferenceConfig=inference_config
        )

    spans = in_memory_span_exporter.get_finished_spans()
    assert len(spans) == 1
    system_prompt1, system_prompt2 = system[0].get("text"), system[1].get("text")
    llm_input_messages_truths = [
        {"role": "system", "content": f"{system_prompt1} {system_prompt2}"},
        {"role": first_msg["role"], "content": first_msg["content"][0]["text"]},  # type: ignore
    ]
    _run_converse_checks(
        use_context_attributes,
        session_id,
        user_id,
        metadata,
        tags,
        prompt_template,
        prompt_template_version,
        prompt_template_variables,
        span=spans[0],
        llm_input_messages_truth=llm_input_messages_truths,
        input=first_msg["content"][0]["text"],  # type: ignore
        output=first_output,
        model_name=model_name,
        token_counts=first_mock_response["usage"],  # type: ignore
        invocation_parameters=inference_config,
    )

    second_output = {
        "message": {
            "role": "assistant",
            "content": [
                {"text": "I'm functioning well, thank you for asking. How are you doing today?"},
            ],
        }
    }
    second_mock_response = {
        "ResponseMetadata": {
            "RequestId": "xxxxxxxx-yyyy-zzzz-1234-abcdefghijklmno",
            "HTTPStatusCode": 200,
            "HTTPHeaders": {
                "date": "Sun, 21 Jan 2024 20:00:00 GMT",
                "content-type": "application/json",
                "content-length": "74",
                "connection": "keep-alive",
                "x-amzn-requestid": "xxxxxxxx-yyyy-zzzz-1234-abcdefghijklmno",
                "x-amzn-bedrock-invocation-latency": "425",
                "x-amzn-bedrock-output-token-count": "6",
                "x-amzn-bedrock-input-token-count": "12",
            },
            "RetryAttempts": 0,
        },
        "output": second_output,
        "usage": {"inputTokens": 12, "outputTokens": 6, "totalTokens": 18},
    }
    client._unwrapped_converse = MagicMock(return_value=second_mock_response)
    messages.extend([response["output"]["message"], second_msg])
    if use_context_attributes:
        with using_attributes(
            session_id=session_id,
            user_id=user_id,
            metadata=metadata,
            tags=tags,
            prompt_template=prompt_template,
            prompt_template_version=prompt_template_version,
            prompt_template_variables=prompt_template_variables,
        ):
            client.converse(
                modelId=model_name,
                system=system,
                messages=messages,
                inferenceConfig=inference_config,
            )
    else:
        client.converse(
            modelId=model_name, system=system, messages=messages, inferenceConfig=inference_config
        )

    spans = in_memory_span_exporter.get_finished_spans()
    assert len(spans) == 2
    llm_input_messages_truths.extend(
        [
            {
                "role": first_output["message"]["role"],
                "content": first_output["message"]["content"][0]["text"],  # type: ignore
            },
            {"role": second_msg["role"], "content": second_msg["content"][0]["text"]},  # type: ignore
        ]
    )
    _run_converse_checks(
        use_context_attributes,
        session_id,
        user_id,
        metadata,
        tags,
        prompt_template,
        prompt_template_version,
        prompt_template_variables,
        span=spans[1],
        llm_input_messages_truth=llm_input_messages_truths,
        input=second_msg["content"][0]["text"],  # type: ignore
        output=second_output,
        model_name=model_name,
        token_counts=second_mock_response["usage"],  # type: ignore
        invocation_parameters=inference_config,
    )


@pytest.mark.parametrize("use_context_attributes", [False, True])
def test_converse_with_missing_tokens(
    use_context_attributes: bool,
    in_memory_span_exporter: InMemorySpanExporter,
    session_id: str,
    user_id: str,
    metadata: Dict[str, Any],
    tags: List[str],
    prompt_template: str,
    prompt_template_version: str,
    prompt_template_variables: Dict[str, Any],
) -> None:
    if version := boto3.__version__ < _MINIMUM_CONVERSE_BOTOCORE_VERSION:
        pytest.xfail(
            f"Botocore {version} does not support the Converse API. "
            f"Converse API introduced in {_MINIMUM_CONVERSE_BOTOCORE_VERSION}"
        )
    system = [{"text": "return a short response"}]
    inference_config = {"maxTokens": 1024, "temperature": 0.0}
    output = {
        "message": {
            "role": "assistant",
            "content": [{"text": "Hi there! How can I assist you today?"}],
        }
    }
    mock_response = {
        "ResponseMetadata": {
            "RequestId": "xxxxxxxx-yyyy-zzzz-1234-abcdefghijklmno",
            "HTTPStatusCode": 200,
            "HTTPHeaders": {
                "date": "Sun, 21 Jan 2024 20:00:00 GMT",
                "content-type": "application/json",
                "content-length": "74",
                "connection": "keep-alive",
                "x-amzn-requestid": "xxxxxxxx-yyyy-zzzz-1234-abcdefghijklmno",
                "x-amzn-bedrock-invocation-latency": "425",
                "x-amzn-bedrock-output-token-count": "6",
            },
            "RetryAttempts": 0,
        },
        "output": output,
        "usage": {"outputTokens": 6},
    }
    session = boto3.session.Session()
    client = session.client("bedrock-runtime", region_name="us-east-1")
    # instead of mocking the HTTP response, we mock the boto client method directly to avoid
    # complexities with mocking auth
    client._unwrapped_converse = MagicMock(return_value=mock_response)
    message = {"role": "user", "content": [{"text": "hello there?"}]}
    model_name = "anthropic.claude-3-5-sonnet-20240620-v1:0"
    if use_context_attributes:
        with using_attributes(
            session_id=session_id,
            user_id=user_id,
            metadata=metadata,
            tags=tags,
            prompt_template=prompt_template,
            prompt_template_version=prompt_template_version,
            prompt_template_variables=prompt_template_variables,
        ):
            client.converse(
                modelId=model_name,
                system=system,
                messages=[message],
                inferenceConfig=inference_config,
            )
    else:
        client.converse(
            modelId=model_name, system=system, messages=[message], inferenceConfig=inference_config
        )

    spans = in_memory_span_exporter.get_finished_spans()
    assert len(spans) == 1
    llm_input_messages_truths = [
        {"role": "system", "content": system[0]["text"]},
        {"role": message["role"], "content": message["content"][0]["text"]},  # type: ignore
    ]
    _run_converse_checks(
        use_context_attributes,
        session_id,
        user_id,
        metadata,
        tags,
        prompt_template,
        prompt_template_version,
        prompt_template_variables,
        span=spans[0],
        llm_input_messages_truth=llm_input_messages_truths,
        input=message["content"][0]["text"],  # type: ignore
        output=output,
        model_name=model_name,
        token_counts=mock_response["usage"],  # type: ignore
        invocation_parameters=inference_config,
    )


@pytest.mark.parametrize("use_context_attributes", [False, True])
@pytest.mark.parametrize(
    "model_id",
    [
        "mistral.mistral-7b-instruct-v0:2",
        "mistral.mixtral-8x7b-instruct-v0:1",
        "mistral.mistral-large-2402-v1:0",
        "mistral.mistral-small-2402-v1:0",
        "meta.llama3-8b-instruct-v1:0",
        "meta.llama3-70b-instruct-v1:0",
    ],
)
def test_converse_multiple_models(
    use_context_attributes: bool,
    in_memory_span_exporter: InMemorySpanExporter,
    session_id: str,
    user_id: str,
    metadata: Dict[str, Any],
    tags: List[str],
    prompt_template: str,
    prompt_template_version: str,
    prompt_template_variables: Dict[str, Any],
    model_id: str,
) -> None:
    if version := boto3.__version__ < _MINIMUM_CONVERSE_BOTOCORE_VERSION:
        pytest.xfail(
            f"Botocore {version} does not support the Converse API. "
            f"Converse API introduced in {_MINIMUM_CONVERSE_BOTOCORE_VERSION}"
        )
    inference_config = {"maxTokens": 1024, "temperature": 0.0}
    output = {
        "message": {
            "role": "assistant",
            "content": [{"text": "Hi there! How can I assist you today?"}],
        }
    }
    mock_response = {
        "ResponseMetadata": {
            "RequestId": "xxxxxxxx-yyyy-zzzz-1234-abcdefghijklmno",
            "HTTPStatusCode": 200,
            "HTTPHeaders": {
                "date": "Sun, 21 Jan 2024 20:00:00 GMT",
                "content-type": "application/json",
                "content-length": "74",
                "connection": "keep-alive",
                "x-amzn-requestid": "xxxxxxxx-yyyy-zzzz-1234-abcdefghijklmno",
                "x-amzn-bedrock-invocation-latency": "425",
                "x-amzn-bedrock-output-token-count": "6",
                "x-amzn-bedrock-input-token-count": "12",
            },
            "RetryAttempts": 0,
        },
        "output": output,
        "usage": {"inputTokens": 12, "outputTokens": 6, "totalTokens": 18},
    }
    session = boto3.session.Session()
    client = session.client("bedrock-runtime", region_name="us-east-1")
    # instead of mocking the HTTP response, we mock the boto client method directly to avoid
    # complexities with mocking auth
    client._unwrapped_converse = MagicMock(return_value=mock_response)
    message = {"role": "user", "content": [{"text": "hello there?"}]}
    if use_context_attributes:
        with using_attributes(
            session_id=session_id,
            user_id=user_id,
            metadata=metadata,
            tags=tags,
            prompt_template=prompt_template,
            prompt_template_version=prompt_template_version,
            prompt_template_variables=prompt_template_variables,
        ):
            client.converse(
                modelId=model_id,
                messages=[message],
                inferenceConfig=inference_config,
            )
    else:
        client.converse(modelId=model_id, messages=[message], inferenceConfig=inference_config)

    llm_input_messages_truths = [
        {"role": message["role"], "content": message["content"][0]["text"]},  # type: ignore
    ]

    spans = in_memory_span_exporter.get_finished_spans()
    assert len(spans) == 1
    _run_converse_checks(
        use_context_attributes,
        session_id,
        user_id,
        metadata,
        tags,
        prompt_template,
        prompt_template_version,
        prompt_template_variables,
        span=spans[0],
        llm_input_messages_truth=llm_input_messages_truths,
        input=message["content"][0]["text"],  # type: ignore
        output=output,
        model_name=model_id,
        token_counts=mock_response["usage"],  # type: ignore
        invocation_parameters=inference_config,
    )


@pytest.mark.parametrize("use_context_attributes", [False])  # , True])
def test_converse_multimodal(
    use_context_attributes: bool,
    in_memory_span_exporter: InMemorySpanExporter,
    image_bytes_and_format: Tuple[bytes, str],
    session_id: str,
    user_id: str,
    metadata: Dict[str, Any],
    tags: List[str],
    prompt_template: str,
    prompt_template_version: str,
    prompt_template_variables: Dict[str, Any],
) -> None:
    if version := boto3.__version__ < _MINIMUM_CONVERSE_BOTOCORE_VERSION:
        pytest.xfail(
            f"Botocore {version} does not support the Converse API. "
            f"Converse API introduced in {_MINIMUM_CONVERSE_BOTOCORE_VERSION}"
        )
    system = [{"text": "return a short response"}]
    inference_config = {"maxTokens": 1024, "temperature": 0.0}
    output = {
        "message": {
            "role": "assistant",
            "content": [{"text": "Hi there! How can I assist you today?"}],
        }
    }
    mock_response = {
        "ResponseMetadata": {
            "RequestId": "xxxxxxxx-yyyy-zzzz-1234-abcdefghijklmno",
            "HTTPStatusCode": 200,
            "HTTPHeaders": {
                "date": "Sun, 21 Jan 2024 20:00:00 GMT",
                "content-type": "application/json",
                "content-length": "74",
                "connection": "keep-alive",
                "x-amzn-requestid": "xxxxxxxx-yyyy-zzzz-1234-abcdefghijklmno",
                "x-amzn-bedrock-invocation-latency": "425",
                "x-amzn-bedrock-output-token-count": "6",
                "x-amzn-bedrock-input-token-count": "12",
            },
            "RetryAttempts": 0,
        },
        "output": output,
        "usage": {"inputTokens": 12, "outputTokens": 6, "totalTokens": 18},
    }
    session = boto3.session.Session()
    client = session.client("bedrock-runtime", region_name="us-east-1")
    # instead of mocking the HTTP response, we mock the boto client method directly to avoid
    # complexities with mocking auth
    client._unwrapped_converse = MagicMock(return_value=mock_response)
    model_name = "anthropic.claude-3-5-sonnet-20240620-v1:0"
    input_text = "What's in this image?"

    img_bytes, format = image_bytes_and_format
    message = {
        "role": "user",
        "content": [
            {
                "text": input_text,
            },
            {
                "image": {
                    "format": format,
                    "source": {
                        "bytes": img_bytes,
                    },
                }
            },
        ],
    }

    if use_context_attributes:
        with using_attributes(
            session_id=session_id,
            user_id=user_id,
            metadata=metadata,
            tags=tags,
            prompt_template=prompt_template,
            prompt_template_version=prompt_template_version,
            prompt_template_variables=prompt_template_variables,
        ):
            client.converse(
                modelId=model_name,
                system=system,
                messages=[message],
                inferenceConfig=inference_config,
            )
    else:
        client.converse(
            modelId=model_name,
            system=system,
            messages=[message],
            inferenceConfig=inference_config,
        )

    llm_input_messages_truths = [
        {"role": "system", "content": system[0]["text"]},
        {"role": message.get("role"), "content": message.get("content")},
    ]

    spans = in_memory_span_exporter.get_finished_spans()
    assert len(spans) == 1
    _run_converse_checks(
        use_context_attributes,
        session_id,
        user_id,
        metadata,
        tags,
        prompt_template,
        prompt_template_version,
        prompt_template_variables,
        span=spans[0],
        llm_input_messages_truth=llm_input_messages_truths,  # type:ignore
        input=message["content"][0]["text"],  # type: ignore
        output=output,
        model_name=model_name,
        token_counts=mock_response["usage"],  # type: ignore
        invocation_parameters=inference_config,
    )


def _check_context_attributes(
    attributes: Dict[str, Any],
    session_id: str,
    user_id: str,
    metadata: Dict[str, Any],
    tags: List[str],
    prompt_template: str,
    prompt_template_version: str,
    prompt_template_variables: Dict[str, Any],
) -> None:
    assert attributes.pop(SESSION_ID, None) == session_id
    assert attributes.pop(USER_ID, None) == user_id
    attr_metadata = attributes.pop(METADATA, None)
    assert attr_metadata is not None
    assert isinstance(attr_metadata, str)  # must be json string
    metadata_dict = json.loads(attr_metadata)
    assert metadata_dict == metadata
    attr_tags = attributes.pop(TAG_TAGS, None)
    assert attr_tags is not None
    assert len(attr_tags) == len(tags)
    assert list(attr_tags) == tags
    assert attributes.pop(SpanAttributes.LLM_PROMPT_TEMPLATE, None) == prompt_template
    assert (
        attributes.pop(SpanAttributes.LLM_PROMPT_TEMPLATE_VERSION, None) == prompt_template_version
    )
    assert attributes.pop(SpanAttributes.LLM_PROMPT_TEMPLATE_VARIABLES, None) == json.dumps(
        prompt_template_variables
    )


def _run_converse_checks(
    use_context_attributes: bool,
    session_id: str,
    user_id: str,
    metadata: Dict[str, Any],
    tags: List[str],
    prompt_template: str,
    prompt_template_version: str,
    prompt_template_variables: Dict[str, Any],
    span: trace_sdk.ReadableSpan,
    llm_input_messages_truth: List[Dict[str, str]],
    input: str,
    output: Dict[str, Any],
    model_name: str,
    token_counts: Dict[Any, Any],
    invocation_parameters: Dict[str, Any],
) -> None:
    assert span.status.is_ok
    attributes = dict(span.attributes or dict())
    assert attributes.pop(OPENINFERENCE_SPAN_KIND) == OpenInferenceSpanKindValues.LLM.value
    assert attributes.pop(LLM_MODEL_NAME) == model_name

    assert attributes.pop(LLM_TOKEN_COUNT_PROMPT, None) == token_counts.get("inputTokens")
    assert attributes.pop(LLM_TOKEN_COUNT_COMPLETION, None) == token_counts.get("outputTokens")
    assert attributes.pop(LLM_TOKEN_COUNT_TOTAL, None) == token_counts.get("totalTokens")

    assert isinstance(invocation_parameters_str := attributes.pop(LLM_INVOCATION_PARAMETERS), str)
    assert json.loads(invocation_parameters_str) == invocation_parameters

    assert attributes.pop(OUTPUT_VALUE) == output["message"]["content"][0]["text"]
    assert attributes.pop("llm.output_messages.0.message.role") == output["message"]["role"]
    assert (
        attributes.pop("llm.output_messages.0.message.content")
        == output["message"]["content"][0]["text"]
    )

    assert attributes.pop(INPUT_VALUE) == input
    for msg_idx, msg in enumerate(llm_input_messages_truth):
        role_key = f"llm.input_messages.{msg_idx}.message.role"
        content_key = f"llm.input_messages.{msg_idx}.message.contents"
        assert attributes.pop(role_key) == msg["role"], f"Role mismatch for message {msg_idx}."
        content = msg["content"]
        if isinstance(content, str):
            content = [{"text": content}]  # type:ignore
        for content_idx, content_item in enumerate(content):
            if content_item.get("image"):  # type:ignore
                expected_type = "image"
                base64_img = base64.b64encode(content_item["image"]["source"]["bytes"]).decode(  # type:ignore
                    "utf-8"
                )
                expected_value = f"data:image/jpeg;base64,{base64_img}"
                value_key = f"{content_key}.{content_idx}.message_content.image.image.url"
            else:
                expected_type = "text"
                expected_value = content_item["text"]  # type:ignore
                value_key = f"{content_key}.{content_idx}.message_content.text"
            type_key = f"{content_key}.{content_idx}.message_content.type"
            assert attributes.pop(type_key) == expected_type
            assert attributes.pop(value_key) == expected_value

    if use_context_attributes:
        _check_context_attributes(
            attributes,
            session_id,
            user_id,
            metadata,
            tags,
            prompt_template,
            prompt_template_version,
            prompt_template_variables,
        )
    assert attributes == {}


OPENINFERENCE_SPAN_KIND = SpanAttributes.OPENINFERENCE_SPAN_KIND
INPUT_MIME_TYPE = SpanAttributes.INPUT_MIME_TYPE
INPUT_VALUE = SpanAttributes.INPUT_VALUE
LLM_INPUT_MESSAGES = SpanAttributes.LLM_INPUT_MESSAGES
LLM_INVOCATION_PARAMETERS = SpanAttributes.LLM_INVOCATION_PARAMETERS
LLM_MODEL_NAME = SpanAttributes.LLM_MODEL_NAME
LLM_TOKEN_COUNT_COMPLETION = SpanAttributes.LLM_TOKEN_COUNT_COMPLETION
LLM_TOKEN_COUNT_PROMPT = SpanAttributes.LLM_TOKEN_COUNT_PROMPT
LLM_TOKEN_COUNT_TOTAL = SpanAttributes.LLM_TOKEN_COUNT_TOTAL
METADATA = SpanAttributes.METADATA
OUTPUT_MIME_TYPE = SpanAttributes.OUTPUT_MIME_TYPE
OUTPUT_VALUE = SpanAttributes.OUTPUT_VALUE
JSON = OpenInferenceMimeTypeValues.JSON
SESSION_ID = SpanAttributes.SESSION_ID
USER_ID = SpanAttributes.USER_ID
TAG_TAGS = SpanAttributes.TAG_TAGS
