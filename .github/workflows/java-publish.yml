name: Java Publish
on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to publish (e.g., java-openinference-semantic-conventions-v0.1.0)'
        required: true
        type: string

jobs:
  publish:
    # Only run for Java releases (tags starting with 'java-')
    if: startsWith(github.event.release.tag_name, 'java-') || (github.event_name == 'workflow_dispatch' && startsWith(github.event.inputs.tag, 'java-'))
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.release.tag_name || github.event.inputs.tag }}
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: Extract version and component from tag
      id: version
      run: |
        TAG="${{ github.event.release.tag_name || github.event.inputs.tag }}"
        # Extract version from tag like java-openinference-semantic-conventions-v0.1.0
        VERSION=$(echo $TAG | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | sed 's/v//')
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        
        # Extract component name from tag
        COMPONENT=$(echo $TAG | sed 's/-v[0-9]\+\.[0-9]\+\.[0-9]\+$//' | sed 's/^java-//')
        echo "COMPONENT=$COMPONENT" >> $GITHUB_OUTPUT
        echo "Extracted component: $COMPONENT"
    
    - name: Verify version matches gradle.properties
      working-directory: ./java
      run: |
        # Map component names to directories
        case "${{ steps.version.outputs.COMPONENT }}" in
          "openinference-semantic-conventions")
            GRADLE_PROPS="openinference-semantic-conventions/gradle.properties"
            ;;
          "openinference-instrumentation")
            GRADLE_PROPS="openinference-instrumentation/gradle.properties"
            ;;
          "openinference-instrumentation-langchain4j")
            GRADLE_PROPS="instrumentation/openinference-instrumentation-langchain4j/gradle.properties"
            ;;
          *)
            echo "Unknown component: ${{ steps.version.outputs.COMPONENT }}"
            exit 1
            ;;
        esac
        
        # Check if gradle.properties exists and contains the correct version
        if [ -f "$GRADLE_PROPS" ]; then
          PROPS_VERSION=$(grep "^version=" "$GRADLE_PROPS" | cut -d'=' -f2 | sed 's/-SNAPSHOT$//')
          if [ "$PROPS_VERSION" = "${{ steps.version.outputs.VERSION }}" ]; then
            echo "Version in $GRADLE_PROPS matches tag version: ${{ steps.version.outputs.VERSION }}"
          else
            echo "ERROR: Version mismatch!"
            echo "Tag version: ${{ steps.version.outputs.VERSION }}"
            echo "gradle.properties version: $PROPS_VERSION"
            exit 1
          fi
        else
          echo "ERROR: $GRADLE_PROPS not found!"
          exit 1
        fi
    
    - name: Stage artifacts locally
      working-directory: ./java
      run: |
        ./gradlew clean publish
    
    - name: Deploy to Maven Central with JReleaser
      working-directory: ./java
      env:
        JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
        JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}
        JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
        JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRETKEY }}
        JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLICKEY }}
      run: |
        ./gradlew jreleaserDeploy
    
    - name: Clean up
      if: always()
      run: |
        rm -rf ./java/build/staging-deploy
