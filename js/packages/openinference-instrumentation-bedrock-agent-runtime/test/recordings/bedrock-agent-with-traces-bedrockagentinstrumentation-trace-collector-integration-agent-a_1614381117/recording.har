{
  "log": {
    "_recordingName": "bedrock-agent-with-traces - bedrockagentinstrumentation-trace-collector-integration---agent-attributes-and-api-recording-should-record-knowledge-base-traces-and-api-response-in-span",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "1358cd542264aaaac7f23bf493fe0972",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 62,
          "cookies": [],
          "headers": [
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "content-length",
              "value": "62"
            },
            {
              "name": "x-amz-user-agent",
              "value": "aws-sdk-js/3.863.0"
            },
            {
              "name": "user-agent",
              "value": "aws-sdk-js/3.863.0 ua/2.1 os/darwin#22.6.0 lang/js md/nodejs#20.19.3 api/bedrock-agent-runtime#3.863.0 m/E,e"
            },
            {
              "name": "host",
              "value": "bedrock-agent-runtime.ap-south-1.amazonaws.com"
            },
            {
              "name": "amz-sdk-invocation-id",
              "value": "32b87adb-32f4-4bf5-8cde-c5379120bf96"
            },
            {
              "name": "amz-sdk-request",
              "value": "attempt=1; max=3"
            },
            {
              "name": "x-amz-date",
              "value": "20250811T032136Z"
            },
            {
              "name": "x-amz-content-sha256",
              "value": "917ce1ac626d4ab1450659cbac1e930f0613cc883a47b691057effb70cc006c9"
            }
          ],
          "headersSize": 953,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\"enableTrace\":true,\"inputText\":\"What is Task decomposition?\"}"
          },
          "queryString": [],
          "url": "https://bedrock-agent-runtime.ap-south-1.amazonaws.com/agents/G0OUMYARBX/agentAliases/YYTTVM7BYE/sessions/default-session1_1234567891/text"
        },
        "response": {
          "bodySize": 38908,
          "content": {
            "encoding": "base64",
            "mimeType": "application/vnd.amazon.eventstream",
            "size": 38908,
            "text": ""
          },
          "cookies": [],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 11 Aug 2025 03:21:37 GMT"
            },
            {
              "name": "content-type",
              "value": "application/vnd.amazon.eventstream"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "x-amzn-requestid",
              "value": "d7a3f421-997f-4a7d-8f2f-f2ef032f1154"
            },
            {
              "name": "x-amz-bedrock-agent-session-id",
              "value": "default-session1_1234567891"
            },
            {
              "name": "x-amzn-bedrock-agent-content-type",
              "value": "application/json"
            }
          ],
          "headersSize": 311,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2025-08-11T03:21:36.906Z",
        "time": 9198,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 9198
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
