{
  "log": {
    "_recordingName": "bedrock-agent-with-traces - bedrockagentinstrumentation-trace-collector-integration---agent-attributes-and-api-recording-should-record-code-interpreter-orchestration-trace",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "b1c5fa057d6328095349d4206419e205",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 63,
          "cookies": [],
          "headers": [
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "content-length",
              "value": "63"
            },
            {
              "name": "x-amz-user-agent",
              "value": "aws-sdk-js/3.863.0"
            },
            {
              "name": "user-agent",
              "value": "aws-sdk-js/3.863.0 ua/2.1 os/darwin#22.6.0 lang/js md/nodejs#20.19.3 api/bedrock-agent-runtime#3.863.0 m/E,e"
            },
            {
              "name": "host",
              "value": "bedrock-agent-runtime.us-east-1.amazonaws.com"
            },
            {
              "name": "amz-sdk-invocation-id",
              "value": "a81beebd-db2c-4864-8a9b-234fe86a2dcc"
            },
            {
              "name": "amz-sdk-request",
              "value": "attempt=1; max=3"
            },
            {
              "name": "x-amz-date",
              "value": "20250811T032836Z"
            },
            {
              "name": "x-amz-content-sha256",
              "value": "f116cde9b274ca08fd1b53189c508b578c93869cc249ae576dc0ea67d441a454"
            }
          ],
          "headersSize": 950,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\"enableTrace\":true,\"inputText\":\"Write programe for (a+b)**3?\"}"
          },
          "queryString": [],
          "url": "https://bedrock-agent-runtime.us-east-1.amazonaws.com/agents/EQWGOQC49C/agentAliases/ALR0DJYNLC/sessions/default-session1_1234567891/text"
        },
        "response": {
          "bodySize": 53680,
          "content": {
            "encoding": "base64",
            "mimeType": "application/vnd.amazon.eventstream",
            "size": 53680,
            "text": ""
          },
          "cookies": [],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 11 Aug 2025 03:28:38 GMT"
            },
            {
              "name": "content-type",
              "value": "application/vnd.amazon.eventstream"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "x-amzn-requestid",
              "value": "04b03d39-f570-453c-a7c5-f357b18ee23a"
            },
            {
              "name": "x-amz-bedrock-agent-session-id",
              "value": "default-session1_1234567891"
            },
            {
              "name": "x-amzn-bedrock-agent-content-type",
              "value": "application/json"
            }
          ],
          "headersSize": 311,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2025-08-11T03:28:36.077Z",
        "time": 23997,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 23997
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
