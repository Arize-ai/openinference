plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.jreleaser' version '1.19.0'
    id "com.diffplug.spotless" version "6.8.0" apply false
}

allprojects {
    group = 'com.arize'
    version = '0.1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'com.diffplug.spotless'

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        withJavadocJar()
        withSourcesJar()
    }

    ext {
        // OpenTelemetry versions
        openTelemetryVersion = '1.49.0'
        openTelemetryInstrumentationVersion = '2.14.0'
        openTelemetryInstrumentationAlphaVersion = '2.14.0-alpha'
        
        // LangChain4j version
        langchain4jVersion = '0.35.0'
        
        // Testing dependencies
        junitVersion = '5.10.2'
        mockitoVersion = '5.11.0'
        assertjVersion = '3.25.3'
        
        // Other dependencies
        jacksonVersion = '2.17.0'
        slf4jVersion = '2.0.12'
        autoServiceVersion = '1.1.1'
    }

    dependencies {
        // Common test dependencies
        testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
        testImplementation "org.mockito:mockito-core:${mockitoVersion}"
        testImplementation "org.assertj:assertj-core:${assertjVersion}"
        testImplementation "org.slf4j:slf4j-simple:${slf4jVersion}"
    }

    test {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs.add('-parameters')
    }

    // Configure javadoc
    javadoc {
        options.encoding = 'UTF-8'
        options.addStringOption('Xdoclint:none', '-quiet')
        
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    spotless {
        java {
            target 'src/**/*.java'
            toggleOffOn()
            palantirJavaFormat()
            removeUnusedImports()
            trimTrailingWhitespace()
            endWithNewline()
        }
    }


    // Publishing configuration
    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                
                // Ensure dependency versions are resolved in POM
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                
                pom {
                    name = project.name
                    description = project.description ?: 'OpenInference Java Library'
                    url = 'https://github.com/Arize-ai/openinference'
                    
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    
                    developers {
                        developer {
                            id = 'arize'
                            name = 'Arize AI'
                            email = 'support@arize.com'
                            organization = 'Arize AI'
                            organizationUrl = 'https://arize.com'
                        }
                    }
                    
                    scm {
                        connection = 'scm:git:git://github.com/Arize-ai/openinference.git'
                        developerConnection = 'scm:git:ssh://github.com:Arize-ai/openinference.git'
                        url = 'https://github.com/Arize-ai/openinference'
                    }
                }
            }
        }
        
        repositories {
            maven {
                url = layout.buildDirectory.dir('staging-deploy')
            }
        }
    }
    
    // Signing configuration
    signing {
        required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask('publish') }
        sign publishing.publications.maven
    }
}

// JReleaser configuration for Maven Central
jreleaser {
    signing {
        active = 'ALWAYS'
        armored = true
        
        // Determine mode based on available configuration
        def hasFileKeys = findProperty('jreleaser.signing.secretKey') || System.getenv('JRELEASER_GPG_SECRETKEY')
        mode = hasFileKeys ? 'FILE' : 'MEMORY'
        
        // For file mode - requires both public and secret key files
        if (hasFileKeys) {
            publicKey = findProperty('jreleaser.signing.publicKey') ?: System.getenv('JRELEASER_GPG_PUBLICKEY')
            secretKey = findProperty('jreleaser.signing.secretKey') ?: System.getenv('JRELEASER_GPG_SECRETKEY')
        }
        // For memory mode - keys will be loaded from config.toml or environment variables
    }
    
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    // Include all subproject staging directories
                    stagingRepositories = [
                        'openinference-semantic-conventions/build/staging-deploy',
                        'openinference-instrumentation/build/staging-deploy', 
                        'instrumentation/openinference-instrumentation-langchain4j/build/staging-deploy'
                    ]
                }
            }
            
            /* Legacy OSSRH - uncomment if using old OSSRH account
            nexus2 {
                'maven-central' {
                    active = 'ALWAYS'
                    url = 'https://s01.oss.sonatype.org/service/local'
                    snapshotUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                    closeRepository = true
                    releaseRepository = true
                    stagingRepository('build/staging-deploy')
                }
            }
            */
        }
    }
}

